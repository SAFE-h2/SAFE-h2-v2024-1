import sys
import subprocess
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.font_manager as font_manager
import os
import os.path
from os import path
import pathlib
import shutil
from pathlib import Path
import pyfiglet
from rich import print
from sys import argv
import time
import pylab



title = pyfiglet.figlet_format('SAFE-h2', font='doom', width=100)
print(f'[white]{title}[/white]')

print('performs "dynamic Snp Allocation For Estimating narrow-sense Heritability".............')
print('This version is version_2023a.')





command = "mv SAFE-h2_output_files/* .; rmdir SAFE-h2_output_files"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



Prog1 = pathlib.Path("emmax")
pro11 = "Emmax model will be used to estimate the heritability."
pro12 = "Emmax_prog not found. To apply Emmax_model, please provide the EMMAX program (binary file) renamed as: emmax"
Prog2 = pathlib.Path("ldak")
pro21 = "Ldak GCTA_model will be used to estimate the heritability."
pro22 = "Ldak Thin_model will be used to estimate the heritability."
pro23 = "Ldak_prog not found. To apply Ldak GCTA and Thin models, please provide the LDAK program (binary file) renamed as: ldak"

Prog3 = pathlib.Path("gcta")
pro31 = "GCTA-GREML model will be used to estimate the heritability."
pro32 = "GCTA-GREML_prog not found. To apply GCTA-GREML_model, please provide the GCTA-GREML program (binary file) renamed as: gcta"

Prog4 = pathlib.Path("gemma")
pro41 = "GEMMA model will be used to estimate the heritability."
pro42 = "GEMMA_prog not found. To apply GEMMA_model, please provide the GEMMA program (binary file) renamed as: gemma"



Prog1_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Impl_status_GEMMA", "Test_ADOH", "PURE_Effects"])
Prog1_select_act = Prog1_select['Impl_status_Emmax']
Prog1_select_act.to_csv('Prog1_select_act.txt', header=False, index=False)

Prog2_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Impl_status_GEMMA", "Test_ADOH", "PURE_Effects"])
Prog2_select_act = Prog2_select['Impl_status_LdakGCTA']
Prog2_select_act.to_csv('Prog2_select_act.txt', header=False, index=False)

Prog3_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Impl_status_GEMMA", "Test_ADOH", "PURE_Effects"])
Prog3_select_act = Prog3_select['Impl_status_LdakThin']
Prog3_select_act.to_csv('Prog3_select_act.txt', header=False, index=False)

Prog4_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Impl_status_GEMMA", "Test_ADOH", "PURE_Effects"])
Prog4_select_act = Prog4_select['Impl_status_GCTA-GREML']
Prog4_select_act.to_csv('Prog4_select_act.txt', header=False, index=False)

Prog7_select = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Impl_status_GEMMA", "Test_ADOH", "PURE_Effects"])
Prog7_select_act = Prog7_select['Impl_status_GEMMA']
Prog7_select_act.to_csv('Prog7_select_act.txt', header=False, index=False)


Add_OD_Dom = pd.read_csv("Prog.config", sep="\t", usecols=["Impl_status_Emmax", "Impl_status_LdakGCTA", "Impl_status_LdakThin", "Impl_status_GCTA-GREML", "Impl_status_GEMMA", "Test_ADOH", "PURE_Effects"])
Add_OD_Dom_act = Add_OD_Dom['Test_ADOH']
Add_OD_Dom_act.to_csv('Add_OD_Dom.txt', header=False, index=False)


valueA = '1'  
valueAa = '0'
valueB = '1'
valueBb = '0'
valueC = '1'
valueCc = '0'
valueD = '1'  
valueDd = '0'
valueDdd = '2'
        
valueE = 'emmax_based_all'  
valueEe = 'initial_files'
valueEee = 'intermediate_files'

valueG = '1'
valueGg = '0'





print('SAFE-h2 continues...checking for inputs')

bed_check1 = pathlib.Path("MAIN.bed")
bed1 = "Main.bed is harvested"
bed2 = "SAFE-h2 stops working: Main.bed not found!"
fam_check1 = pathlib.Path("MAIN.fam")
fam1 = "Main.fam is harvested"
fam2 = "SAFE-h2 stops working: Main.fam not found!"
bim_check1 = pathlib.Path("MAIN.bim")
bim1 = "Main.bim is harvested"
bim2 = "SAFE-h2 stops working: Main.bim not found!"


if bed_check1.exists ():
    print(bed1)
else:
    print(bed2)
    exit()

if fam_check1.exists ():
    print(fam1)
else:
    print(fam2)
    exit()

if bim_check1.exists ():
    print(bim1)
else:
    print(bim2)
    exit()




bed_check2 = pathlib.Path("MAIN_AD.bed")
bed11 = "Main.bed is harvested"
bed12 = "SAFE-h2 stops working: Main_AD.bed not found!"
fam_check2 = pathlib.Path("MAIN_AD.fam")
fam11 = "Main.fam is harvested"
fam12 = "SAFE-h2 stops working: Main_AD.fam not found!"
bim_check2 = pathlib.Path("MAIN_AD.bim")
bim11 = "Main.bim is harvested"
bim12 = "SAFE-h2 stops working: Main_AD.bim not found!"


if bed_check2.exists ():
    print(bed11)
else:
    print(bed12)
    exit()

if fam_check2.exists ():
    print(fam11)
else:
    print(fam12)
    exit()


if bim_check2.exists ():
    print(bim11)
else:
    print(bim12)
    exit()



bed_check3 = pathlib.Path("MAIN_ADO.bed")
bed111 = "Main.bed is harvested"
bed112 = "SAFE-h2 stops working: Main_ADO.bed not found!"
fam_check3 = pathlib.Path("MAIN_ADO.fam")
fam111 = "Main.fam is harvested"
fam112 = "SAFE-h2 stops working: Main_ADO.fam not found!"
bim_check3 = pathlib.Path("MAIN_ADO.bim")
bim111 = "Main.bim is harvested"
bim112 = "SAFE-h2 stops working: Main_ADO.bim not found!"


if bed_check3.exists ():
    print(bed111)
else:
    print(bed112)
    exit()

if fam_check3.exists ():
    print(fam111)
else:
    print(fam112)
    exit()

if bim_check3.exists ():
    print(bim111)
else:
    print(bim112)
    exit()




bed_check4 = pathlib.Path("MAIN_ADOH.bed")
bed1111 = "Main.bed is harvested"
bed1112 = "SAFE-h2 stops working: Main_ADOH.bed not found!"
fam_check4 = pathlib.Path("MAIN_ADOH.fam")
fam1111 = "Main.fam is harvested"
fam1112 = "SAFE-h2 stops working: Main_ADOH.fam not found!"
bim_check4 = pathlib.Path("MAIN_ADOH.bim")
bim1111 = "Main.bim is harvested"
bim1112 = "SAFE-h2 stops working: Main_ADOH.bim not found!"


if bed_check4.exists ():
    print(bed1111)
else:
    print(bed1112)
    exit()

if fam_check4.exists ():
    print(fam1111)
else:
    print(fam1112)
    exit()

if bim_check4.exists ():
    print(bim1111)
else:
    print(bim1112)
    exit()

    

valueE = 'emmax_based_all'  
valueEe = 'initial_files'
valueEee = 'intermediate_files'











if Prog1.exists () or Prog2.exists () or Prog3.exists ():
    print('SAFE-h2 initiates the analysis...')
    if Prog1.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(pro11)
            elif valueAa in lineA:
                print('Emmax model will not be used to estimate the heritability.')

    else:
        print(pro12)

    if Prog2.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(pro21)
            elif valueBb in lineB:
                print('Ldak GCTA_model will not be used to estimate the heritability.')
    else:
        print(pro23)
        

    if Prog2.exists ():
        with open("Prog3_select_act.txt", "a+") as ActC:
            ActC.seek(0) # set position to start of file
            lineC = ActC.read().splitlines()
            if valueC in lineC:
                print(pro22)
            elif valueCc in lineC:
                print('Ldak Thin_model will not be used to estimate the heritability.')




    if Prog3.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(pro31)
            elif valueDd in lineD:
                print('GCTA-GREML model will not be used to estimate the heritability.')
            elif valueDdd in lineD:
                print('GCTA-GREML-inbred model will be used to estimate the heritability.')
    else:
       print(pro32)
    if Prog4.exists ():
        with open("Prog7_select_act.txt", "a+") as ActG:
            ActG.seek(0) # set position to start of file
            lineG = ActG.read().splitlines()
            if valueG in lineG:
                print(pro41)
            elif valueGg in lineG:
                print('GEMMA model will not be used to estimate the heritability.')
    else:
       print(pro42)

       
else:
    print('SAFE-h2 stops working: neither of the programs, i.e., emmax, ldak, or gcta, exists!')
    exit()



Covar_e_check = pathlib.Path("Covar_emmax")
Coe1 = "The covariate file will be included in the analysis by Emmax model."
Coe2 = "Emmax model will be implemented without covariates."
Covar_l_check = pathlib.Path("Covar_ldak")
Col1 = "The covariate file will be included in the analysis by Ldak models."
Col2 = "Models by Ldak will be implemented without covariates."
Covar_qg_check = pathlib.Path("qCovar_greml")
Covar_cg_check = pathlib.Path("Covar_greml")
Coqg1 = "The quantitative-covariate file will be included in the analysis by GCTA-GREML model."
Cocg1 = "The categorical-covariate file will be included in the analysis by GCTA-GREML model."
Cog = "GCTA-GREML model will be implemented without covariates."
Coqg2 = "The quantitative-covariate file will be included in the analysis by GCTA-GREML-inbred model."
Cocg2 = "The categorical-covariate file will be included in the analysis by GCTA-GREML-inbred model."
Cog2 = "GCTA-GREML-inbred model will be implemented without covariates."


Covar_gemma_check = pathlib.Path("Covar_gemma")
Coge1 = "The covariate file will be included in the analysis by Gemma model."
Coge2 = "Gemma model will be implemented without covariates."



if Prog1.exists ():
    if Covar_e_check.exists ():
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe1)
            
    else:
        with open("Prog1_select_act.txt", "a+") as ActA:
            ActA.seek(0) # set position to start of file
            lineA = ActA.read().splitlines()
            if valueA in lineA:
                print(Coe2)
                
if Prog2.exists ():
    if Covar_l_check.exists ():
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col1)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col1)
                
    else:
        with open("Prog2_select_act.txt", "a+") as ActB:
            ActB.seek(0) # set position to start of file
            lineB = ActB.read().splitlines()
            if valueB in lineB:
                print(Col2)
            else:
                with open("Prog3_select_act.txt", "a+") as ActC:
                    ActC.seek(0) # set position to start of file
                    lineC = ActC.read().splitlines()
                    if valueC in lineC:
                        print(Col2)

if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Coqg1)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cocg1)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueD in lineD:
                print(Cog)

        


if Prog3.exists ():
    if Covar_qg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Coqg2)
    elif Covar_cg_check.exists ():
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cocg2)  

    else:
        with open("Prog4_select_act.txt", "a+") as ActD:
            ActD.seek(0) # set position to start of file
            lineD = ActD.read().splitlines()
            if valueDdd in lineD:
                print(Cog2)


if Prog4.exists ():
    if Covar_gemma_check.exists ():
        with open("Prog7_select_act.txt", "a+") as ActE:
            ActE.seek(0) # set position to start of file
            lineE = ActE.read().splitlines()
            if valueG in lineE:
                print(Coge1)
            
    else:
        with open("Prog7_select_act.txt", "a+") as ActE:
            ActE.seek(0) # set position to start of file
            lineE = ActE.read().splitlines()
            if valueG in lineE:
                print(Coge2)


                



pvalue_check1 = pathlib.Path("MainPs_Add")

pvalue1 = "The file containing pvalues, i.e., MainPs_Add, is being analyzed."
pvalue2 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs_Add, not found!"

if pvalue_check1.exists ():
    print(pvalue1)

else:
    print(pvalue2)
    exit()

columns = ['ID_Add', 'beta_Add', 'pvalue_Add']
df1 = pd.read_csv("MainPs_Add", header=None, sep='\t', names=columns)

ZZZ1 = len(df1[df1['pvalue_Add']>1]) 
print('Number of incorrect p_values')
print(ZZZ1)


if ZZZ1>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()

ppp1 = df1.pvalue_Add
No_pvalues_Add = len(ppp1)

sss1 = df1.ID_Add
No_sss1 = len(sss1)

if No_sss1 == No_pvalues_Add:
   print('Number of SNPs/p_values in Add. scenario =')
   print(No_pvalues_Add)
else:
    print('No. of p_values in Add. scenario =')
    print(No_pvalues_Add)
    print('No. of SNPs =')
    print(No_sss1)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs_Add file!')
    exit()






pvalue_check2 = pathlib.Path("MainPs_AddDom")

pvalue3 = "The file containing pvalues, i.e., MainPs_AddDom, is being analyzed."
pvalue4 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs_AddDom, not found!"

if pvalue_check2.exists ():
    print(pvalue3)

else:
    print(pvalue4)
    exit()

columns = ['ID_AddDom', 'beta_AddDom', 'pvalue_AddDom']
df2 = pd.read_csv("MainPs_AddDom", header=None, sep='\t', names=columns)

ZZZ2 = len(df2[df2['pvalue_AddDom']>1]) 
print('Number of incorrect p_values')
print(ZZZ2)


if ZZZ2>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()

ppp2 = df2.pvalue_AddDom
No_pvalues_AddDom = len(ppp2)

sss2 = df2.ID_AddDom
No_sss2 = len(sss2)

if No_sss2 == No_pvalues_AddDom:
   print('Number of SNPs/p_values in AddDom. scenario =')
   print(No_pvalues_AddDom)
else:
    print('No. of p_values in AddDom. scenario =')
    print(No_pvalues_AddDom)
    print('No. of SNPs =')
    print(No_sss2)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs_AddDom file!')
    exit()






pvalue_check3 = pathlib.Path("MainPs_AddDomOD")

pvalue5 = "The file containing pvalues, i.e., MainPs_AddDomOD, is being analyzed."
pvalue6 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs_AddDomOD, not found!"

if pvalue_check3.exists ():
    print(pvalue5)

else:
    print(pvalue6)
    exit()

columns = ['ID_AddDomOD', 'beta_AddDomOD', 'pvalue_AddDomOD']
df3 = pd.read_csv("MainPs_AddDomOD", header=None, sep='\t', names=columns)

ZZZ3 = len(df3[df3['pvalue_AddDomOD']>1]) 
print('Number of incorrect p_values')
print(ZZZ3)


if ZZZ3>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()

ppp3 = df3.pvalue_AddDomOD
No_pvalues_AddDomOD = len(ppp3)

sss3 = df3.ID_AddDomOD
No_sss3 = len(sss3)

if No_sss3 == No_pvalues_AddDomOD:
   print('Number of SNPs/p_values in AddDomOD. scenario =')
   print(No_pvalues_AddDomOD)
else:
    print('No. of p_values in AddDomOD. scenario =')
    print(No_pvalues_AddDomOD)
    print('No. of SNPs =')
    print(No_sss3)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs_AddDomOD file!')
    exit()






pvalue_check4 = pathlib.Path("MainPs_AddDomODHet")

pvalue7 = "The file containing pvalues, i.e., MainPs_AddDomODHet, is being analyzed."
pvalue8 = "SAFE-h2 stops working: the file containing pvalues, i.e., MainPs_AddDomODHet, not found!"

if pvalue_check4.exists ():
    print(pvalue7)

else:
    print(pvalue8)
    exit()

columns = ['ID_AddDomODHet', 'beta_AddDomODHet', 'pvalue_AddDomODHet']
df4 = pd.read_csv("MainPs_AddDomODHet", header=None, sep='\t', names=columns)

ZZZ4 = len(df4[df4['pvalue_AddDomODHet']>1]) 
print('Number of incorrect p_values')
print(ZZZ4)


if ZZZ4>0:
    print('SAFE-h2 stops working: pvalues are not correct, i.e., there are values bigger than 1!')
    exit()

ppp4 = df4.pvalue_AddDomODHet
No_pvalues_AddDomODHet = len(ppp4)

sss4 = df4.ID_AddDomODHet
No_sss4 = len(sss4)

if No_sss4 == No_pvalues_AddDomODHet:
   print('Number of SNPs/p_values in AddDomODHet. scenario =')
   print(No_pvalues_AddDomODHet)
else:
    print('No. of p_values in AddDomODHet. scenario =')
    print(No_pvalues_AddDomODHet)
    print('No. of SNPs =')
    print(No_sss3)
    print('SAFE-h2 stops working: the number of pvalues and SNP IDs are not same, pleasae check the MainPs_AddDomODHet file!')
    exit()






pvalue_check = pathlib.Path("MAIN.fam")
columns = ['fcol1', 'fcol2', 'fcol3', 'fcol4', 'fcol5', 'fcol6']
dffam = pd.read_csv("MAIN.fam", header=None, sep='\t', names=columns)
fff = dffam.fcol6
No_fff = len(fff)

covaremmax_check = pathlib.Path("Covar_emmax")
CovarEmmax1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covaremmax_check.exists ():
    print(CovarEmmax1)

if covaremmax_check.exists ():
    columns = ['ecol1', 'ecol2', 'ecol3', 'ecol4']
    dfcove = pd.read_csv("Covar_emmax", header=None, sep='\t', names=columns)
    covaremmax = dfcove.ecol4
    No_covaremmax = len(covaremmax)

if covaremmax_check.exists ():
    if No_fff == No_covaremmax:
        print('Number of covariates for EMMAX =')
        print(No_covaremmax)
    else:
        print('No. of covariates =')
        print(No_covaremmax)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_emmax file!')

covarldak_check = pathlib.Path("Covar_ldak")
Covarldak1 = "The file containing covariates, i.e., Covar_ldak, is being analyzed."
if covarldak_check.exists ():
    print(Covarldak1)

if covarldak_check.exists ():
    columns = ['lcol1', 'lcol2', 'lcol3']
    dfcovl = pd.read_csv("Covar_ldak", header=None, sep='\t', names=columns)
    covarldak = dfcovl.lcol3
    No_covarldak = len(covarldak)

if covarldak_check.exists ():
    if No_fff == No_covarldak:
        print('Number of covariates for LDAK =')
        print(No_covarldak)
    else:
        print('No. of covariates =')
        print(No_covarldak)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_ldak file!')

covargreml_check = pathlib.Path("Covar_greml")
Covargreml1 = "The file containing covariates, i.e., Covar_greml, is being analyzed."
if covargreml_check.exists ():
    print(Covargreml1)

if covargreml_check.exists ():
    columns = ['gcol1', 'gcol2', 'gcol3']
    dfcovg = pd.read_csv("Covar_greml", header=None, sep='\t', names=columns)
    covargreml = dfcovg.gcol3
    No_covargreml = len(covargreml)

if covargreml_check.exists ():
    if No_fff == No_covargreml:
        print('Number of categorical covariates for GCTA_GREML =')
        print(No_covargreml)
    else:
        print('No. of covariates =')
        print(No_covargreml)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_greml file!')

covargremlq_check = pathlib.Path("qCovar_greml")
Covargremlq1 = "The file containing covariates, i.e., qCovar_greml, is being analyzed."
if covargremlq_check.exists ():
    print(Covargremlq1)

if covargremlq_check.exists ():
    columns = ['qgcol1', 'qgcol2', 'qgcol3']
    dfcovgq = pd.read_csv("qCovar_greml", header=None, sep='\t', names=columns)
    covargremlq = dfcovgq.qgcol3
    No_covargremlq = len(covargremlq)

if covargremlq_check.exists ():
    if No_fff == No_covargremlq:
        print('Number of covariates for GCTA_GREML =')
        print(No_covargremlq)
    else:
        print('No. of covariates =')
        print(No_covargremlq)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the qCovar_greml file!')



covargemma_check = pathlib.Path("Covar_gemma")
CovarGemma1 = "The file containing covariates, i.e., Covar_emmax, is being analyzed."
if covargemma_check.exists ():
    print(CovarGemma1)

if covargemma_check.exists ():
    columns = ['gemcol1']
    dfcovgem = pd.read_csv("Covar_gemma", header=None, sep='\t', names=columns)
    covargemma1 = dfcovgem.gemcol1
    No_covargemma = len(covargemma1)

if covargemma_check.exists ():
    if No_fff == No_covargemma:
        print('Number of covariates for GEMMA =')
        print(No_covargemma)
    else:
        print('No. of covariates =')
        print(No_covargemma)
        print('No. of genotypes =')
        print(No_fff)
        print('SAFE-h2 stops working: the number of covariates and genotypes are not same, pleasae check the Covar_gemma file!')








    
print(' "SNP profiling based on their pvalues for Add. scenario"...')
print(' "SNP profiling based on their pvalues for Add+Dom. scenario"...')
print(' "SNP profiling based on their pvalues for Add+Dom+OD. scenario"...')
print(' "SNP profiling based on their pvalues for Add+Dom+OD+Het. scenario"...')






df11 = df1.loc[df1['pvalue_Add'] < 0.0000001]
df11_1 = df11.iloc[:,0]
with open('list1p_Add', 'a') as out_file1:
    out_file1.write(df11_1.to_csv(header=None,index=False))


df12 = df1.loc[df1['pvalue_Add'] < 0.000001]
df12_2 = df12.iloc[:,0]
with open('list2p_Add', 'a') as out_file2:
    out_file2.write(df12_2.to_csv(header=None,index=False))


df13 = df1.loc[df1['pvalue_Add'] < 0.00001]
df13_3 = df13.iloc[:,0]
with open('list3p_Add', 'a') as out_file3:
    out_file3.write(df13_3.to_csv(header=None,index=False))


df14 = df1.loc[df1['pvalue_Add'] < 0.0001]
df14_4 = df14.iloc[:,0]
with open('list4p_Add', 'a') as out_file4:
    out_file4.write(df14_4.to_csv(header=None,index=False))
    
    
df15 = df1.loc[df1['pvalue_Add'] < 0.001]
df15_5 = df15.iloc[:,0]
with open('list5p_Add', 'a') as out_file5:
    out_file5.write(df15_5.to_csv(header=None,index=False))


df16 = df1.loc[df1['pvalue_Add'] < 0.01]
df16_6 = df16.iloc[:,0]
with open('list6p_Add', 'a') as out_file6:
    out_file6.write(df16_6.to_csv(header=None,index=False))


df17 = df1.loc[df1['pvalue_Add'] < 0.1]
df17_7 = df17.iloc[:,0]
with open('list7p_Add', 'a') as out_file7:
    out_file7.write(df17_7.to_csv(header=None,index=False))


df18 = df1.loc[df1['pvalue_Add'] < 0.2]
df18_8 = df18.iloc[:,0]
with open('list8p_Add', 'a') as out_file8:
    out_file8.write(df18_8.to_csv(header=None,index=False))


df19 = df1.loc[df1['pvalue_Add'] < 0.25]
df19_9 = df19.iloc[:,0]
with open('list9p_Add', 'a') as out_file9:
    out_file9.write(df19_9.to_csv(header=None,index=False))


df110 = df1.loc[df1['pvalue_Add'] < 0.3]
df110_10 = df110.iloc[:,0]
with open('list10p_Add', 'a') as out_file10:
    out_file10.write(df110_10.to_csv(header=None,index=False))


df111 = df1.loc[df1['pvalue_Add'] < 0.4]
df111_11 = df111.iloc[:,0]
with open('list11p_Add', 'a') as out_file11:
    out_file11.write(df111_11.to_csv(header=None,index=False))


df112 = df1.loc[df1['pvalue_Add'] < 0.5]
df112_12 = df112.iloc[:,0]
with open('list12p_Add', 'a') as out_file12:
    out_file12.write(df112_12.to_csv(header=None,index=False))


df113 = df1.loc[df1['pvalue_Add'] < 0.6]
df113_13 = df113.iloc[:,0]
with open('list13p_Add', 'a') as out_file13:
    out_file13.write(df113_13.to_csv(header=None,index=False))


df114 = df1.loc[df1['pvalue_Add'] < 0.7]
df114_14 = df114.iloc[:,0]
with open('list14p_Add', 'a') as out_file14:
    out_file14.write(df114_14.to_csv(header=None,index=False))

 
df115 = df1.loc[df1['pvalue_Add'] < 0.75]
df115_15 = df115.iloc[:,0]
with open('list15p_Add', 'a') as out_file15:
    out_file15.write(df115_15.to_csv(header=None,index=False))


df116 = df1.loc[df1['pvalue_Add'] < 0.8]
df116_16 = df116.iloc[:,0]
with open('list16p_Add', 'a') as out_file16:
    out_file16.write(df116_16.to_csv(header=None,index=False))


df117 = df1.loc[df1['pvalue_Add'] < 0.9]
df117_17 = df117.iloc[:,0]
with open('list17p_Add', 'a') as out_file17:
    out_file17.write(df117_17.to_csv(header=None,index=False))


df118 = df1.loc[df1['pvalue_Add'] < 0.95]
df118_18 = df118.iloc[:,0]
with open('list18p_Add', 'a') as out_file18:
    out_file18.write(df118_18.to_csv(header=None,index=False))

command = "awk '!x[$0]++' list1p_Add > list1_Add; awk '!x[$0]++' list2p_Add > list2_Add; awk '!x[$0]++' list3p_Add > list3_Add; awk '!x[$0]++' list4p_Add > list4_Add; awk '!x[$0]++' list5p_Add > list5_Add; awk '!x[$0]++' list6p_Add > list6_Add; awk '!x[$0]++' list7p_Add > list7_Add; awk '!x[$0]++' list8p_Add > list8_Add; awk '!x[$0]++' list9p_Add > list9_Add; awk '!x[$0]++' list10p_Add > list10_Add; awk '!x[$0]++' list11p_Add > list11_Add; awk '!x[$0]++' list12p_Add > list12_Add; awk '!x[$0]++' list13p_Add > list13_Add; awk '!x[$0]++' list14p_Add > list14_Add; awk '!x[$0]++' list15p_Add > list15_Add; awk '!x[$0]++' list16p_Add > list16_Add; awk '!x[$0]++' list17p_Add > list17_Add; awk '!x[$0]++' list18p_Add > list18_Add"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())







df21 = df2.loc[df2['pvalue_AddDom'] < 0.0000001]
df21_1 = df21.iloc[:,0]
with open('list1p_AddDom', 'a') as out_file21:
    out_file21.write(df21_1.to_csv(header=None,index=False))


df22 = df2.loc[df2['pvalue_AddDom'] < 0.000001]
df22_2 = df22.iloc[:,0]
with open('list2p_AddDom', 'a') as out_file22:
    out_file22.write(df22_2.to_csv(header=None,index=False))


df23 = df2.loc[df2['pvalue_AddDom'] < 0.00001]
df23_3 = df23.iloc[:,0]
with open('list3p_AddDom', 'a') as out_file23:
    out_file23.write(df23_3.to_csv(header=None,index=False))


df24 = df2.loc[df2['pvalue_AddDom'] < 0.0001]
df24_4 = df24.iloc[:,0]
with open('list4p_AddDom', 'a') as out_file24:
    out_file24.write(df24_4.to_csv(header=None,index=False))
    
    
df25 = df2.loc[df2['pvalue_AddDom'] < 0.001]
df25_5 = df25.iloc[:,0]
with open('list5p_AddDom', 'a') as out_file25:
    out_file25.write(df25_5.to_csv(header=None,index=False))


df26 = df2.loc[df2['pvalue_AddDom'] < 0.01]
df26_6 = df26.iloc[:,0]
with open('list6p_AddDom', 'a') as out_file26:
    out_file26.write(df26_6.to_csv(header=None,index=False))


df27 = df2.loc[df2['pvalue_AddDom'] < 0.1]
df27_7 = df27.iloc[:,0]
with open('list7p_AddDom', 'a') as out_file27:
    out_file27.write(df27_7.to_csv(header=None,index=False))


df28 = df2.loc[df2['pvalue_AddDom'] < 0.2]
df28_8 = df28.iloc[:,0]
with open('list8p_AddDom', 'a') as out_file28:
    out_file28.write(df28_8.to_csv(header=None,index=False))


df29 = df2.loc[df2['pvalue_AddDom'] < 0.25]
df29_9 = df29.iloc[:,0]
with open('list9p_AddDom', 'a') as out_file29:
    out_file29.write(df29_9.to_csv(header=None,index=False))


df210 = df2.loc[df2['pvalue_AddDom'] < 0.3]
df210_10 = df210.iloc[:,0]
with open('list10p_AddDom', 'a') as out_file210:
    out_file210.write(df210_10.to_csv(header=None,index=False))


df211 = df2.loc[df2['pvalue_AddDom'] < 0.4]
df211_11 = df211.iloc[:,0]
with open('list11p_AddDom', 'a') as out_file211:
    out_file211.write(df211_11.to_csv(header=None,index=False))


df212 = df2.loc[df2['pvalue_AddDom'] < 0.5]
df212_12 = df212.iloc[:,0]
with open('list12p_AddDom', 'a') as out_file212:
    out_file212.write(df212_12.to_csv(header=None,index=False))


df213 = df2.loc[df2['pvalue_AddDom'] < 0.6]
df213_13 = df213.iloc[:,0]
with open('list13p_AddDom', 'a') as out_file213:
    out_file213.write(df213_13.to_csv(header=None,index=False))


df214 = df2.loc[df2['pvalue_AddDom'] < 0.7]
df214_14 = df214.iloc[:,0]
with open('list14p_AddDom', 'a') as out_file214:
    out_file214.write(df214_14.to_csv(header=None,index=False))

 
df215 = df2.loc[df2['pvalue_AddDom'] < 0.75]
df215_15 = df215.iloc[:,0]
with open('list15p_AddDom', 'a') as out_file215:
    out_file215.write(df215_15.to_csv(header=None,index=False))


df216 = df2.loc[df2['pvalue_AddDom'] < 0.8]
df216_16 = df216.iloc[:,0]
with open('list16p_AddDom', 'a') as out_file216:
    out_file216.write(df216_16.to_csv(header=None,index=False))


df217 = df2.loc[df2['pvalue_AddDom'] < 0.9]
df217_17 = df217.iloc[:,0]
with open('list17p_AddDom', 'a') as out_file217:
    out_file217.write(df217_17.to_csv(header=None,index=False))


df218 = df2.loc[df2['pvalue_AddDom'] < 0.95]
df218_18 = df218.iloc[:,0]
with open('list18p_AddDom', 'a') as out_file218:
    out_file218.write(df218_18.to_csv(header=None,index=False))

command = "awk '!x[$0]++' list1p_AddDom > list1_AddDom; awk '!x[$0]++' list2p_AddDom > list2_AddDom; awk '!x[$0]++' list3p_AddDom > list3_AddDom; awk '!x[$0]++' list4p_AddDom > list4_AddDom; awk '!x[$0]++' list5p_AddDom > list5_AddDom; awk '!x[$0]++' list6p_AddDom > list6_AddDom; awk '!x[$0]++' list7p_AddDom > list7_AddDom; awk '!x[$0]++' list8p_AddDom > list8_AddDom; awk '!x[$0]++' list9p_AddDom > list9_AddDom; awk '!x[$0]++' list10p_AddDom > list10_AddDom; awk '!x[$0]++' list11p_AddDom > list11_AddDom; awk '!x[$0]++' list12p_AddDom > list12_AddDom; awk '!x[$0]++' list13p_AddDom > list13_AddDom; awk '!x[$0]++' list14p_AddDom > list14_AddDom; awk '!x[$0]++' list15p_AddDom > list15_AddDom; awk '!x[$0]++' list16p_AddDom > list16_AddDom; awk '!x[$0]++' list17p_AddDom > list17_AddDom; awk '!x[$0]++' list18p_AddDom > list18_AddDom"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())






df31 = df3.loc[df3['pvalue_AddDomOD'] < 0.0000001]
df31_1 = df31.iloc[:,0]
with open('list1p_AddDomOD', 'a') as out_file31:
    out_file31.write(df31_1.to_csv(header=None,index=False))


df32 = df3.loc[df3['pvalue_AddDomOD'] < 0.000001]
df32_2 = df32.iloc[:,0]
with open('list2p_AddDomOD', 'a') as out_file32:
    out_file32.write(df32_2.to_csv(header=None,index=False))


df33 = df3.loc[df3['pvalue_AddDomOD'] < 0.00001]
df33_3 = df33.iloc[:,0]
with open('list3p_AddDomOD', 'a') as out_file33:
    out_file33.write(df33_3.to_csv(header=None,index=False))


df34 = df3.loc[df3['pvalue_AddDomOD'] < 0.0001]
df34_4 = df34.iloc[:,0]
with open('list4p_AddDomOD', 'a') as out_file34:
    out_file34.write(df34_4.to_csv(header=None,index=False))
    
    
df35 = df3.loc[df3['pvalue_AddDomOD'] < 0.001]
df35_5 = df35.iloc[:,0]
with open('list5p_AddDomOD', 'a') as out_file35:
    out_file35.write(df35_5.to_csv(header=None,index=False))


df36 = df3.loc[df3['pvalue_AddDomOD'] < 0.01]
df36_6 = df36.iloc[:,0]
with open('list6p_AddDomOD', 'a') as out_file36:
    out_file36.write(df36_6.to_csv(header=None,index=False))


df37 = df3.loc[df3['pvalue_AddDomOD'] < 0.1]
df37_7 = df37.iloc[:,0]
with open('list7p_AddDomOD', 'a') as out_file37:
    out_file37.write(df37_7.to_csv(header=None,index=False))


df38 = df3.loc[df3['pvalue_AddDomOD'] < 0.2]
df38_8 = df38.iloc[:,0]
with open('list8p_AddDomOD', 'a') as out_file38:
    out_file38.write(df38_8.to_csv(header=None,index=False))


df39 = df3.loc[df3['pvalue_AddDomOD'] < 0.25]
df39_9 = df39.iloc[:,0]
with open('list9p_AddDomOD', 'a') as out_file39:
    out_file39.write(df39_9.to_csv(header=None,index=False))


df310 = df3.loc[df3['pvalue_AddDomOD'] < 0.3]
df310_10 = df310.iloc[:,0]
with open('list10p_AddDomOD', 'a') as out_file310:
    out_file310.write(df310_10.to_csv(header=None,index=False))


df311 = df3.loc[df3['pvalue_AddDomOD'] < 0.4]
df311_11 = df311.iloc[:,0]
with open('list11p_AddDomOD', 'a') as out_file311:
    out_file311.write(df311_11.to_csv(header=None,index=False))


df312 = df3.loc[df3['pvalue_AddDomOD'] < 0.5]
df312_12 = df312.iloc[:,0]
with open('list12p_AddDomOD', 'a') as out_file312:
    out_file312.write(df312_12.to_csv(header=None,index=False))


df313 = df3.loc[df3['pvalue_AddDomOD'] < 0.6]
df313_13 = df313.iloc[:,0]
with open('list13p_AddDomOD', 'a') as out_file313:
    out_file313.write(df313_13.to_csv(header=None,index=False))


df314 = df3.loc[df3['pvalue_AddDomOD'] < 0.7]
df314_14 = df314.iloc[:,0]
with open('list14p_AddDomOD', 'a') as out_file314:
    out_file314.write(df314_14.to_csv(header=None,index=False))

 
df315 = df3.loc[df3['pvalue_AddDomOD'] < 0.75]
df315_15 = df315.iloc[:,0]
with open('list15p_AddDomOD', 'a') as out_file315:
    out_file315.write(df315_15.to_csv(header=None,index=False))


df316 = df3.loc[df3['pvalue_AddDomOD'] < 0.8]
df316_16 = df316.iloc[:,0]
with open('list16p_AddDomOD', 'a') as out_file316:
    out_file316.write(df316_16.to_csv(header=None,index=False))


df317 = df3.loc[df3['pvalue_AddDomOD'] < 0.9]
df317_17 = df317.iloc[:,0]
with open('list17p_AddDomOD', 'a') as out_file317:
    out_file317.write(df317_17.to_csv(header=None,index=False))


df318 = df3.loc[df3['pvalue_AddDomOD'] < 0.95]
df318_18 = df318.iloc[:,0]
with open('list18p_AddDomOD', 'a') as out_file318:
    out_file318.write(df318_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p_AddDomOD > list1_AddDomOD; awk '!x[$0]++' list2p_AddDomOD > list2_AddDomOD; awk '!x[$0]++' list3p_AddDomOD > list3_AddDomOD; awk '!x[$0]++' list4p_AddDomOD > list4_AddDomOD; awk '!x[$0]++' list5p_AddDomOD > list5_AddDomOD; awk '!x[$0]++' list6p_AddDomOD > list6_AddDomOD; awk '!x[$0]++' list7p_AddDomOD > list7_AddDomOD; awk '!x[$0]++' list8p_AddDomOD > list8_AddDomOD; awk '!x[$0]++' list9p_AddDomOD > list9_AddDomOD; awk '!x[$0]++' list10p_AddDomOD > list10_AddDomOD; awk '!x[$0]++' list11p_AddDomOD > list11_AddDomOD; awk '!x[$0]++' list12p_AddDomOD > list12_AddDomOD; awk '!x[$0]++' list13p_AddDomOD > list13_AddDomOD; awk '!x[$0]++' list14p_AddDomOD > list14_AddDomOD; awk '!x[$0]++' list15p_AddDomOD > list15_AddDomOD; awk '!x[$0]++' list16p_AddDomOD > list16_AddDomOD; awk '!x[$0]++' list17p_AddDomOD > list17_AddDomOD; awk '!x[$0]++' list18p_AddDomOD > list18_AddDomOD"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())












df41 = df4.loc[df4['pvalue_AddDomODHet'] < 0.0000001]
df41_1 = df41.iloc[:,0]
with open('list1p_AddDomODHet', 'a') as out_file41:
    out_file41.write(df41_1.to_csv(header=None,index=False))


df42 = df4.loc[df4['pvalue_AddDomODHet'] < 0.000001]
df42_2 = df42.iloc[:,0]
with open('list2p_AddDomODHet', 'a') as out_file42:
    out_file42.write(df42_2.to_csv(header=None,index=False))


df43 = df4.loc[df4['pvalue_AddDomODHet'] < 0.00001]
df43_3 = df43.iloc[:,0]
with open('list3p_AddDomODHet', 'a') as out_file43:
    out_file43.write(df43_3.to_csv(header=None,index=False))


df44 = df4.loc[df4['pvalue_AddDomODHet'] < 0.0001]
df44_4 = df44.iloc[:,0]
with open('list4p_AddDomODHet', 'a') as out_file44:
    out_file44.write(df44_4.to_csv(header=None,index=False))
    
    
df45 = df4.loc[df4['pvalue_AddDomODHet'] < 0.001]
df45_5 = df45.iloc[:,0]
with open('list5p_AddDomODHet', 'a') as out_file45:
    out_file45.write(df45_5.to_csv(header=None,index=False))


df46 = df4.loc[df4['pvalue_AddDomODHet'] < 0.01]
df46_6 = df46.iloc[:,0]
with open('list6p_AddDomODHet', 'a') as out_file46:
    out_file46.write(df46_6.to_csv(header=None,index=False))


df47 = df4.loc[df4['pvalue_AddDomODHet'] < 0.1]
df47_7 = df47.iloc[:,0]
with open('list7p_AddDomODHet', 'a') as out_file47:
    out_file47.write(df47_7.to_csv(header=None,index=False))


df48 = df4.loc[df4['pvalue_AddDomODHet'] < 0.2]
df48_8 = df48.iloc[:,0]
with open('list8p_AddDomODHet', 'a') as out_file48:
    out_file48.write(df48_8.to_csv(header=None,index=False))


df49 = df4.loc[df4['pvalue_AddDomODHet'] < 0.25]
df49_9 = df49.iloc[:,0]
with open('list9p_AddDomODHet', 'a') as out_file49:
    out_file49.write(df49_9.to_csv(header=None,index=False))


df410 = df4.loc[df4['pvalue_AddDomODHet'] < 0.3]
df410_10 = df410.iloc[:,0]
with open('list10p_AddDomODHet', 'a') as out_file410:
    out_file410.write(df410_10.to_csv(header=None,index=False))


df411 = df4.loc[df4['pvalue_AddDomODHet'] < 0.4]
df411_11 = df411.iloc[:,0]
with open('list11p_AddDomODHet', 'a') as out_file411:
    out_file411.write(df411_11.to_csv(header=None,index=False))


df412 = df4.loc[df4['pvalue_AddDomODHet'] < 0.5]
df412_12 = df412.iloc[:,0]
with open('list12p_AddDomODHet', 'a') as out_file412:
    out_file412.write(df412_12.to_csv(header=None,index=False))


df413 = df4.loc[df4['pvalue_AddDomODHet'] < 0.6]
df413_13 = df413.iloc[:,0]
with open('list13p_AddDomODHet', 'a') as out_file413:
    out_file413.write(df413_13.to_csv(header=None,index=False))


df414 = df4.loc[df4['pvalue_AddDomODHet'] < 0.7]
df414_14 = df414.iloc[:,0]
with open('list14p_AddDomODHet', 'a') as out_file414:
    out_file414.write(df414_14.to_csv(header=None,index=False))

 
df415 = df4.loc[df4['pvalue_AddDomODHet'] < 0.75]
df415_15 = df415.iloc[:,0]
with open('list15p_AddDomODHet', 'a') as out_file415:
    out_file415.write(df415_15.to_csv(header=None,index=False))


df416 = df4.loc[df4['pvalue_AddDomODHet'] < 0.8]
df416_16 = df416.iloc[:,0]
with open('list16p_AddDomODHet', 'a') as out_file416:
    out_file416.write(df416_16.to_csv(header=None,index=False))


df417 = df4.loc[df4['pvalue_AddDomODHet'] < 0.9]
df417_17 = df417.iloc[:,0]
with open('list17p_AddDomODHet', 'a') as out_file417:
    out_file417.write(df417_17.to_csv(header=None,index=False))


df418 = df4.loc[df4['pvalue_AddDomODHet'] < 0.95]
df418_18 = df418.iloc[:,0]
with open('list18p_AddDomODHet', 'a') as out_file418:
    out_file418.write(df418_18.to_csv(header=None,index=False))




command = "awk '!x[$0]++' list1p_AddDomODHet > list1_AddDomODHet; awk '!x[$0]++' list2p_AddDomODHet > list2_AddDomODHet; awk '!x[$0]++' list3p_AddDomODHet > list3_AddDomODHet; awk '!x[$0]++' list4p_AddDomODHet > list4_AddDomODHet; awk '!x[$0]++' list5p_AddDomODHet > list5_AddDomODHet; awk '!x[$0]++' list6p_AddDomODHet > list6_AddDomODHet; awk '!x[$0]++' list7p_AddDomODHet > list7_AddDomODHet; awk '!x[$0]++' list8p_AddDomODHet > list8_AddDomODHet; awk '!x[$0]++' list9p_AddDomODHet > list9_AddDomODHet; awk '!x[$0]++' list10p_AddDomODHet > list10_AddDomODHet; awk '!x[$0]++' list11p_AddDomODHet > list11_AddDomODHet; awk '!x[$0]++' list12p_AddDomODHet > list12_AddDomODHet; awk '!x[$0]++' list13p_AddDomODHet > list13_AddDomODHet; awk '!x[$0]++' list14p_AddDomODHet > list14_AddDomODHet; awk '!x[$0]++' list15p_AddDomODHet > list15_AddDomODHet; awk '!x[$0]++' list16p_AddDomODHet > list16_AddDomODHet; awk '!x[$0]++' list17p_AddDomODHet > list17_AddDomODHet; awk '!x[$0]++' list18p_AddDomODHet > list18_AddDomODHet"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)



command = "awk '{print $1}' < MainPs_Add > list19_Add; awk '{print $1}' < MainPs_AddDom > list19_AddDom; awk '{print $1}' < MainPs_AddDomOD > list19_AddDomOD; awk '{print $1}' < MainPs_AddDomODHet > list19_AddDomODHet"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



fileCovar_emmax = pathlib.Path("Covar_emmax")
fileCovar_ldak = pathlib.Path("Covar_ldak")
fileqCovar_greml = pathlib.Path("qCovar_greml")
filecCovar_greml = pathlib.Path("Covar_greml")
fileCovar_gemma = pathlib.Path("Covar_gemma")


list1co_Add = sum(1 for line in open('list1_Add'))
list2co_Add = sum(1 for line in open('list2_Add'))
list3co_Add = sum(1 for line in open('list3_Add'))
list4co_Add = sum(1 for line in open('list4_Add'))
list5co_Add = sum(1 for line in open('list5_Add'))
list6co_Add = sum(1 for line in open('list6_Add'))
list7co_Add = sum(1 for line in open('list7_Add'))
list8co_Add = sum(1 for line in open('list8_Add'))
list9co_Add = sum(1 for line in open('list9_Add'))
list10co_Add = sum(1 for line in open('list10_Add'))
list11co_Add = sum(1 for line in open('list11_Add'))
list12co_Add = sum(1 for line in open('list12_Add'))
list13co_Add = sum(1 for line in open('list13_Add'))
list14co_Add = sum(1 for line in open('list14_Add'))
list15co_Add = sum(1 for line in open('list15_Add'))
list16co_Add = sum(1 for line in open('list16_Add'))
list17co_Add = sum(1 for line in open('list17_Add'))
list18co_Add = sum(1 for line in open('list18_Add'))





list1co_AddDom = sum(1 for line in open('list1_AddDom'))
list2co_AddDom = sum(1 for line in open('list2_AddDom'))
list3co_AddDom = sum(1 for line in open('list3_AddDom'))
list4co_AddDom = sum(1 for line in open('list4_AddDom'))
list5co_AddDom = sum(1 for line in open('list5_AddDom'))
list6co_AddDom = sum(1 for line in open('list6_AddDom'))
list7co_AddDom = sum(1 for line in open('list7_AddDom'))
list8co_AddDom = sum(1 for line in open('list8_AddDom'))
list9co_AddDom = sum(1 for line in open('list9_AddDom'))
list10co_AddDom = sum(1 for line in open('list10_AddDom'))
list11co_AddDom = sum(1 for line in open('list11_AddDom'))
list12co_AddDom = sum(1 for line in open('list12_AddDom'))
list13co_AddDom = sum(1 for line in open('list13_AddDom'))
list14co_AddDom = sum(1 for line in open('list14_AddDom'))
list15co_AddDom = sum(1 for line in open('list15_AddDom'))
list16co_AddDom = sum(1 for line in open('list16_AddDom'))
list17co_AddDom = sum(1 for line in open('list17_AddDom'))
list18co_AddDom = sum(1 for line in open('list18_AddDom'))





list1co_AddDomOD = sum(1 for line in open('list1_AddDomOD'))
list2co_AddDomOD = sum(1 for line in open('list2_AddDomOD'))
list3co_AddDomOD = sum(1 for line in open('list3_AddDomOD'))
list4co_AddDomOD = sum(1 for line in open('list4_AddDomOD'))
list5co_AddDomOD = sum(1 for line in open('list5_AddDomOD'))
list6co_AddDomOD = sum(1 for line in open('list6_AddDomOD'))
list7co_AddDomOD = sum(1 for line in open('list7_AddDomOD'))
list8co_AddDomOD = sum(1 for line in open('list8_AddDomOD'))
list9co_AddDomOD = sum(1 for line in open('list9_AddDomOD'))
list10co_AddDomOD = sum(1 for line in open('list10_AddDomOD'))
list11co_AddDomOD = sum(1 for line in open('list11_AddDomOD'))
list12co_AddDomOD = sum(1 for line in open('list12_AddDomOD'))
list13co_AddDomOD = sum(1 for line in open('list13_AddDomOD'))
list14co_AddDomOD = sum(1 for line in open('list14_AddDomOD'))
list15co_AddDomOD = sum(1 for line in open('list15_AddDomOD'))
list16co_AddDomOD = sum(1 for line in open('list16_AddDomOD'))
list17co_AddDomOD = sum(1 for line in open('list17_AddDomOD'))
list18co_AddDomOD = sum(1 for line in open('list18_AddDomOD'))





list1co_AddDomODHet = sum(1 for line in open('list1_AddDomODHet'))
list2co_AddDomODHet = sum(1 for line in open('list2_AddDomODHet'))
list3co_AddDomODHet = sum(1 for line in open('list3_AddDomODHet'))
list4co_AddDomODHet = sum(1 for line in open('list4_AddDomODHet'))
list5co_AddDomODHet = sum(1 for line in open('list5_AddDomODHet'))
list6co_AddDomODHet = sum(1 for line in open('list6_AddDomODHet'))
list7co_AddDomODHet = sum(1 for line in open('list7_AddDomODHet'))
list8co_AddDomODHet = sum(1 for line in open('list8_AddDomODHet'))
list9co_AddDomODHet = sum(1 for line in open('list9_AddDomODHet'))
list10co_AddDomODHet = sum(1 for line in open('list10_AddDomODHet'))
list11co_AddDomODHet = sum(1 for line in open('list11_AddDomODHet'))
list12co_AddDomODHet = sum(1 for line in open('list12_AddDomODHet'))
list13co_AddDomODHet = sum(1 for line in open('list13_AddDomODHet'))
list14co_AddDomODHet = sum(1 for line in open('list14_AddDomODHet'))
list15co_AddDomODHet = sum(1 for line in open('list15_AddDomODHet'))
list16co_AddDomODHet = sum(1 for line in open('list16_AddDomODHet'))
list17co_AddDomODHet = sum(1 for line in open('list17_AddDomODHet'))
list18co_AddDomODHet = sum(1 for line in open('list18_AddDomODHet'))






with open('Number_of_pvalues1_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list1co_Add))

with open('Number_of_pvalues2_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list2co_Add))
    
with open('Number_of_pvalues3_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list3co_Add))
    
with open('Number_of_pvalues4_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list4co_Add))
    
with open('Number_of_pvalues5_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list5co_Add))
    
with open('Number_of_pvalues6_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list6co_Add))
    
with open('Number_of_pvalues7_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list7co_Add))
    
with open('Number_of_pvalues8_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list8co_Add))

with open('Number_of_pvalues9_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list9co_Add))
    
with open('Number_of_pvalues10_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list10co_Add))
    
with open('Number_of_pvalues11_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list11co_Add))
    
with open('Number_of_pvalues12_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list12co_Add))
    
with open('Number_of_pvalues13_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list13co_Add))
    
with open('Number_of_pvalues14_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list14co_Add))
    
with open('Number_of_pvalues15_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list15co_Add))
    
with open('Number_of_pvalues16_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list16co_Add))
    
with open('Number_of_pvalues17_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list17co_Add))
    
with open('Number_of_pvalues18_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(list18co_Add))
    
with open('Number_of_pvalues19_Add', 'a') as out_pvalue1:
    out_pvalue1.write(str(No_pvalues_Add))

    





with open('Number_of_pvalues1_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list1co_AddDom))

with open('Number_of_pvalues2_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list2co_AddDom))
    
with open('Number_of_pvalues3_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list3co_AddDom))
    
with open('Number_of_pvalues4_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list4co_AddDom))
    
with open('Number_of_pvalues5_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list5co_AddDom))
    
with open('Number_of_pvalues6_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list6co_AddDom))
    
with open('Number_of_pvalues7_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list7co_AddDom))
    
with open('Number_of_pvalues8_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list8co_AddDom))

with open('Number_of_pvalues9_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list9co_AddDom))
    
with open('Number_of_pvalues10_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list10co_AddDom))
    
with open('Number_of_pvalues11_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list11co_AddDom))
    
with open('Number_of_pvalues12_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list12co_AddDom))
    
with open('Number_of_pvalues13_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list13co_AddDom))
    
with open('Number_of_pvalues14_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list14co_AddDom))
    
with open('Number_of_pvalues15_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list15co_AddDom))
    
with open('Number_of_pvalues16_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list16co_AddDom))
    
with open('Number_of_pvalues17_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list17co_AddDom))
    
with open('Number_of_pvalues18_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(list18co_AddDom))
    
with open('Number_of_pvalues19_AddDom', 'a') as out_pvalue2:
    out_pvalue2.write(str(No_pvalues_AddDom))












with open('Number_of_pvalues1_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list1co_AddDomOD))

with open('Number_of_pvalues2_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list2co_AddDomOD))
    
with open('Number_of_pvalues3_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list3co_AddDomOD))
    
with open('Number_of_pvalues4_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list4co_AddDomOD))
    
with open('Number_of_pvalues5_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list5co_AddDomOD))
    
with open('Number_of_pvalues6_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list6co_AddDomOD))
    
with open('Number_of_pvalues7_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list7co_AddDomOD))
    
with open('Number_of_pvalues8_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list8co_AddDomOD))

with open('Number_of_pvalues9_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list9co_AddDomOD))
    
with open('Number_of_pvalues10_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list10co_AddDomOD))
    
with open('Number_of_pvalues11_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list11co_AddDomOD))
    
with open('Number_of_pvalues12_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list12co_AddDomOD))
    
with open('Number_of_pvalues13_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list13co_AddDomOD))
    
with open('Number_of_pvalues14_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list14co_AddDomOD))
    
with open('Number_of_pvalues15_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list15co_AddDomOD))
    
with open('Number_of_pvalues16_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list16co_AddDomOD))
    
with open('Number_of_pvalues17_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list17co_AddDomOD))
    
with open('Number_of_pvalues18_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(list18co_AddDomOD))
    
with open('Number_of_pvalues19_AddDomOD', 'a') as out_pvalue3:
    out_pvalue3.write(str(No_pvalues_AddDomOD))









with open('Number_of_pvalues1_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list1co_AddDomODHet))

with open('Number_of_pvalues2_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list2co_AddDomODHet))
    
with open('Number_of_pvalues3_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list3co_AddDomODHet))
    
with open('Number_of_pvalues4_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list4co_AddDomODHet))
    
with open('Number_of_pvalues5_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list5co_AddDomODHet))
    
with open('Number_of_pvalues6_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list6co_AddDomODHet))
    
with open('Number_of_pvalues7_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list7co_AddDomODHet))
    
with open('Number_of_pvalues8_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list8co_AddDomODHet))

with open('Number_of_pvalues9_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list9co_AddDomODHet))
    
with open('Number_of_pvalues10_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list10co_AddDomODHet))
    
with open('Number_of_pvalues11_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list11co_AddDomODHet))
    
with open('Number_of_pvalues12_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list12co_AddDomODHet))
    
with open('Number_of_pvalues13_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list13co_AddDomODHet))
    
with open('Number_of_pvalues14_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list14co_AddDomODHet))
    
with open('Number_of_pvalues15_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list15co_AddDomODHet))
    
with open('Number_of_pvalues16_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list16co_AddDomODHet))
    
with open('Number_of_pvalues17_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list17co_AddDomODHet))
    
with open('Number_of_pvalues18_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(list18co_AddDomODHet))
    
with open('Number_of_pvalues19_AddDomODHet', 'a') as out_pvalue4:
    out_pvalue4.write(str(No_pvalues_AddDomODHet))




    






file = pathlib.Path("Number_of_pvalues1_Add")
if file.exists ():
    with open("Number_of_pvalues1_Add", "r") as out_pvalue1A:
        last_line = out_pvalue1A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2_Add")
if file.exists ():
    with open("Number_of_pvalues2_Add", "r") as out_pvalue2A:
        last_line = out_pvalue2A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3_Add")
if file.exists ():
    with open("Number_of_pvalues3_Add", "r") as out_pvalue3A:
        last_line = out_pvalue3A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4_Add")
if file.exists ():
    with open("Number_of_pvalues4_Add", "r") as out_pvalue4A:
        last_line = out_pvalue4A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5_Add")
if file.exists ():
    with open("Number_of_pvalues5_Add", "r") as out_pvalue5A:
        last_line = out_pvalue5A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6_Add")
if file.exists ():
    with open("Number_of_pvalues6_Add", "r") as out_pvalue6A:
        last_line = out_pvalue6A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7_Add")
if file.exists ():
    with open("Number_of_pvalues7_Add", "r") as out_pvalue7A:
        last_line = out_pvalue7A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8_Add")
if file.exists ():
    with open("Number_of_pvalues8_Add", "r") as out_pvalue8A:
        last_line = out_pvalue8A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues9_Add")
if file.exists ():
    with open("Number_of_pvalues9_Add", "r") as out_pvalue9A:
        last_line = out_pvalue9A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10_Add")
if file.exists ():
    with open("Number_of_pvalues10_Add", "r") as out_pvalue10A:
        last_line = out_pvalue10A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11_Add")
if file.exists ():
    with open("Number_of_pvalues11_Add", "r") as out_pvalue11A:
        last_line = out_pvalue11A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12_Add")
if file.exists ():
    with open("Number_of_pvalues12_Add", "r") as out_pvalue12A:
        last_line = out_pvalue12A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13_Add")
if file.exists ():
    with open("Number_of_pvalues13_Add", "r") as out_pvalue13A:
        last_line = out_pvalue13A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14_Add")
if file.exists ():
    with open("Number_of_pvalues14_Add", "r") as out_pvalue14A:
        last_line = out_pvalue14A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15_Add")
if file.exists ():
    with open("Number_of_pvalues15_Add", "r") as out_pvalue15A:
        last_line = out_pvalue15A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16_Add")
if file.exists ():
    with open("Number_of_pvalues16_Add", "r") as out_pvalue16A:
        last_line = out_pvalue16A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17_Add")
if file.exists ():
    with open("Number_of_pvalues17_Add", "r") as out_pvalue17A:
        last_line = out_pvalue17A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18_Add")
if file.exists ():
    with open("Number_of_pvalues18_Add", "r") as out_pvalue18A:
        last_line = out_pvalue18A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19_Add")
if file.exists ():
    with open("Number_of_pvalues19_Add", "r") as out_pvalue19A:
        last_line = out_pvalue19A.readlines()[-1]
    with open('Number_of_pvalues_Add', 'a') as out_pvalueB:
        out_pvalueB.write(str(last_line) + "\n")










file = pathlib.Path("Number_of_pvalues1_AddDom")
if file.exists ():
    with open("Number_of_pvalues1_AddDom", "r") as out_pvalue1D:
        last_line = out_pvalue1D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2_AddDom")
if file.exists ():
    with open("Number_of_pvalues2_AddDom", "r") as out_pvalue2D:
        last_line = out_pvalue2D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3_AddDom")
if file.exists ():
    with open("Number_of_pvalues3_AddDom", "r") as out_pvalue3D:
        last_line = out_pvalue3D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4_AddDom")
if file.exists ():
    with open("Number_of_pvalues4_AddDom", "r") as out_pvalue4D:
        last_line = out_pvalue4D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5_AddDom")
if file.exists ():
    with open("Number_of_pvalues5_AddDom", "r") as out_pvalue5D:
        last_line = out_pvalue5D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6_AddDom")
if file.exists ():
    with open("Number_of_pvalues6_AddDom", "r") as out_pvalue6D:
        last_line = out_pvalue6D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7_AddDom")
if file.exists ():
    with open("Number_of_pvalues7_AddDom", "r") as out_pvalue7D:
        last_line = out_pvalue7D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8_AddDom")
if file.exists ():
    with open("Number_of_pvalues8_AddDom", "r") as out_pvalue8D:
        last_line = out_pvalue8D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues9_AddDom")
if file.exists ():
    with open("Number_of_pvalues9_AddDom", "r") as out_pvalue9D:
        last_line = out_pvalue9D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10_AddDom")
if file.exists ():
    with open("Number_of_pvalues10_AddDom", "r") as out_pvalue10D:
        last_line = out_pvalue10D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11_AddDom")
if file.exists ():
    with open("Number_of_pvalues11_AddDom", "r") as out_pvalue11D:
        last_line = out_pvalue11D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12_AddDom")
if file.exists ():
    with open("Number_of_pvalues12_AddDom", "r") as out_pvalue12D:
        last_line = out_pvalue12D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13_AddDom")
if file.exists ():
    with open("Number_of_pvalues13_AddDom", "r") as out_pvalue13D:
        last_line = out_pvalue13D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14_AddDom")
if file.exists ():
    with open("Number_of_pvalues14_AddDom", "r") as out_pvalue14D:
        last_line = out_pvalue14D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15_AddDom")
if file.exists ():
    with open("Number_of_pvalues15_AddDom", "r") as out_pvalue15D:
        last_line = out_pvalue15D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16_AddDom")
if file.exists ():
    with open("Number_of_pvalues16_AddDom", "r") as out_pvalue16D:
        last_line = out_pvalue16D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17_AddDom")
if file.exists ():
    with open("Number_of_pvalues17_AddDom", "r") as out_pvalue17D:
        last_line = out_pvalue17D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18_AddDom")
if file.exists ():
    with open("Number_of_pvalues18_AddDom", "r") as out_pvalue18D:
        last_line = out_pvalue18D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19_AddDom")
if file.exists ():
    with open("Number_of_pvalues19_AddDom", "r") as out_pvalue19D:
        last_line = out_pvalue19D.readlines()[-1]
    with open('Number_of_pvalues_AddDom', 'a') as out_pvalueC:
        out_pvalueC.write(str(last_line) + "\n")












file = pathlib.Path("Number_of_pvalues1_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues1_AddDomOD", "r") as out_pvalue1E:
        last_line = out_pvalue1E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues2_AddDomOD", "r") as out_pvalue2E:
        last_line = out_pvalue2E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues3_AddDomOD", "r") as out_pvalue3E:
        last_line = out_pvalue3E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues4_AddDomOD", "r") as out_pvalue4E:
        last_line = out_pvalue4E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues5_AddDomOD", "r") as out_pvalue5E:
        last_line = out_pvalue5E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues6_AddDomOD", "r") as out_pvalue6E:
        last_line = out_pvalue6E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues7_AddDomOD", "r") as out_pvalue7E:
        last_line = out_pvalue7E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues8_AddDomOD", "r") as out_pvalue8E:
        last_line = out_pvalue8E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues9_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues9_AddDomOD", "r") as out_pvalue9E:
        last_line = out_pvalue9E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues10_AddDomOD", "r") as out_pvalue10E:
        last_line = out_pvalue10E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues11_AddDomOD", "r") as out_pvalue11E:
        last_line = out_pvalue11E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues12_AddDomOD", "r") as out_pvalue12E:
        last_line = out_pvalue12E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues13_AddDomOD", "r") as out_pvalue13E:
        last_line = out_pvalue13E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues14_AddDomOD", "r") as out_pvalue14E:
        last_line = out_pvalue14E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues15_AddDomOD", "r") as out_pvalue15E:
        last_line = out_pvalue15E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues16_AddDomOD", "r") as out_pvalue16E:
        last_line = out_pvalue16E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues17_AddDomOD", "r") as out_pvalue17E:
        last_line = out_pvalue17E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues18_AddDomOD", "r") as out_pvalue18E:
        last_line = out_pvalue18E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19_AddDomOD")
if file.exists ():
    with open("Number_of_pvalues19_AddDomOD", "r") as out_pvalue19E:
        last_line = out_pvalue19E.readlines()[-1]
    with open('Number_of_pvalues_AddDomOD', 'a') as out_pvalueF:
        out_pvalueF.write(str(last_line) + "\n")













file = pathlib.Path("Number_of_pvalues1_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues1_AddDomODHet", "r") as out_pvalue1G:
        last_line = out_pvalue1G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues2_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues2_AddDomODHet", "r") as out_pvalue2G:
        last_line = out_pvalue2G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues3_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues3_AddDomODHet", "r") as out_pvalue3G:
        last_line = out_pvalue3G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues4_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues4_AddDomODHet", "r") as out_pvalue4G:
        last_line = out_pvalue4G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues5_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues5_AddDomODHet", "r") as out_pvalue5G:
        last_line = out_pvalue5G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues6_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues6_AddDomODHet", "r") as out_pvalue6G:
        last_line = out_pvalue6G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues7_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues7_AddDomODHet", "r") as out_pvalue7G:
        last_line = out_pvalue7G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")
    
file = pathlib.Path("Number_of_pvalues8_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues8_AddDomODHet", "r") as out_pvalue8G:
        last_line = out_pvalue8G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues9_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues9_AddDomODHet", "r") as out_pvalue9G:
        last_line = out_pvalue9G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues10_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues10_AddDomODHet", "r") as out_pvalue10G:
        last_line = out_pvalue10G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues11_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues11_AddDomODHet", "r") as out_pvalue11G:
        last_line = out_pvalue11G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues12_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues12_AddDomODHet", "r") as out_pvalue12G:
        last_line = out_pvalue12G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues13_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues13_AddDomODHet", "r") as out_pvalue13G:
        last_line = out_pvalue13G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues14_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues14_AddDomODHet", "r") as out_pvalue14G:
        last_line = out_pvalue14G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues15_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues15_AddDomODHet", "r") as out_pvalue15G:
        last_line = out_pvalue15G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues16_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues16_AddDomODHet", "r") as out_pvalue16G:
        last_line = out_pvalue16G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues17_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues17_AddDomODHet", "r") as out_pvalue17G:
        last_line = out_pvalue17G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues18_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues18_AddDomODHet", "r") as out_pvalue18G:
        last_line = out_pvalue18G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")

file = pathlib.Path("Number_of_pvalues19_AddDomODHet")
if file.exists ():
    with open("Number_of_pvalues19_AddDomODHet", "r") as out_pvalue19G:
        last_line = out_pvalue19G.readlines()[-1]
    with open('Number_of_pvalues_AddDomODHet', 'a') as out_pvalueH:
        out_pvalueH.write(str(last_line) + "\n")













with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        command = "awk '{print $1,$2,$6}' MAIN_AD.fam > Phenotype"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())




with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles...Add. scenario"...')
            command = "./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list1_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list2_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list3_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list4_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list5_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list6_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list7_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list8_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list9_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list10_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list11_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list12_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list13_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list14_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list15_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list16_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list17_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list18_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list19_Add --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E_Add"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model...Add. scenario"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1_Add; ./emmax-kin -v -d 10 SUBSET_E2_Add; ./emmax-kin -v -d 10 SUBSET_E3_Add; ./emmax-kin -v -d 10 SUBSET_E4_Add; ./emmax-kin -v -d 10 SUBSET_E5_Add; ./emmax-kin -v -d 10 SUBSET_E6_Add; ./emmax-kin -v -d 10 SUBSET_E7_Add; ./emmax-kin -v -d 10 SUBSET_E8_Add; ./emmax-kin -v -d 10 SUBSET_E9_Add; ./emmax-kin -v -d 10 SUBSET_E10_Add; ./emmax-kin -v -d 10 SUBSET_E11_Add; ./emmax-kin -v -d 10 SUBSET_E12_Add; ./emmax-kin -v -d 10 SUBSET_E13_Add; ./emmax-kin -v -d 10 SUBSET_E14_Add; ./emmax-kin -v -d 10 SUBSET_E15_Add; ./emmax-kin -v -d 10 SUBSET_E16_Add; ./emmax-kin -v -d 10 SUBSET_E17_Add; ./emmax-kin -v -d 10 SUBSET_E18_Add; ./emmax-kin -v -d 10 MAIN_E_Add"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())










CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1_Add.ps")
             
with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E1_Add -p Phenotype -k SUBSET_E1_Add.BN.kinf -c Covar_emmax -o SUBSET_E1_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E1_Add -p Phenotype -k SUBSET_E1_Add.BN.kinf -o SUBSET_E1_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E2_Add -p Phenotype -k SUBSET_E2_Add.BN.kinf -c Covar_emmax -o SUBSET_E2_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E2_Add -p Phenotype -k SUBSET_E2_Add.BN.kinf -o SUBSET_E2_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E3_Add -p Phenotype -k SUBSET_E3_Add.BN.kinf -c Covar_emmax -o SUBSET_E3_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E3_Add -p Phenotype -k SUBSET_E3_Add.BN.kinf -o SUBSET_E3_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E4_Add -p Phenotype -k SUBSET_E4_Add.BN.kinf -c Covar_emmax -o SUBSET_E4_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E4_Add -p Phenotype -k SUBSET_E4_Add.BN.kinf -o SUBSET_E4_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E5_Add -p Phenotype -k SUBSET_E5_Add.BN.kinf -c Covar_emmax -o SUBSET_E5_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E5_Add -p Phenotype -k SUBSET_E5_Add.BN.kinf -o SUBSET_E5_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E6_Add -p Phenotype -k SUBSET_E6_Add.BN.kinf -c Covar_emmax -o SUBSET_E6_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E6_Add -p Phenotype -k SUBSET_E6_Add.BN.kinf -o SUBSET_E6_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E7_Add -p Phenotype -k SUBSET_E7_Add.BN.kinf -c Covar_emmax -o SUBSET_E7_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E7_Add -p Phenotype -k SUBSET_E7_Add.BN.kinf -o SUBSET_E7_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E8_Add -p Phenotype -k SUBSET_E8_Add.BN.kinf -c Covar_emmax -o SUBSET_E8_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E8_Add -p Phenotype -k SUBSET_E8_Add.BN.kinf -o SUBSET_E8_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E9_Add -p Phenotype -k SUBSET_E9_Add.BN.kinf -c Covar_emmax -o SUBSET_E9_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E9_Add -p Phenotype -k SUBSET_E9_Add.BN.kinf -o SUBSET_E9_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E10_Add -p Phenotype -k SUBSET_E10_Add.BN.kinf -c Covar_emmax -o SUBSET_E10_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E10_Add -p Phenotype -k SUBSET_E10_Add.BN.kinf -o SUBSET_E10_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E11_Add -p Phenotype -k SUBSET_E11_Add.BN.kinf -c Covar_emmax -o SUBSET_E11_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E11_Add -p Phenotype -k SUBSET_E11_Add.BN.kinf -o SUBSET_E11_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E12_Add -p Phenotype -k SUBSET_E12_Add.BN.kinf -c Covar_emmax -o SUBSET_E12_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E12_Add -p Phenotype -k SUBSET_E12_Add.BN.kinf -o SUBSET_E12_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E13_Add -p Phenotype -k SUBSET_E13_Add.BN.kinf -c Covar_emmax -o SUBSET_E13_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E13_Add -p Phenotype -k SUBSET_E13_Add.BN.kinf -o SUBSET_E13_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E14_Add -p Phenotype -k SUBSET_E14_Add.BN.kinf -c Covar_emmax -o SUBSET_E14_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E14_Add -p Phenotype -k SUBSET_E14_Add.BN.kinf -o SUBSET_E14_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E15_Add -p Phenotype -k SUBSET_E15_Add.BN.kinf -c Covar_emmax -o SUBSET_E15_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E15_Add -p Phenotype -k SUBSET_E15_Add.BN.kinf -o SUBSET_E15_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E16_Add -p Phenotype -k SUBSET_E16_Add.BN.kinf -c Covar_emmax -o SUBSET_E16_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E16_Add -p Phenotype -k SUBSET_E16_Add.BN.kinf -o SUBSET_E16_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E17_Add -p Phenotype -k SUBSET_E17_Add.BN.kinf -c Covar_emmax -o SUBSET_E17_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E17_Add -p Phenotype -k SUBSET_E17_Add.BN.kinf -o SUBSET_E17_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E18_Add -p Phenotype -k SUBSET_E18_Add.BN.kinf -c Covar_emmax -o SUBSET_E18_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E18_Add -p Phenotype -k SUBSET_E18_Add.BN.kinf -o SUBSET_E18_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E_Add.ps")

with open("Prog1_select_act.txt", "a+") as ActA_Add:
    ActA_Add.seek(0) # set position to start of file
    lineA = ActA_Add.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...Add. scenario"...')
                command = "./emmax -v -d 10 -t MAIN_E_Add -p Phenotype -k MAIN_E_Add.BN.kinf -c Covar_emmax -o MAIN_E_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...Add. scenario"...')
                command = "./emmax -v -d 10 -t MAIN_E_Add -p Phenotype -k MAIN_E_Add.BN.kinf -o MAIN_E_Add"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles...AddDom. scenario"...')
            command = "./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list1_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list2_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list3_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list4_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list5_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list6_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list7_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list8_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list9_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list10_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list11_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list12_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list13_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list14_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list15_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list16_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list17_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list18_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list19_AddDom --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E_AddDom"
                                  
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model...AddDom. scenario"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1_AddDom; ./emmax-kin -v -d 10 SUBSET_E2_AddDom; ./emmax-kin -v -d 10 SUBSET_E3_AddDom; ./emmax-kin -v -d 10 SUBSET_E4_AddDom; ./emmax-kin -v -d 10 SUBSET_E5_AddDom; ./emmax-kin -v -d 10 SUBSET_E6_AddDom; ./emmax-kin -v -d 10 SUBSET_E7_AddDom; ./emmax-kin -v -d 10 SUBSET_E8_AddDom; ./emmax-kin -v -d 10 SUBSET_E9_AddDom; ./emmax-kin -v -d 10 SUBSET_E10_AddDom; ./emmax-kin -v -d 10 SUBSET_E11_AddDom; ./emmax-kin -v -d 10 SUBSET_E12_AddDom; ./emmax-kin -v -d 10 SUBSET_E13_AddDom; ./emmax-kin -v -d 10 SUBSET_E14_AddDom; ./emmax-kin -v -d 10 SUBSET_E15_AddDom; ./emmax-kin -v -d 10 SUBSET_E16_AddDom; ./emmax-kin -v -d 10 SUBSET_E17_AddDom; ./emmax-kin -v -d 10 SUBSET_E18_AddDom; ./emmax-kin -v -d 10 MAIN_E_AddDom"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())












CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E1_AddDom -p Phenotype -k SUBSET_E1_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E1_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E1_AddDom -p Phenotype -k SUBSET_E1_AddDom.BN.kinf -o SUBSET_E1_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E2_AddDom -p Phenotype -k SUBSET_E2_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E2_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E2_AddDom -p Phenotype -k SUBSET_E2_AddDom.BN.kinf -o SUBSET_E2_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E3_AddDom -p Phenotype -k SUBSET_E3_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E3_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E3_AddDom -p Phenotype -k SUBSET_E3_AddDom.BN.kinf -o SUBSET_E3_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E4_AddDom -p Phenotype -k SUBSET_E4_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E4_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E4_AddDom -p Phenotype -k SUBSET_E4_AddDom.BN.kinf -o SUBSET_E4_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E5_AddDom -p Phenotype -k SUBSET_E5_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E5_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E5_AddDom -p Phenotype -k SUBSET_E5_AddDom.BN.kinf -o SUBSET_E5_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E6_AddDom -p Phenotype -k SUBSET_E6_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E6_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E6_AddDom -p Phenotype -k SUBSET_E6_AddDom.BN.kinf -o SUBSET_E6_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E7_AddDom -p Phenotype -k SUBSET_E7_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E7_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E7_AddDom -p Phenotype -k SUBSET_E7_AddDom.BN.kinf -o SUBSET_E7_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E8_AddDom -p Phenotype -k SUBSET_E8_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E8_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E8_AddDom -p Phenotype -k SUBSET_E8_AddDom.BN.kinf -o SUBSET_E8_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E9_AddDom -p Phenotype -k SUBSET_E9_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E9_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E9_AddDom -p Phenotype -k SUBSET_E9_AddDom.BN.kinf -o SUBSET_E9_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E10_AddDom -p Phenotype -k SUBSET_E10_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E10_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E10_AddDom -p Phenotype -k SUBSET_E10_AddDom.BN.kinf -o SUBSET_E10_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E11_AddDom -p Phenotype -k SUBSET_E11_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E11_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E11_AddDom -p Phenotype -k SUBSET_E11_AddDom.BN.kinf -o SUBSET_E11_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E12_AddDom -p Phenotype -k SUBSET_E12_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E12_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E12_AddDom -p Phenotype -k SUBSET_E12_AddDom.BN.kinf -o SUBSET_E12_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E13_AddDom -p Phenotype -k SUBSET_E13_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E13_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E13_AddDom -p Phenotype -k SUBSET_E13_AddDom.BN.kinf -o SUBSET_E13_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E14_AddDom -p Phenotype -k SUBSET_E14_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E14_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E14_AddDom -p Phenotype -k SUBSET_E14_AddDom.BN.kinf -o SUBSET_E14_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E15_AddDom -p Phenotype -k SUBSET_E15_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E15_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E15_AddDom -p Phenotype -k SUBSET_E15_AddDom.BN.kinf -o SUBSET_E15_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E16_AddDom -p Phenotype -k SUBSET_E16_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E16_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E16_AddDom -p Phenotype -k SUBSET_E16_AddDom.BN.kinf -o SUBSET_E16_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E17_AddDom -p Phenotype -k SUBSET_E17_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E17_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E17_AddDom -p Phenotype -k SUBSET_E17_AddDom.BN.kinf -o SUBSET_E17_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E18_AddDom -p Phenotype -k SUBSET_E18_AddDom.BN.kinf -c Covar_emmax -o SUBSET_E18_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E18_AddDom -p Phenotype -k SUBSET_E18_AddDom.BN.kinf -o SUBSET_E18_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E_AddDom.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDom:
    ActA_AddDom.seek(0) # set position to start of file
    lineA = ActA_AddDom.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t MAIN_E_AddDom -p Phenotype -k MAIN_E_AddDom.BN.kinf -c Covar_emmax -o MAIN_E_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDom. scenario"...')
                command = "./emmax -v -d 10 -t MAIN_E_AddDom -p Phenotype -k MAIN_E_AddDom.BN.kinf -o MAIN_E_AddDom"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles...AddDomOD. scenario"...')
            command = "./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomOD --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E_AddDomOD"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model...AddDomOD. scenario"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E2_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E3_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E4_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E5_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E6_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E7_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E8_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E9_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E10_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E11_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E12_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E13_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E14_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E15_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E16_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E17_AddDomOD; ./emmax-kin -v -d 10 SUBSET_E18_AddDomOD; ./emmax-kin -v -d 10 MAIN_E_AddDomOD"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())











CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E1_AddDomOD -p Phenotype -k SUBSET_E1_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E1_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E1_AddDomOD -p Phenotype -k SUBSET_E1_AddDomOD.BN.kinf -o SUBSET_E1_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E2_AddDomOD -p Phenotype -k SUBSET_E2_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E2_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E2_AddDomOD -p Phenotype -k SUBSET_E2_AddDomOD.BN.kinf -o SUBSET_E2_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E3_AddDomOD -p Phenotype -k SUBSET_E3_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E3_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E3_AddDomOD -p Phenotype -k SUBSET_E3_AddDomOD.BN.kinf -o SUBSET_E3_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E4_AddDomOD -p Phenotype -k SUBSET_E4_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E4_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E4_AddDomOD -p Phenotype -k SUBSET_E4_AddDomOD.BN.kinf -o SUBSET_E4_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E5_AddDomOD -p Phenotype -k SUBSET_E5_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E5_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E5_AddDomOD -p Phenotype -k SUBSET_E5_AddDomOD.BN.kinf -o SUBSET_E5_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E6_AddDomOD -p Phenotype -k SUBSET_E6_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E6_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E6_AddDomOD -p Phenotype -k SUBSET_E6_AddDomOD.BN.kinf -o SUBSET_E6_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E7_AddDomOD -p Phenotype -k SUBSET_E7_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E7_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E7_AddDomOD -p Phenotype -k SUBSET_E7_AddDomOD.BN.kinf -o SUBSET_E7_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E8_AddDomOD -p Phenotype -k SUBSET_E8_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E8_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E8_AddDomOD -p Phenotype -k SUBSET_E8_AddDomOD.BN.kinf -o SUBSET_E8_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E9_AddDomOD -p Phenotype -k SUBSET_E9_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E9_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E9_AddDomOD -p Phenotype -k SUBSET_E9_AddDomOD.BN.kinf -o SUBSET_E9_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E10_AddDomOD -p Phenotype -k SUBSET_E10_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E10_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E10_AddDomOD -p Phenotype -k SUBSET_E10_AddDomOD.BN.kinf -o SUBSET_E10_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E11_AddDomOD -p Phenotype -k SUBSET_E11_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E11_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E11_AddDomOD -p Phenotype -k SUBSET_E11_AddDomOD.BN.kinf -o SUBSET_E11_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E12_AddDomOD -p Phenotype -k SUBSET_E12_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E12_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E12_AddDomOD -p Phenotype -k SUBSET_E12_AddDomOD.BN.kinf -o SUBSET_E12_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E13_AddDomOD -p Phenotype -k SUBSET_E13_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E13_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E13_AddDomOD -p Phenotype -k SUBSET_E13_AddDomOD.BN.kinf -o SUBSET_E13_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E14_AddDomOD -p Phenotype -k SUBSET_E14_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E14_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E14_AddDomOD -p Phenotype -k SUBSET_E14_AddDomOD.BN.kinf -o SUBSET_E14_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E15_AddDomOD -p Phenotype -k SUBSET_E15_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E15_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E15_AddDomOD -p Phenotype -k SUBSET_E15_AddDomOD.BN.kinf -o SUBSET_E15_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E16_AddDomOD -p Phenotype -k SUBSET_E16_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E16_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E16_AddDomOD -p Phenotype -k SUBSET_E16_AddDomOD.BN.kinf -o SUBSET_E16_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E17_AddDomOD -p Phenotype -k SUBSET_E17_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E17_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E17_AddDomOD -p Phenotype -k SUBSET_E17_AddDomOD.BN.kinf -o SUBSET_E17_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E18_AddDomOD -p Phenotype -k SUBSET_E18_AddDomOD.BN.kinf -c Covar_emmax -o SUBSET_E18_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E18_AddDomOD -p Phenotype -k SUBSET_E18_AddDomOD.BN.kinf -o SUBSET_E18_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E_AddDomOD.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t MAIN_E_AddDomOD -p Phenotype -k MAIN_E_AddDomOD.BN.kinf -c Covar_emmax -o MAIN_E_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomOD. scenario"...')
                command = "./emmax -v -d 10 -t MAIN_E_AddDomOD -p Phenotype -k MAIN_E_AddDomOD.BN.kinf -o MAIN_E_AddDomOD"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())








with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing tfiles...AddDomODHet. scenario"...')
            command = "./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E1_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E2_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E3_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E4_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E5_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E6_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E7_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E8_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E9_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E10_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E11_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E12_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E13_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E14_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E15_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E16_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E17_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out SUBSET_E18_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomODHet --recode12 --output-missing-genotype 0 --transpose --set-missing-var-ids @:# --out MAIN_E_AddDomODHet"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            print(' "Preparing kinship matrices for Emmax_model...AddDomODHet. scenario"...')
            command = "./emmax-kin -v -d 10 SUBSET_E1_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E2_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E3_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E4_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E5_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E6_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E7_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E8_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E9_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E10_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E11_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E12_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E13_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E14_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E15_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E16_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E17_AddDomODHet; ./emmax-kin -v -d 10 SUBSET_E18_AddDomODHet; ./emmax-kin -v -d 10 MAIN_E_AddDomODHet"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())









CHECK_TESTOUTPUT1 = pathlib.Path("SUBSET_E1_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E1_AddDomODHet -p Phenotype -k SUBSET_E1_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E1_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E1_AddDomODHet -p Phenotype -k SUBSET_E1_AddDomODHet.BN.kinf -o SUBSET_E1_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT1.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

                






CHECK_TESTOUTPUT2 = pathlib.Path("SUBSET_E2_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E2_AddDomODHet -p Phenotype -k SUBSET_E2_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E2_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E2_AddDomODHet -p Phenotype -k SUBSET_E2_AddDomODHet.BN.kinf -o SUBSET_E2_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT2.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT3 = pathlib.Path("SUBSET_E3_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E3_AddDomODHet -p Phenotype -k SUBSET_E3_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E3_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E3_AddDomODHet -p Phenotype -k SUBSET_E3_AddDomODHet.BN.kinf -o SUBSET_E3_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT3.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())







CHECK_TESTOUTPUT4 = pathlib.Path("SUBSET_E4_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E4_AddDomODHet -p Phenotype -k SUBSET_E4_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E4_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E4_AddDomODHet -p Phenotype -k SUBSET_E4_AddDomODHet.BN.kinf -o SUBSET_E4_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT4.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT5 = pathlib.Path("SUBSET_E5_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E5_AddDomODHet -p Phenotype -k SUBSET_E5_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E5_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E5_AddDomODHet -p Phenotype -k SUBSET_E5_AddDomODHet.BN.kinf -o SUBSET_E5_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT5.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT6 = pathlib.Path("SUBSET_E6_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E6_AddDomODHet -p Phenotype -k SUBSET_E6_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E6_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E6_AddDomODHet -p Phenotype -k SUBSET_E6_AddDomODHet.BN.kinf -o SUBSET_E6_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT6.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT7 = pathlib.Path("SUBSET_E7_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E7_AddDomODHet -p Phenotype -k SUBSET_E7_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E7_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E7_AddDomODHet -p Phenotype -k SUBSET_E7_AddDomODHet.BN.kinf -o SUBSET_E7_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT7.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT8 = pathlib.Path("SUBSET_E8_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E8_AddDomODHet -p Phenotype -k SUBSET_E8_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E8_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E8_AddDomODHet -p Phenotype -k SUBSET_E8_AddDomODHet.BN.kinf -o SUBSET_E8_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT8.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

















CHECK_TESTOUTPUT9 = pathlib.Path("SUBSET_E9_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E9_AddDomODHet -p Phenotype -k SUBSET_E9_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E9_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E9_AddDomODHet -p Phenotype -k SUBSET_E9_AddDomODHet.BN.kinf -o SUBSET_E9_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT9.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT10 = pathlib.Path("SUBSET_E10_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E10_AddDomODHet -p Phenotype -k SUBSET_E10_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E10_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E10_AddDomODHet -p Phenotype -k SUBSET_E10_AddDomODHet.BN.kinf -o SUBSET_E10_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT10.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())














CHECK_TESTOUTPUT11 = pathlib.Path("SUBSET_E11_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E11_AddDomODHet -p Phenotype -k SUBSET_E11_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E11_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E11_AddDomODHet -p Phenotype -k SUBSET_E11_AddDomODHet.BN.kinf -o SUBSET_E11_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT11.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())










CHECK_TESTOUTPUT12 = pathlib.Path("SUBSET_E12_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E12_AddDomODHet -p Phenotype -k SUBSET_E12_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E12_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E12_AddDomODHet -p Phenotype -k SUBSET_E12_AddDomODHet.BN.kinf -o SUBSET_E12_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT12.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT13 = pathlib.Path("SUBSET_E13_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E13_AddDomODHet -p Phenotype -k SUBSET_E13_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E13_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E13_AddDomODHet -p Phenotype -k SUBSET_E13_AddDomODHet.BN.kinf -o SUBSET_E13_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT13.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())


















CHECK_TESTOUTPUT14 = pathlib.Path("SUBSET_E14_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E14_AddDomODHet -p Phenotype -k SUBSET_E14_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E14_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E14_AddDomODHet -p Phenotype -k SUBSET_E14_AddDomODHet.BN.kinf -o SUBSET_E14_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT14.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT15 = pathlib.Path("SUBSET_E15_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E15_AddDomODHet -p Phenotype -k SUBSET_E15_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E15_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E15_AddDomODHet -p Phenotype -k SUBSET_E15_AddDomODHet.BN.kinf -o SUBSET_E15_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT15.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
















CHECK_TESTOUTPUT16 = pathlib.Path("SUBSET_E16_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E16_AddDomODHet -p Phenotype -k SUBSET_E16_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E16_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E16_AddDomODHet -p Phenotype -k SUBSET_E16_AddDomODHet.BN.kinf -o SUBSET_E16_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT16.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT17 = pathlib.Path("SUBSET_E17_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E17_AddDomODHet -p Phenotype -k SUBSET_E17_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E17_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E17_AddDomODHet -p Phenotype -k SUBSET_E17_AddDomODHet.BN.kinf -o SUBSET_E17_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT17.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())












CHECK_TESTOUTPUT18 = pathlib.Path("SUBSET_E18_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E18_AddDomODHet -p Phenotype -k SUBSET_E18_AddDomODHet.BN.kinf -c Covar_emmax -o SUBSET_E18_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t SUBSET_E18_AddDomODHet -p Phenotype -k SUBSET_E18_AddDomODHet.BN.kinf -o SUBSET_E18_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT18.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())















CHECK_TESTOUTPUT19 = pathlib.Path("MAIN_E_AddDomODHet.ps")

with open("Prog1_select_act.txt", "a+") as ActA_AddDomODHet:
    ActA_AddDomODHet.seek(0) # set position to start of file
    lineA = ActA_AddDomODHet.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            if fileCovar_emmax.exists ():
                print(' "Heritability profiling by Emmax_model...covariates included...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t MAIN_E_AddDomODHet -p Phenotype -k MAIN_E_AddDomODHet.BN.kinf -c Covar_emmax -o MAIN_E_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
            

            else:
                print(' "Heritability profiling by Emmax_model...without covariates...AddDomODHet. scenario"...')
                command = "./emmax -v -d 10 -t MAIN_E_AddDomODHet -p Phenotype -k MAIN_E_AddDomODHet.BN.kinf -o MAIN_E_AddDomODHet"
                p = subprocess.Popen(command, shell=True, preexec_fn=os.setsid) # add stderr=subprocess.PIPE) to merge output & error
                try:
                    p.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=60)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=120)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=240)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=300)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=600)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1200)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=1800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2400)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=2800)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())

                try:
                    p.wait(timeout=3000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=4000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=5000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=6000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=7000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=8000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=9000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=10000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=12000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=14000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=16000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=18000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=20000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=220000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=24000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=26000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=28000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=30000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=32000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=34000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=36000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=38000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())
                try:
                    p.wait(timeout=40000)
                except subprocess.TimeoutExpired:
                    if CHECK_TESTOUTPUT19.exists ():
                        p.kill() # or p.terminate()
                        print(ret.stdout.decode())




                                        





        
if Prog2.exists () or Prog3.exists () or Prog4.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles...Add. scenario"...')
                command = "./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list1_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list2_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list3_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list4_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list5_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list6_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list7_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list8_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list9_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list10_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list11_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list12_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list13_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list14_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list15_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list16_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list17_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list18_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list19_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_Add"
        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...Add. scenario"...')
                    command = "./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list1_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list2_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list3_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list4_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list5_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list6_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list7_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list8_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list9_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list10_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list11_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list12_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list13_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list14_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list15_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list16_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list17_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list18_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list19_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_Add"
        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...Add. scenario"...')
                            command = "./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list1_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list2_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list3_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list4_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list5_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list6_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list7_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list8_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list9_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list10_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list11_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list12_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list13_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list14_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list15_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list16_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list17_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list18_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list19_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_Add"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...Add. scenario"...')
                            command = "./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list1_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list2_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list3_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list4_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list5_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list6_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list7_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list8_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list9_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list10_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list11_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list12_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list13_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list14_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list15_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list16_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list17_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list18_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_Add; ./plink --bfile MAIN --allow-extra-chr --chr-set 90 --prune --extract list19_Add --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_Add"
        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())
                                        
    with open("Prog7_select_act.txt", "a+") as ActG_Add:
        ActG_Add.seek(0) # set position to start of file
        lineG = ActG_Add.read().splitlines()
        if valueG in lineG:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            with open("Prog4_select_act.txt", "a+") as ActD_Add:
                                ActD_Add.seek(0) # set position to start of file
                                lineD = ActD_Add.read().splitlines()
                                if valueD in lineD:
                                    print('Done')
                                else:
                                    with open("Prog4_select_act.txt", "a+") as ActD_Add:
                                        ActD_Add.seek(0) # set position to start of file
                                        lineD = ActD_Add.read().splitlines()
                                        if valueDdd in lineD:
                                            print('Done')
                                        else:
                                            print(' "Preparing bfiles...Add. scenario"...')
                                            command = "./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list1_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list2_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list3_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list4_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list5_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list6_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list7_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list8_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list9_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list10_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list11_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list12_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list13_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list14_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list15_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list16_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list17_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list18_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_Add; ./plink --bfile MAIN --prune --allow-extra-chr --chr-set 90 --extract list19_Add  --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_Add"
                                                                                                                                                                                      
                                            ret = subprocess.run(command, capture_output=True, shell=True)
                                            # before Python 3.7:
                                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                                            print(ret.stdout.decode())
                                





 
with open("Prog2_select_act.txt", "a+") as ActB_Add:
    ActB_Add.seek(0) # set position to start of file
    lineB = ActB_Add.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model...')
            command = "./ldak --calc-kins-direct SUBSET_L1_Add --bfile SUBSET_L1_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2_Add --bfile SUBSET_L2_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3_Add --bfile SUBSET_L3_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4_Add --bfile SUBSET_L4_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5_Add --bfile SUBSET_L5_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6_Add --bfile SUBSET_L6_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7_Add --bfile SUBSET_L7_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8_Add --bfile SUBSET_L8_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9_Add --bfile SUBSET_L9_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10_Add --bfile SUBSET_L10_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11_Add --bfile SUBSET_L11_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12_Add --bfile SUBSET_L12_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13_Add --bfile SUBSET_L13_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14_Add --bfile SUBSET_L14_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15_Add --bfile SUBSET_L15_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16_Add --bfile SUBSET_L16_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17_Add --bfile SUBSET_L17_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18_Add --bfile SUBSET_L18_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L_Add --bfile MAIN_L_Add --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
with open("Prog2_select_act.txt", "a+") as ActB_Add:
    ActB_Add.seek(0) # set position to start of file
    lineB = ActB_Add.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included...Add. scenario"...')
                command = "./ldak --reml SUBSET_L1_Add --pheno SUBSET_L1_Add.fam --mpheno 4 --grm SUBSET_L1_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2_Add --pheno SUBSET_L2_Add.fam --mpheno 4 --grm SUBSET_L2_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3_Add --pheno SUBSET_L3_Add.fam --mpheno 4 --grm SUBSET_L3_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4_Add --pheno SUBSET_L4_Add.fam --mpheno 4 --grm SUBSET_L4_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5_Add --pheno SUBSET_L5_Add.fam --mpheno 4 --grm SUBSET_L5_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6_Add --pheno SUBSET_L6_Add.fam --mpheno 4 --grm SUBSET_L6_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7_Add --pheno SUBSET_L7_Add.fam --mpheno 4 --grm SUBSET_L7_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8_Add --pheno SUBSET_L8_Add.fam --mpheno 4 --grm SUBSET_L8_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9_Add --pheno SUBSET_L9_Add.fam --mpheno 4 --grm SUBSET_L9_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10_Add --pheno SUBSET_L10_Add.fam --mpheno 4 --grm SUBSET_L10_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11_Add --pheno SUBSET_L11_Add.fam --mpheno 4 --grm SUBSET_L11_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12_Add --pheno SUBSET_L12_Add.fam --mpheno 4 --grm SUBSET_L12_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13_Add --pheno SUBSET_L13_Add.fam --mpheno 4 --grm SUBSET_L13_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14_Add --pheno SUBSET_L14_Add.fam --mpheno 4 --grm SUBSET_L14_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15_Add --pheno SUBSET_L15_Add.fam --mpheno 4 --grm SUBSET_L15_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16_Add --pheno SUBSET_L16_Add.fam --mpheno 4 --grm SUBSET_L16_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17_Add --pheno SUBSET_L17_Add.fam --mpheno 4 --grm SUBSET_L17_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18_Add --pheno SUBSET_L18_Add.fam --mpheno 4 --grm SUBSET_L18_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L_Add --pheno MAIN_L_Add.fam --mpheno 4 --grm MAIN_L_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                               
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates...Add. scenario"...')
                command = "./ldak --reml SUBSET_L1_Add --pheno SUBSET_L1_Add.fam --mpheno 4 --grm SUBSET_L1_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2_Add --pheno SUBSET_L2_Add.fam --mpheno 4 --grm SUBSET_L2_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3_Add --pheno SUBSET_L3_Add.fam --mpheno 4 --grm SUBSET_L3_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4_Add --pheno SUBSET_L4_Add.fam --mpheno 4 --grm SUBSET_L4_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5_Add --pheno SUBSET_L5_Add.fam --mpheno 4 --grm SUBSET_L5_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6_Add --pheno SUBSET_L6_Add.fam --mpheno 4 --grm SUBSET_L6_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7_Add --pheno SUBSET_L7_Add.fam --mpheno 4 --grm SUBSET_L7_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8_Add --pheno SUBSET_L8_Add.fam --mpheno 4 --grm SUBSET_L8_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9_Add --pheno SUBSET_L9_Add.fam --mpheno 4 --grm SUBSET_L9_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10_Add --pheno SUBSET_L10_Add.fam --mpheno 4 --grm SUBSET_L10_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11_Add --pheno SUBSET_L11_Add.fam --mpheno 4 --grm SUBSET_L11_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12_Add --pheno SUBSET_L12_Add.fam --mpheno 4 --grm SUBSET_L12_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13_Add --pheno SUBSET_L13_Add.fam --mpheno 4 --grm SUBSET_L13_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14_Add --pheno SUBSET_L14_Add.fam --mpheno 4 --grm SUBSET_L14_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15_Add --pheno SUBSET_L15_Add.fam --mpheno 4 --grm SUBSET_L15_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16_Add --pheno SUBSET_L16_Add.fam --mpheno 4 --grm SUBSET_L16_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17_Add --pheno SUBSET_L17_Add.fam --mpheno 4 --grm SUBSET_L17_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18_Add --pheno SUBSET_L18_Add.fam --mpheno 4 --grm SUBSET_L18_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L_Add --pheno MAIN_L_Add.fam --mpheno 4 --grm MAIN_L_Add --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())











if Prog2.exists () or Prog3.exists () or Prog4.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles...AddDom. scenario"...')
                command = "./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list1_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list2_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list3_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list4_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list5_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list6_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list7_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list8_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list9_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list10_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list11_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list12_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list13_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list14_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list15_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list16_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list17_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list18_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list19_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDom"
                        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...AddDom. scenario"...')
                    command = "./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list1_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list2_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list3_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list4_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list5_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list6_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list7_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list8_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list9_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list10_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list11_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list12_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list13_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list14_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list15_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list16_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list17_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list18_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list19_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDom"
                        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...AddDom. scenario"...')
                            command = "./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list1_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list2_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list3_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list4_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list5_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list6_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list7_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list8_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list9_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list10_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list11_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list12_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list13_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list14_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list15_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list16_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list17_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list18_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list19_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDom"
                        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...AddDom. scenario"...')
                            command = "./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list1_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list2_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list3_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list4_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list5_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list6_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list7_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list8_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list9_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list10_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list11_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list12_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list13_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list14_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list15_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list16_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list17_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list18_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDom; ./plink --bfile MAIN_AD --allow-extra-chr --chr-set 90 --prune --extract list19_AddDom --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDom"
                                                                                
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())


    with open("Prog7_select_act.txt", "a+") as ActG_Add:
        ActG_Add.seek(0) # set position to start of file
        lineG = ActG_Add.read().splitlines()
        if valueG in lineG:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            with open("Prog4_select_act.txt", "a+") as ActD_Add:
                                ActD_Add.seek(0) # set position to start of file
                                lineD = ActD_Add.read().splitlines()
                                if valueD in lineD:
                                    print('Done')
                                else:
                                    with open("Prog4_select_act.txt", "a+") as ActD_Add:
                                        ActD_Add.seek(0) # set position to start of file
                                        lineD = ActD_Add.read().splitlines()
                                        if valueDdd in lineD:
                                            print('Done')
                                        else:
                                            print(' "Preparing bfiles....AddDom. scenario"...')
                                            command = "./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list1_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list2_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list3_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list4_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list5_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list6_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list7_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list8_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list9_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list10_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list11_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list12_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list13_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list14_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list15_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list16_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list17_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list18_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDom; ./plink --bfile MAIN_AD --prune --allow-extra-chr --chr-set 90 --extract list19_AddDom  --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDom"
                                                                                                                                                                                                                                  
                                            ret = subprocess.run(command, capture_output=True, shell=True)
                                            # before Python 3.7:
                                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                                            print(ret.stdout.decode())

                            


with open("Prog2_select_act.txt", "a+") as ActB_AddDom:
    ActB_AddDom.seek(0) # set position to start of file
    lineB = ActB_AddDom.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model...AddDom. scenario"...')
            command = "./ldak --calc-kins-direct SUBSET_L1_AddDom --bfile SUBSET_L1_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2_AddDom --bfile SUBSET_L2_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3_AddDom  --bfile SUBSET_L3_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4_AddDom  --bfile SUBSET_L4_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5_AddDom  --bfile SUBSET_L5_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6_AddDom  --bfile SUBSET_L6_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7_AddDom  --bfile SUBSET_L7_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8_AddDom  --bfile SUBSET_L8_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9_AddDom  --bfile SUBSET_L9_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10_AddDom  --bfile SUBSET_L10_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11_AddDom  --bfile SUBSET_L11_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12_AddDom  --bfile SUBSET_L12_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13_AddDom  --bfile SUBSET_L13_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14_AddDom  --bfile SUBSET_L14_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15_AddDom  --bfile SUBSET_L15_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16_AddDom  --bfile SUBSET_L16_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17_AddDom  --bfile SUBSET_L17_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18_AddDom  --bfile SUBSET_L18_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L_AddDom  --bfile MAIN_L_AddDom --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
with open("Prog2_select_act.txt", "a+") as ActB_AddDom:
    ActB_AddDom.seek(0) # set position to start of file
    lineB = ActB_AddDom.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included...AddDom.. scenario"...')
                command = "./ldak --reml SUBSET_L1_AddDom --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm SUBSET_L1_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2_AddDom --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm SUBSET_L2_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3_AddDom --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm SUBSET_L3_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4_AddDom --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm SUBSET_L4_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5_AddDom --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm SUBSET_L5_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6_AddDom --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm SUBSET_L6_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7_AddDom --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm SUBSET_L7_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8_AddDom --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm SUBSET_L8_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9_AddDom --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm SUBSET_L9_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10_AddDom --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm SUBSET_L10_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11_AddDom --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm SUBSET_L11_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12_AddDom --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm SUBSET_L12_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13_AddDom --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm SUBSET_L13_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14_AddDom --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm SUBSET_L14_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15_AddDom --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm SUBSET_L15_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16_AddDom --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm SUBSET_L16_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17_AddDom --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm SUBSET_L17_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18_AddDom --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm SUBSET_L18_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L_AddDom --pheno MAIN_L_AddDom.fam --mpheno 4 --grm MAIN_L_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates...AddDom. scenario"...')
                command = "./ldak --reml SUBSET_L1_AddDom --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm SUBSET_L1_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2_AddDom --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm SUBSET_L2_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3_AddDom --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm SUBSET_L3_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4_AddDom --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm SUBSET_L4_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5_AddDom --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm SUBSET_L5_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6_AddDom --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm SUBSET_L6_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7_AddDom --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm SUBSET_L7_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8_AddDom --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm SUBSET_L8_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9_AddDom --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm SUBSET_L9_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10_AddDom --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm SUBSET_L10_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11_AddDom --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm SUBSET_L11_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12_AddDom --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm SUBSET_L12_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13_AddDom --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm SUBSET_L13_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14_AddDom --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm SUBSET_L14_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15_AddDom --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm SUBSET_L15_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16_AddDom --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm SUBSET_L16_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17_AddDom --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm SUBSET_L17_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18_AddDom --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm SUBSET_L18_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L_AddDom --pheno MAIN_L_AddDom.fam --mpheno 4 --grm MAIN_L_AddDom --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())












if Prog2.exists () or Prog3.exists () or Prog4.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles...AddDomOD. scenario"...')
                command = "./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomOD"
                        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...AddDomOD. scenario"...')
                    command = "./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomOD"
                        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...AddDomOD. scenario"...')
                            command = "./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomOD"
                        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...AddDomOD. scenario"...')
                            command = "./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomOD; ./plink --bfile MAIN_ADO --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomOD --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomOD"
                        
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())


    with open("Prog7_select_act.txt", "a+") as ActG_Add:
        ActG_Add.seek(0) # set position to start of file
        lineG = ActG_Add.read().splitlines()
        if valueG in lineG:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            with open("Prog4_select_act.txt", "a+") as ActD_Add:
                                ActD_Add.seek(0) # set position to start of file
                                lineD = ActD_Add.read().splitlines()
                                if valueD in lineD:
                                    print('Done')
                                else:
                                    with open("Prog4_select_act.txt", "a+") as ActD_Add:
                                        ActD_Add.seek(0) # set position to start of file
                                        lineD = ActD_Add.read().splitlines()
                                        if valueDdd in lineD:
                                            print('Done')
                                        else:
                                            print(' "Preparing bfiles...AddDomOD. scenario"...')
                                            command = "./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list1_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list2_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list3_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list4_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list5_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list6_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list7_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list8_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list9_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list10_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list11_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list12_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list13_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list14_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list15_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list16_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list17_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list18_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomOD; ./plink --bfile MAIN_ADO --prune --allow-extra-chr --chr-set 90 --extract list19_AddDomOD  --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomOD"
                                            ret = subprocess.run(command, capture_output=True, shell=True)
                                            # before Python 3.7:
                                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                                            print(ret.stdout.decode())
                            




        
with open("Prog2_select_act.txt", "a+") as ActB_AddDomOD:
    ActB_AddDomOD.seek(0) # set position to start of file
    lineB = ActB_AddDomOD.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model...AddDomOD. scenario"...')
            command = "./ldak --calc-kins-direct SUBSET_L1_AddDomOD  --bfile SUBSET_L1_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2_AddDomOD  --bfile SUBSET_L2_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3_AddDomOD  --bfile SUBSET_L3_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4_AddDomOD  --bfile SUBSET_L4_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5_AddDomOD  --bfile SUBSET_L5_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6_AddDomOD  --bfile SUBSET_L6_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7_AddDomOD  --bfile SUBSET_L7_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8_AddDomOD  --bfile SUBSET_L8_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9_AddDomOD  --bfile SUBSET_L9_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10_AddDomOD  --bfile SUBSET_L10_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11_AddDomOD  --bfile SUBSET_L11_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12_AddDomOD  --bfile SUBSET_L12_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13_AddDomOD  --bfile SUBSET_L13_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14_AddDomOD  --bfile SUBSET_L14_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15_AddDomOD  --bfile SUBSET_L15_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16_AddDomOD  --bfile SUBSET_L16_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17_AddDomOD  --bfile SUBSET_L17_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18_AddDomOD  --bfile SUBSET_L18_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L_AddDomOD  --bfile MAIN_L_AddDomOD --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
with open("Prog2_select_act.txt", "a+") as ActB_AddDomOD:
    ActB_AddDomOD.seek(0) # set position to start of file
    lineB = ActB_AddDomOD.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included...AddDomOD. scenario"...')
                command = "./ldak --reml SUBSET_L1_AddDomOD --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm SUBSET_L1_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2_AddDomOD --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm SUBSET_L2_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3_AddDomOD --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm SUBSET_L3_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4_AddDomOD --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm SUBSET_L4_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5_AddDomOD --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm SUBSET_L5_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6_AddDomOD --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm SUBSET_L6_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7_AddDomOD --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm SUBSET_L7_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8_AddDomOD --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm SUBSET_L8_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9_AddDomOD --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm SUBSET_L9_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10_AddDomOD --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm SUBSET_L10_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11_AddDomOD --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm SUBSET_L11_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12_AddDomOD --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm SUBSET_L12_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13_AddDomOD --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm SUBSET_L13_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14_AddDomOD --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm SUBSET_L14_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15_AddDomOD --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm SUBSET_L15_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16_AddDomOD --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm SUBSET_L16_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17_AddDomOD --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm SUBSET_L17_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18_AddDomOD --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm SUBSET_L18_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L_AddDomOD --pheno MAIN_L_AddDomOD.fam --mpheno 4 --grm MAIN_L_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates...AddDomOD. scenario"...')
                command = "./ldak --reml SUBSET_L1_AddDomOD --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm SUBSET_L1_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2_AddDomOD --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm SUBSET_L2_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3_AddDomOD --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm SUBSET_L3_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4_AddDomOD --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm SUBSET_L4_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5_AddDomOD --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm SUBSET_L5_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6_AddDomOD --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm SUBSET_L6_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7_AddDomOD --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm SUBSET_L7_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8_AddDomOD --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm SUBSET_L8_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9_AddDomOD --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm SUBSET_L9_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10_AddDomOD --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm SUBSET_L10_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11_AddDomOD --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm SUBSET_L11_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12_AddDomOD --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm SUBSET_L12_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13_AddDomOD --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm SUBSET_L13_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14_AddDomOD --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm SUBSET_L14_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15_AddDomOD --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm SUBSET_L15_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16_AddDomOD --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm SUBSET_L16_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17_AddDomOD --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm SUBSET_L17_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18_AddDomOD --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm SUBSET_L18_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L_AddDomOD --pheno MAIN_L_AddDomOD.fam --mpheno 4 --grm MAIN_L_AddDomOD --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())













if Prog2.exists () or Prog3.exists () or Prog4.exists ():
    with open("Prog2_select_act.txt", "a+") as ActB_Add:
        ActB_Add.seek(0) # set position to start of file
        lineB = ActB_Add.read().splitlines()
        if valueB in lineB:
            if Prog2.exists ():
                print(' "Preparing bfiles...AddDomODHet. scenario"...')
                command = "./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomODHet"
                        
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())

    with open("Prog3_select_act.txt", "a+") as ActC_Add:
        ActC_Add.seek(0) # set position to start of file
        lineC = ActC_Add.read().splitlines()
        if valueC in lineC:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    print(' "Preparing bfiles...AddDomODHet. scenario"...')
                    command = "./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomODHet"
                        
                    ret = subprocess.run(command, capture_output=True, shell=True)
                    # before Python 3.7:
                    # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                    print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueD in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...AddDomODHet. scenario"...')
                            command = "./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomODHet"
                                                                                
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())

    with open("Prog4_select_act.txt", "a+") as ActD_Add:
        ActD_Add.seek(0) # set position to start of file
        lineD = ActD_Add.read().splitlines()
        if valueDdd in lineD:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            print(' "Preparing bfiles...AddDomODHet. scenario"...')
                            command = "./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list1_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list2_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list3_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list4_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list5_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list6_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list7_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list8_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list9_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list10_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list11_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list12_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list13_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list14_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list15_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list16_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list17_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list18_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomODHet; ./plink --bfile MAIN_ADOH --allow-extra-chr --chr-set 90 --prune --extract list19_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomODHet"
                                                                                
                            ret = subprocess.run(command, capture_output=True, shell=True)
                            # before Python 3.7:
                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                            print(ret.stdout.decode())

                            


    with open("Prog7_select_act.txt", "a+") as ActG_Add:
        ActG_Add.seek(0) # set position to start of file
        lineG = ActG_Add.read().splitlines()
        if valueG in lineG:
            with open("Prog2_select_act.txt", "a+") as ActB_Add:
                ActB_Add.seek(0) # set position to start of file
                lineB = ActB_Add.read().splitlines()
                if valueB in lineB:
                    print('Done')
                else:
                    with open("Prog3_select_act.txt", "a+") as ActC_Add:
                        ActC_Add.seek(0) # set position to start of file
                        lineC = ActC_Add.read().splitlines()
                        if valueC in lineC:
                            print('Done')
                        else:
                            with open("Prog4_select_act.txt", "a+") as ActD_Add:
                                ActD_Add.seek(0) # set position to start of file
                                lineD = ActD_Add.read().splitlines()
                                if valueD in lineD:
                                    print('Done')
                                else:
                                    with open("Prog4_select_act.txt", "a+") as ActD_Add:
                                        ActD_Add.seek(0) # set position to start of file
                                        lineD = ActD_Add.read().splitlines()
                                        if valueDdd in lineD:
                                            print('Done')
                                        else:
                                            print(' "Preparing bfiles....AddDomODHet. scenario"...')
                                            command = "./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list1_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L1_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list2_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L2_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list3_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L3_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list4_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L4_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list5_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L5_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list6_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L6_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list7_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L7_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list8_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L8_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list9_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L9_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list10_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L10_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list11_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L11_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list12_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L12_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list13_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L13_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list14_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L14_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list15_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L15_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list16_AddDomODHet  --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L16_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list17_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L17_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list18_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out SUBSET_L18_AddDomODHet; ./plink --bfile MAIN_ADOH --prune --allow-extra-chr --chr-set 90 --extract list19_AddDomODHet --make-bed --allow-no-sex --set-missing-var-ids @:# --out MAIN_L_AddDomODHet"
                                                                                                                                                                                                                                                                                                                           
                                            ret = subprocess.run(command, capture_output=True, shell=True)
                                            # before Python 3.7:
                                            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                                            print(ret.stdout.decode())


                                            
        
with open("Prog2_select_act.txt", "a+") as ActB_AddDomODHet:
    ActB_AddDomODHet.seek(0) # set position to start of file
    lineB = ActB_AddDomODHet.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Ldak-GCTA_model...AddDomODHet. scenario"...')
            command = "./ldak --calc-kins-direct SUBSET_L1_AddDomODHet  --bfile SUBSET_L1_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L2_AddDomODHet  --bfile SUBSET_L2_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L3_AddDomODHet  --bfile SUBSET_L3_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L4_AddDomODHet  --bfile SUBSET_L4_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L5_AddDomODHet  --bfile SUBSET_L5_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L6_AddDomODHet  --bfile SUBSET_L6_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L7_AddDomODHet  --bfile SUBSET_L7_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L8_AddDomODHet  --bfile SUBSET_L8_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L9_AddDomODHet  --bfile SUBSET_L9_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L10_AddDomODHet  --bfile SUBSET_L10_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L11_AddDomODHet  --bfile SUBSET_L11_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L12_AddDomODHet  --bfile SUBSET_L12_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L13_AddDomODHet  --bfile SUBSET_L13_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L14_AddDomODHet  --bfile SUBSET_L14_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L15_AddDomODHet  --bfile SUBSET_L15_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L16_AddDomODHet  --bfile SUBSET_L16_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L17_AddDomODHet  --bfile SUBSET_L17_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct SUBSET_L18_AddDomODHet  --bfile SUBSET_L18_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct MAIN_L_AddDomODHet  --bfile MAIN_L_AddDomODHet --ignore-weights YES --power -1 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
with open("Prog2_select_act.txt", "a+") as ActB_AddDomODHet:
    ActB_AddDomODHet.seek(0) # set position to start of file
    lineB = ActB_AddDomODHet.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-GCTA_model...covariates included...AddDomODHet. scenario"...')
                command = "./ldak --reml SUBSET_L1_AddDomODHet --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm SUBSET_L1_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2_AddDomODHet --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm SUBSET_L2_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3_AddDomODHet --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm SUBSET_L3_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4_AddDomODHet --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm SUBSET_L4_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5_AddDomODHet --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm SUBSET_L5_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6_AddDomODHet --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm SUBSET_L6_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7_AddDomODHet --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm SUBSET_L7_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8_AddDomODHet --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm SUBSET_L8_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9_AddDomODHet --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm SUBSET_L9_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10_AddDomODHet --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm SUBSET_L10_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11_AddDomODHet --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm SUBSET_L11_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12_AddDomODHet --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm SUBSET_L12_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13_AddDomODHet --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm SUBSET_L13_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14_AddDomODHet --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm SUBSET_L14_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15_AddDomODHet --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm SUBSET_L15_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16_AddDomODHet --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm SUBSET_L16_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17_AddDomODHet --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm SUBSET_L17_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18_AddDomODHet --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm SUBSET_L18_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L_AddDomODHet --pheno MAIN_L_AddDomODHet.fam --mpheno 4 --grm MAIN_L_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Ldak-GCTA_model...without covariates...AddDomODHet. scenario"...')
                command = "./ldak --reml SUBSET_L1_AddDomODHet --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm SUBSET_L1_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L2_AddDomODHet --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm SUBSET_L2_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L3_AddDomODHet --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm SUBSET_L3_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L4_AddDomODHet --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm SUBSET_L4_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L5_AddDomODHet --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm SUBSET_L5_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L6_AddDomODHet --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm SUBSET_L6_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L7_AddDomODHet --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm SUBSET_L7_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L8_AddDomODHet --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm SUBSET_L8_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L9_AddDomODHet --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm SUBSET_L9_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L10_AddDomODHet --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm SUBSET_L10_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L11_AddDomODHet --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm SUBSET_L11_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L12_AddDomODHet --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm SUBSET_L12_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L13_AddDomODHet --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm SUBSET_L13_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L14_AddDomODHet --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm SUBSET_L14_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L15_AddDomODHet --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm SUBSET_L15_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L16_AddDomODHet --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm SUBSET_L16_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L17_AddDomODHet --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm SUBSET_L17_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_L18_AddDomODHet --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm SUBSET_L18_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_L_AddDomODHet --pheno MAIN_L_AddDomODHet.fam --mpheno 4 --grm MAIN_L_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES"
                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
















with open("Prog3_select_act.txt", "a+") as ActC_Add:
    ActC_Add.seek(0) # set position to start of file
    lineC = ActC_Add.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model...Add. scenario"...')
            command = "./ldak --thin thin_L1_Add --bfile SUBSET_L1_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2_Add --bfile SUBSET_L2_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3_Add --bfile SUBSET_L3_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4_Add --bfile SUBSET_L4_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5_Add --bfile SUBSET_L5_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6_Add --bfile SUBSET_L6_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7_Add --bfile SUBSET_L7_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8_Add --bfile SUBSET_L8_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9_Add --bfile SUBSET_L9_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10_Add --bfile SUBSET_L10_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11_Add --bfile SUBSET_L11_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12_Add --bfile SUBSET_L12_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13_Add --bfile SUBSET_L13_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14_Add --bfile SUBSET_L14_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15_Add --bfile SUBSET_L15_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16_Add --bfile SUBSET_L16_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17_Add --bfile SUBSET_L17_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18_Add --bfile SUBSET_L18_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN_L_Add --bfile MAIN_L_Add --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1_Add.in '{print $1, 1}' > weights_L1_Add.thin; awk < thin_L2_Add.in '{print $1, 1}' > weights_L2_Add.thin; awk < thin_L3_Add.in '{print $1, 1}' > weights_L3_Add.thin; awk < thin_L4_Add.in '{print $1, 1}' > weights_L4_Add.thin; awk < thin_L5_Add.in '{print $1, 1}' > weights_L5_Add.thin; awk < thin_L6_Add.in '{print $1, 1}' > weights_L6_Add.thin; awk < thin_L7_Add.in '{print $1, 1}' > weights_L7_Add.thin; awk < thin_L8_Add.in '{print $1, 1}' > weights_L8_Add.thin; awk < thin_L9_Add.in '{print $1, 1}' > weights_L9_Add.thin; awk < thin_L10_Add.in '{print $1, 1}' > weights_L10_Add.thin; awk < thin_L11_Add.in '{print $1, 1}' > weights_L11_Add.thin; awk < thin_L12_Add.in '{print $1, 1}' > weights_L12_Add.thin; awk < thin_L13_Add.in '{print $1, 1}' > weights_L13_Add.thin; awk < thin_L14_Add.in '{print $1, 1}' > weights_L14_Add.thin; awk < thin_L15_Add.in '{print $1, 1}' > weights_L15_Add.thin; awk < thin_L16_Add.in '{print $1, 1}' > weights_L16_Add.thin; awk < thin_L17_Add.in '{print $1, 1}' > weights_L17_Add.thin; awk < thin_L18_Add.in '{print $1, 1}' > weights_L18_Add.thin; awk < thin_MAIN_L_Add.in '{print $1, 1}' > weights_MAIN_L_Add.thin; ./ldak --calc-kins-direct LDAK_Thin_L1_Add --bfile SUBSET_L1_Add --weights weights_L1_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2_Add --bfile SUBSET_L2_Add --weights weights_L2_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3_Add --bfile SUBSET_L3_Add --weights weights_L3_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4_Add --bfile SUBSET_L4_Add --weights weights_L4_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5_Add --bfile SUBSET_L5_Add --weights weights_L5_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6_Add --bfile SUBSET_L6_Add --weights weights_L6_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7_Add --bfile SUBSET_L7_Add --weights weights_L7_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8_Add --bfile SUBSET_L8_Add --weights weights_L8_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9_Add --bfile SUBSET_L9_Add --weights weights_L9_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10_Add --bfile SUBSET_L10_Add --weights weights_L10_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11_Add --bfile SUBSET_L11_Add --weights weights_L11_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12_Add --bfile SUBSET_L12_Add --weights weights_L12_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13_Add --bfile SUBSET_L13_Add --weights weights_L13_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14_Add --bfile SUBSET_L14_Add --weights weights_L14_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15_Add --bfile SUBSET_L15_Add --weights weights_L15_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16_Add --bfile SUBSET_L16_Add --weights weights_L16_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17_Add --bfile SUBSET_L17_Add --weights weights_L17_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18_Add --bfile SUBSET_L18_Add --weights weights_L18_Add.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN_L_Add --bfile MAIN_L_Add --weights weights_MAIN_L_Add.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC_Add:
    ActC_Add.seek(0) # set position to start of file
    lineC = ActC_Add.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included...Add. scenario"...')
                command = "./ldak --reml SUBSET_LT1_Add --pheno SUBSET_L1_Add.fam --mpheno 4 --grm LDAK_Thin_L1_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2_Add --pheno SUBSET_L2_Add.fam --mpheno 4 --grm LDAK_Thin_L2_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3_Add --pheno SUBSET_L3_Add.fam --mpheno 4 --grm LDAK_Thin_L3_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4_Add --pheno SUBSET_L4_Add.fam --mpheno 4 --grm LDAK_Thin_L4_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5_Add --pheno SUBSET_L5_Add.fam --mpheno 4 --grm LDAK_Thin_L5_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6_Add --pheno SUBSET_L6_Add.fam --mpheno 4 --grm LDAK_Thin_L6_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7_Add --pheno SUBSET_L7_Add.fam --mpheno 4 --grm LDAK_Thin_L7_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8_Add --pheno SUBSET_L8_Add.fam --mpheno 4 --grm LDAK_Thin_L8_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9_Add --pheno SUBSET_L9_Add.fam --mpheno 4 --grm LDAK_Thin_L9_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10_Add --pheno SUBSET_L10_Add.fam --mpheno 4 --grm LDAK_Thin_L10_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11_Add --pheno SUBSET_L11_Add.fam --mpheno 4 --grm LDAK_Thin_L11_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12_Add --pheno SUBSET_L12_Add.fam --mpheno 4 --grm LDAK_Thin_L12_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13_Add --pheno SUBSET_L13_Add.fam --mpheno 4 --grm LDAK_Thin_L13_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14_Add --pheno SUBSET_L14_Add.fam --mpheno 4 --grm LDAK_Thin_L14_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15_Add --pheno SUBSET_L15_Add.fam --mpheno 4 --grm LDAK_Thin_L15_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16_Add --pheno SUBSET_L16_Add.fam --mpheno 4 --grm LDAK_Thin_L16_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17_Add --pheno SUBSET_L17_Add.fam --mpheno 4 --grm LDAK_Thin_L17_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18_Add --pheno SUBSET_L18_Add.fam --mpheno 4 --grm LDAK_Thin_L18_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT_Add --pheno MAIN_L_Add.fam --mpheno 4 --grm LDAK_Thin_MAIN_L_Add --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates...Add. scenario"...')
                command = "./ldak --reml SUBSET_LT1_Add --pheno SUBSET_L1_Add.fam --mpheno 4 --grm LDAK_Thin_L1_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2_Add --pheno SUBSET_L2_Add.fam --mpheno 4 --grm LDAK_Thin_L2_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3_Add --pheno SUBSET_L3_Add.fam --mpheno 4 --grm LDAK_Thin_L3_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4_Add --pheno SUBSET_L4_Add.fam --mpheno 4 --grm LDAK_Thin_L4_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5_Add --pheno SUBSET_L5_Add.fam --mpheno 4 --grm LDAK_Thin_L5_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6_Add --pheno SUBSET_L6_Add.fam --mpheno 4 --grm LDAK_Thin_L6_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7_Add --pheno SUBSET_L7_Add.fam --mpheno 4 --grm LDAK_Thin_L7_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8_Add --pheno SUBSET_L8_Add.fam --mpheno 4 --grm LDAK_Thin_L8_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9_Add --pheno SUBSET_L9_Add.fam --mpheno 4 --grm LDAK_Thin_L9_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10_Add --pheno SUBSET_L10_Add.fam --mpheno 4 --grm LDAK_Thin_L10_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11_Add --pheno SUBSET_L11_Add.fam --mpheno 4 --grm LDAK_Thin_L11_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12_Add --pheno SUBSET_L12_Add.fam --mpheno 4 --grm LDAK_Thin_L12_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13_Add --pheno SUBSET_L13_Add.fam --mpheno 4 --grm LDAK_Thin_L13_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14_Add --pheno SUBSET_L14_Add.fam --mpheno 4 --grm LDAK_Thin_L14_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15_Add --pheno SUBSET_L15_Add.fam --mpheno 4 --grm LDAK_Thin_L15_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16_Add --pheno SUBSET_L16_Add.fam --mpheno 4 --grm LDAK_Thin_L16_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17_Add --pheno SUBSET_L17_Add.fam --mpheno 4 --grm LDAK_Thin_L17_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18_Add --pheno SUBSET_L18_Add.fam --mpheno 4 --grm LDAK_Thin_L18_Add --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT_Add --pheno MAIN_L_Add.fam --mpheno 4 --grm LDAK_Thin_MAIN_L_Add --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

       
with open("Prog3_select_act.txt", "a+") as ActC_AddDom:
    ActC_AddDom.seek(0) # set position to start of file
    lineC = ActC_AddDom.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model...AddDom. scenario"...')
            command = "./ldak --thin thin_L1_AddDom --bfile SUBSET_L1_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2_AddDom --bfile SUBSET_L2_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3_AddDom --bfile SUBSET_L3_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4_AddDom --bfile SUBSET_L4_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5_AddDom --bfile SUBSET_L5_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6_AddDom --bfile SUBSET_L6_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7_AddDom --bfile SUBSET_L7_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8_AddDom --bfile SUBSET_L8_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9_AddDom --bfile SUBSET_L9_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10_AddDom --bfile SUBSET_L10_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11_AddDom --bfile SUBSET_L11_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12_AddDom --bfile SUBSET_L12_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13_AddDom --bfile SUBSET_L13_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14_AddDom --bfile SUBSET_L14_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15_AddDom --bfile SUBSET_L15_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16_AddDom --bfile SUBSET_L16_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17_AddDom --bfile SUBSET_L17_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18_AddDom --bfile SUBSET_L18_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN_L_AddDom --bfile MAIN_L_AddDom --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1_AddDom.in '{print $1, 1}' > weights_L1_AddDom.thin; awk < thin_L2_AddDom.in '{print $1, 1}' > weights_L2_AddDom.thin; awk < thin_L3_AddDom.in '{print $1, 1}' > weights_L3_AddDom.thin; awk < thin_L4_AddDom.in '{print $1, 1}' > weights_L4_AddDom.thin; awk < thin_L5_AddDom.in '{print $1, 1}' > weights_L5_AddDom.thin; awk < thin_L6_AddDom.in '{print $1, 1}' > weights_L6_AddDom.thin; awk < thin_L7_AddDom.in '{print $1, 1}' > weights_L7_AddDom.thin; awk < thin_L8_AddDom.in '{print $1, 1}' > weights_L8_AddDom.thin; awk < thin_L9_AddDom.in '{print $1, 1}' > weights_L9_AddDom.thin; awk < thin_L10_AddDom.in '{print $1, 1}' > weights_L10_AddDom.thin; awk < thin_L11_AddDom.in '{print $1, 1}' > weights_L11_AddDom.thin; awk < thin_L12_AddDom.in '{print $1, 1}' > weights_L12_AddDom.thin; awk < thin_L13_AddDom.in '{print $1, 1}' > weights_L13_AddDom.thin; awk < thin_L14_AddDom.in '{print $1, 1}' > weights_L14_AddDom.thin; awk < thin_L15_AddDom.in '{print $1, 1}' > weights_L15_AddDom.thin; awk < thin_L16_AddDom.in '{print $1, 1}' > weights_L16_AddDom.thin; awk < thin_L17_AddDom.in '{print $1, 1}' > weights_L17_AddDom.thin; awk < thin_L18_AddDom.in '{print $1, 1}' > weights_L18_AddDom.thin; awk < thin_MAIN_L_AddDom.in '{print $1, 1}' > weights_MAIN_L_AddDom.thin; ./ldak --calc-kins-direct LDAK_Thin_L1_AddDom --bfile SUBSET_L1_AddDom --weights weights_L1_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2_AddDom --bfile SUBSET_L2_AddDom --weights weights_L2_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3_AddDom --bfile SUBSET_L3_AddDom --weights weights_L3_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4_AddDom --bfile SUBSET_L4_AddDom --weights weights_L4_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5_AddDom --bfile SUBSET_L5_AddDom --weights weights_L5_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6_AddDom --bfile SUBSET_L6_AddDom --weights weights_L6_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7_AddDom --bfile SUBSET_L7_AddDom --weights weights_L7_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8_AddDom --bfile SUBSET_L8_AddDom --weights weights_L8_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9_AddDom --bfile SUBSET_L9_AddDom --weights weights_L9_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10_AddDom --bfile SUBSET_L10_AddDom --weights weights_L10_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11_AddDom --bfile SUBSET_L11_AddDom --weights weights_L11_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12_AddDom --bfile SUBSET_L12_AddDom --weights weights_L12_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13_AddDom --bfile SUBSET_L13_AddDom --weights weights_L13_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14_AddDom --bfile SUBSET_L14_AddDom --weights weights_L14_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15_AddDom --bfile SUBSET_L15_AddDom --weights weights_L15_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16_AddDom --bfile SUBSET_L16_AddDom --weights weights_L16_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17_AddDom --bfile SUBSET_L17_AddDom --weights weights_L17_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18_AddDom --bfile SUBSET_L18_AddDom --weights weights_L18_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN_L_AddDom --bfile MAIN_L_AddDom --weights weights_MAIN_L_AddDom.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC_AddDom:
    ActC_AddDom.seek(0) # set position to start of file
    lineC = ActC_AddDom.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included...Dom. scenario"...')
                command = "./ldak --reml SUBSET_LT1_AddDom --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm LDAK_Thin_L1_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2_AddDom --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm LDAK_Thin_L2_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3_AddDom --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm LDAK_Thin_L3_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4_AddDom --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm LDAK_Thin_L4_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5_AddDom --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm LDAK_Thin_L5_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6_AddDom --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm LDAK_Thin_L6_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7_AddDom --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm LDAK_Thin_L7_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8_AddDom --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm LDAK_Thin_L8_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9_AddDom --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm LDAK_Thin_L9_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10_AddDom --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm LDAK_Thin_L10_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11_AddDom --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm LDAK_Thin_L11_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12_AddDom --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm LDAK_Thin_L12_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13_AddDom --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm LDAK_Thin_L13_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14_AddDom --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm LDAK_Thin_L14_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15_AddDom --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm LDAK_Thin_L15_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16_AddDom --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm LDAK_Thin_L16_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17_AddDom --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm LDAK_Thin_L17_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18_AddDom --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm LDAK_Thin_L18_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT_AddDom --pheno MAIN_L_AddDom.fam --mpheno 4 --grm LDAK_Thin_MAIN_L_AddDom --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates...AddDom. scenario"')
                command = "./ldak --reml SUBSET_LT1_AddDom --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm LDAK_Thin_L1_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2_AddDom --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm LDAK_Thin_L2_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3_AddDom --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm LDAK_Thin_L3_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4_AddDom --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm LDAK_Thin_L4_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5_AddDom --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm LDAK_Thin_L5_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6_AddDom --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm LDAK_Thin_L6_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7_AddDom --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm LDAK_Thin_L7_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8_AddDom --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm LDAK_Thin_L8_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9_AddDom --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm LDAK_Thin_L9_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10_AddDom --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm LDAK_Thin_L10_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11_AddDom --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm LDAK_Thin_L11_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12_AddDom --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm LDAK_Thin_L12_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13_AddDom --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm LDAK_Thin_L13_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14_AddDom --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm LDAK_Thin_L14_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15_AddDom --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm LDAK_Thin_L15_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16_AddDom --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm LDAK_Thin_L16_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17_AddDom --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm LDAK_Thin_L17_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18_AddDom --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm LDAK_Thin_L18_AddDom --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT_AddDom --pheno MAIN_L_AddDom.fam --mpheno 4 --grm LDAK_Thin_MAIN_L_AddDom --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)


with open("Prog3_select_act.txt", "a+") as ActC_AddDomOD:
    ActC_AddDomOD.seek(0) # set position to start of file
    lineC = ActC_AddDomOD.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model...AddDomOD. scenario"...')
            command = "./ldak --thin thin_L1_AddDomOD --bfile SUBSET_L1_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2_AddDomOD --bfile SUBSET_L2_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3_AddDomOD --bfile SUBSET_L3_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4_AddDomOD --bfile SUBSET_L4_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5_AddDomOD --bfile SUBSET_L5_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6_AddDomOD --bfile SUBSET_L6_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7_AddDomOD --bfile SUBSET_L7_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8_AddDomOD --bfile SUBSET_L8_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9_AddDomOD --bfile SUBSET_L9_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10_AddDomOD --bfile SUBSET_L10_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11_AddDomOD --bfile SUBSET_L11_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12_AddDomOD --bfile SUBSET_L12_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13_AddDomOD --bfile SUBSET_L13_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14_AddDomOD --bfile SUBSET_L14_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15_AddDomOD --bfile SUBSET_L15_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16_AddDomOD --bfile SUBSET_L16_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17_AddDomOD --bfile SUBSET_L17_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18_AddDomOD --bfile SUBSET_L18_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN_L_AddDomOD --bfile MAIN_L_AddDomOD --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1_AddDomOD.in '{print $1, 1}' > weights_L1_AddDomOD.thin; awk < thin_L2_AddDomOD.in '{print $1, 1}' > weights_L2_AddDomOD.thin; awk < thin_L3_AddDomOD.in '{print $1, 1}' > weights_L3_AddDomOD.thin; awk < thin_L4_AddDomOD.in '{print $1, 1}' > weights_L4_AddDomOD.thin; awk < thin_L5_AddDomOD.in '{print $1, 1}' > weights_L5_AddDomOD.thin; awk < thin_L6_AddDomOD.in '{print $1, 1}' > weights_L6_AddDomOD.thin; awk < thin_L7_AddDomOD.in '{print $1, 1}' > weights_L7_AddDomOD.thin; awk < thin_L8_AddDomOD.in '{print $1, 1}' > weights_L8_AddDomOD.thin; awk < thin_L9_AddDomOD.in '{print $1, 1}' > weights_L9_AddDomOD.thin; awk < thin_L10_AddDomOD.in '{print $1, 1}' > weights_L10_AddDomOD.thin; awk < thin_L11_AddDomOD.in '{print $1, 1}' > weights_L11_AddDomOD.thin; awk < thin_L12_AddDomOD.in '{print $1, 1}' > weights_L12_AddDomOD.thin; awk < thin_L13_AddDomOD.in '{print $1, 1}' > weights_L13_AddDomOD.thin; awk < thin_L14_AddDomOD.in '{print $1, 1}' > weights_L14_AddDomOD.thin; awk < thin_L15_AddDomOD.in '{print $1, 1}' > weights_L15_AddDomOD.thin; awk < thin_L16_AddDomOD.in '{print $1, 1}' > weights_L16_AddDomOD.thin; awk < thin_L17_AddDomOD.in '{print $1, 1}' > weights_L17_AddDomOD.thin; awk < thin_L18_AddDomOD.in '{print $1, 1}' > weights_L18_AddDomOD.thin; awk < thin_MAIN_L_AddDomOD.in '{print $1, 1}' > weights_MAIN_L_AddDomOD.thin; ./ldak --calc-kins-direct LDAK_Thin_L1_AddDomOD --bfile SUBSET_L1_AddDomOD --weights weights_L1_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2_AddDomOD --bfile SUBSET_L2_AddDomOD --weights weights_L2_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3_AddDomOD --bfile SUBSET_L3_AddDomOD --weights weights_L3_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4_AddDomOD --bfile SUBSET_L4_AddDomOD --weights weights_L4_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5_AddDomOD --bfile SUBSET_L5_AddDomOD --weights weights_L5_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6_AddDomOD --bfile SUBSET_L6_AddDomOD --weights weights_L6_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7_AddDomOD --bfile SUBSET_L7_AddDomOD --weights weights_L7_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8_AddDomOD --bfile SUBSET_L8_AddDomOD --weights weights_L8_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9_AddDomOD --bfile SUBSET_L9_AddDomOD --weights weights_L9_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10_AddDomOD --bfile SUBSET_L10_AddDomOD --weights weights_L10_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11_AddDomOD --bfile SUBSET_L11_AddDomOD --weights weights_L11_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12_AddDomOD --bfile SUBSET_L12_AddDomOD --weights weights_L12_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13_AddDomOD --bfile SUBSET_L13_AddDomOD --weights weights_L13_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14_AddDomOD --bfile SUBSET_L14_AddDomOD --weights weights_L14_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15_AddDomOD --bfile SUBSET_L15_AddDomOD --weights weights_L15_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16_AddDomOD --bfile SUBSET_L16_AddDomOD --weights weights_L16_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17_AddDomOD --bfile SUBSET_L17_AddDomOD --weights weights_L17_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18_AddDomOD --bfile SUBSET_L18_AddDomOD --weights weights_L18_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN_L_AddDomOD --bfile MAIN_L_AddDomOD --weights weights_MAIN_L_AddDomOD.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC_AddDomOD:
    ActC_AddDomOD.seek(0) # set position to start of file
    lineC = ActC_AddDomOD.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included...AddDomOD. scenario"...')
                command = "./ldak --reml SUBSET_LT1_AddDomOD --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L1_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2_AddDomOD --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L2_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3_AddDomOD --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L3_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4_AddDomOD --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L4_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5_AddDomOD --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L5_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6_AddDomOD --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L6_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7_AddDomOD --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L7_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8_AddDomOD --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L8_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9_AddDomOD --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L9_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10_AddDomOD --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L10_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11_AddDomOD --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L11_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12_AddDomOD --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L12_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13_AddDomOD --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L13_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14_AddDomOD --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L14_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15_AddDomOD --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L15_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16_AddDomOD --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L16_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17_AddDomOD --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L17_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18_AddDomOD --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L18_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT_AddDomOD --pheno MAIN_L_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_MAIN_L_AddDomOD --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates...AddDomOD. scenario" ')
                command = "./ldak --reml SUBSET_LT1_AddDomOD --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L1_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2_AddDomOD --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L2_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3_AddDomOD --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L3_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4_AddDomOD --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L4_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5_AddDomOD --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L5_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6_AddDomOD --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L6_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7_AddDomOD --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L7_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8_AddDomOD --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L8_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9_AddDomOD --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L9_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10_AddDomOD --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L10_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11_AddDomOD --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L11_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12_AddDomOD --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L12_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13_AddDomOD --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L13_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14_AddDomOD --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L14_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15_AddDomOD --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L15_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16_AddDomOD --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L16_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17_AddDomOD --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L17_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18_AddDomOD --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_L18_AddDomOD --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT_AddDomOD --pheno MAIN_L_AddDomOD.fam --mpheno 4 --grm LDAK_Thin_MAIN_L_AddDomOD --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)













with open("Prog3_select_act.txt", "a+") as ActC_AddDomODHet:
    ActC_AddDomODHet.seek(0) # set position to start of file
    lineC = ActC_AddDomODHet.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            print(' "Preparing kinship matrices for Thin_model...AddDomODHet. scenario"...')
            command = "./ldak --thin thin_L1_AddDomODHet --bfile SUBSET_L1_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L2_AddDomODHet --bfile SUBSET_L2_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L3_AddDomODHet --bfile SUBSET_L3_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L4_AddDomODHet --bfile SUBSET_L4_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L5_AddDomODHet --bfile SUBSET_L5_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L6_AddDomODHet --bfile SUBSET_L6_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L7_AddDomODHet --bfile SUBSET_L7_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L8_AddDomODHet --bfile SUBSET_L8_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L9_AddDomODHet --bfile SUBSET_L9_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L10_AddDomODHet --bfile SUBSET_L10_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L11_AddDomODHet --bfile SUBSET_L11_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L12_AddDomODHet --bfile SUBSET_L12_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L13_AddDomODHet --bfile SUBSET_L13_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L14_AddDomODHet --bfile SUBSET_L14_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L15_AddDomODHet --bfile SUBSET_L15_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L16_AddDomODHet --bfile SUBSET_L16_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L17_AddDomODHet --bfile SUBSET_L17_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_L18_AddDomODHet --bfile SUBSET_L18_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; ./ldak --thin thin_MAIN_L_AddDomODHet --bfile MAIN_L_AddDomODHet --window-prune 0.98 --window-kb 100 --max-threads 22 --allow-multi YES; awk < thin_L1_AddDomODHet.in '{print $1, 1}' > weights_L1_AddDomODHet.thin; awk < thin_L2_AddDomODHet.in '{print $1, 1}' > weights_L2_AddDomODHet.thin; awk < thin_L3_AddDomODHet.in '{print $1, 1}' > weights_L3_AddDomODHet.thin; awk < thin_L4_AddDomODHet.in '{print $1, 1}' > weights_L4_AddDomODHet.thin; awk < thin_L5_AddDomODHet.in '{print $1, 1}' > weights_L5_AddDomODHet.thin; awk < thin_L6_AddDomODHet.in '{print $1, 1}' > weights_L6_AddDomODHet.thin; awk < thin_L7_AddDomODHet.in '{print $1, 1}' > weights_L7_AddDomODHet.thin; awk < thin_L8_AddDomODHet.in '{print $1, 1}' > weights_L8_AddDomODHet.thin; awk < thin_L9_AddDomODHet.in '{print $1, 1}' > weights_L9_AddDomODHet.thin; awk < thin_L10_AddDomODHet.in '{print $1, 1}' > weights_L10_AddDomODHet.thin; awk < thin_L11_AddDomODHet.in '{print $1, 1}' > weights_L11_AddDomODHet.thin; awk < thin_L12_AddDomODHet.in '{print $1, 1}' > weights_L12_AddDomODHet.thin; awk < thin_L13_AddDomODHet.in '{print $1, 1}' > weights_L13_AddDomODHet.thin; awk < thin_L14_AddDomODHet.in '{print $1, 1}' > weights_L14_AddDomODHet.thin; awk < thin_L15_AddDomODHet.in '{print $1, 1}' > weights_L15_AddDomODHet.thin; awk < thin_L16_AddDomODHet.in '{print $1, 1}' > weights_L16_AddDomODHet.thin; awk < thin_L17_AddDomODHet.in '{print $1, 1}' > weights_L17_AddDomODHet.thin; awk < thin_L18_AddDomODHet.in '{print $1, 1}' > weights_L18_AddDomODHet.thin; awk < thin_MAIN_L_AddDomODHet.in '{print $1, 1}' > weights_MAIN_L_AddDomODHet.thin; ./ldak --calc-kins-direct LDAK_Thin_L1_AddDomODHet --bfile SUBSET_L1_AddDomODHet --weights weights_L1_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L2_AddDomODHet --bfile SUBSET_L2_AddDomODHet --weights weights_L2_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L3_AddDomODHet --bfile SUBSET_L3_AddDomODHet --weights weights_L3_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L4_AddDomODHet --bfile SUBSET_L4_AddDomODHet --weights weights_L4_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L5_AddDomODHet --bfile SUBSET_L5_AddDomODHet --weights weights_L5_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L6_AddDomODHet --bfile SUBSET_L6_AddDomODHet --weights weights_L6_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L7_AddDomODHet --bfile SUBSET_L7_AddDomODHet --weights weights_L7_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L8_AddDomODHet --bfile SUBSET_L8_AddDomODHet --weights weights_L8_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L9_AddDomODHet --bfile SUBSET_L9_AddDomODHet --weights weights_L9_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L10_AddDomODHet --bfile SUBSET_L10_AddDomODHet --weights weights_L10_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L11_AddDomODHet --bfile SUBSET_L11_AddDomODHet --weights weights_L11_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L12_AddDomODHet --bfile SUBSET_L12_AddDomODHet --weights weights_L12_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L13_AddDomODHet --bfile SUBSET_L13_AddDomODHet --weights weights_L13_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L14_AddDomODHet --bfile SUBSET_L14_AddDomODHet --weights weights_L14_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L15_AddDomODHet --bfile SUBSET_L15_AddDomODHet --weights weights_L15_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L16_AddDomODHet --bfile SUBSET_L16_AddDomODHet --weights weights_L16_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L17_AddDomODHet --bfile SUBSET_L17_AddDomODHet --weights weights_L17_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_L18_AddDomODHet --bfile SUBSET_L18_AddDomODHet --weights weights_L18_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES; ./ldak --calc-kins-direct LDAK_Thin_MAIN_L_AddDomODHet --bfile MAIN_L_AddDomODHet --weights weights_MAIN_L_AddDomODHet.thin --power -0.25 --max-threads 22 --allow-multi YES"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog3_select_act.txt", "a+") as ActC_AddDomODHet:
    ActC_AddDomODHet.seek(0) # set position to start of file
    lineC = ActC_AddDomODHet.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            if fileCovar_ldak.exists ():
                print(' "Heritability profiling by Ldak-Thin_model...covariates included...AddDomODHet. scenario"...')
                command = "./ldak --reml SUBSET_LT1_AddDomODHet --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L1_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2_AddDomODHet --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L2_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3_AddDomODHet --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L3_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4_AddDomODHet --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L4_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5_AddDomODHet --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L5_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6_AddDomODHet --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L6_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7_AddDomODHet --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L7_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8_AddDomODHet --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L8_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9_AddDomODHet --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L9_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10_AddDomODHet --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L10_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11_AddDomODHet --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L11_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12_AddDomODHet --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L12_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13_AddDomODHet --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L13_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14_AddDomODHet --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L14_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15_AddDomODHet --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L15_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16_AddDomODHet --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L16_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17_AddDomODHet --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L17_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18_AddDomODHet --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L18_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT_AddDomODHet --pheno MAIN_L_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_MAIN_L_AddDomODHet --covar Covar_ldak --max-threads 22 --constrain YES --allow-multi YES"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
            else:
                print(' "Heritability profiling by Ldak-Thin_model...without covariates...AddDomODHet. scenario" ')
                command = "./ldak --reml SUBSET_LT1_AddDomODHet --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L1_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT2_AddDomODHet --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L2_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT3_AddDomODHet --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L3_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT4_AddDomODHet --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L4_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT5_AddDomODHet --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L5_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT6_AddDomODHet --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L6_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT7_AddDomODHet --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L7_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT8_AddDomODHet --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L8_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT9_AddDomODHet --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L9_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT10_AddDomODHet --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L10_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT11_AddDomODHet --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L11_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT12_AddDomODHet --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L12_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT13_AddDomODHet --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L13_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT14_AddDomODHet --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L14_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT15_AddDomODHet --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L15_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT16_AddDomODHet --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L16_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT17_AddDomODHet --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L17_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml SUBSET_LT18_AddDomODHet --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_L18_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES; ./ldak --reml MAIN_LT_AddDomODHet --pheno MAIN_L_AddDomODHet.fam --mpheno 4 --grm LDAK_Thin_MAIN_L_AddDomODHet --max-threads 22 --constrain YES --allow-multi YES"
                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

                           








  

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model...Add. scenario"...')
            command = "./gcta --bfile SUBSET_L1_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML1_Add; ./gcta --bfile SUBSET_L2_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML2_Add; ./gcta --bfile SUBSET_L3_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML3_Add; ./gcta --bfile SUBSET_L4_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML4_Add; ./gcta --bfile SUBSET_L5_Add --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML5_Add; ./gcta --bfile SUBSET_L6_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML6_Add; ./gcta --bfile SUBSET_L7_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML7_Add; ./gcta --bfile SUBSET_L8_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML8_Add; ./gcta --bfile SUBSET_L9_Add --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML9_Add; ./gcta --bfile SUBSET_L10_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML10_Add; ./gcta --bfile SUBSET_L11_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML11_Add; ./gcta --bfile SUBSET_L12_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML12_Add; ./gcta --bfile SUBSET_L13_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML13_Add; ./gcta --bfile SUBSET_L14_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML14_Add; ./gcta --bfile SUBSET_L15_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML15_Add; ./gcta  --bfile SUBSET_L16_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML16_Add; ./gcta --bfile SUBSET_L17_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML17_Add; ./gcta --bfile SUBSET_L18_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML18_Add; ./gcta --bfile MAIN_L_Add --autosome --autosome-num 90 --make-grm --thread-num 20 --out MAIN_GREML_L_Add"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model...Add. scenario"...')
            command = "./gcta --bfile SUBSET_L1_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML1_Add; ./gcta --bfile SUBSET_L2_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML2_Add; ./gcta --bfile SUBSET_L3_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML3_Add; ./gcta --bfile SUBSET_L4_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML4_Add; ./gcta --bfile SUBSET_L5_Add --autosome --autosome-num 90 --make-grm-inbred  --thread-num 20 --out SUBSET_GREML5_Add; ./gcta --bfile SUBSET_L6_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML6_Add; ./gcta --bfile SUBSET_L7_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML7_Add; ./gcta --bfile SUBSET_L8_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML8_Add; ./gcta --bfile SUBSET_L9_Add --autosome --autosome-num 90 --make-grm-inbred  --thread-num 20 --out SUBSET_GREML9_Add; ./gcta --bfile SUBSET_L10_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML10_Add; ./gcta --bfile SUBSET_L11_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML11_Add; ./gcta --bfile SUBSET_L12_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML12_Add; ./gcta --bfile SUBSET_L13_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML13_Add; ./gcta --bfile SUBSET_L14_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML14_Add; ./gcta --bfile SUBSET_L15_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML15_Add; ./gcta  --bfile SUBSET_L16_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML16_Add; ./gcta --bfile SUBSET_L17_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML17_Add; ./gcta --bfile SUBSET_L18_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML18_Add; ./gcta --bfile MAIN_L_Add --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out MAIN_GREML_L_Add"
                        
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())



            
with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included...Add. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_Add.fam --mpheno 4 --grm SUBSET_GREML1_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_Add; ./gcta --reml --pheno SUBSET_L2_Add.fam --mpheno 4 --grm SUBSET_GREML2_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_Add; ./gcta --reml --pheno SUBSET_L3_Add.fam --mpheno 4 --grm SUBSET_GREML3_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_Add; ./gcta --reml --pheno SUBSET_L4_Add.fam --mpheno 4 --grm SUBSET_GREML4_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_Add; ./gcta --reml --pheno SUBSET_L5_Add.fam --mpheno 4 --grm SUBSET_GREML5_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_Add; ./gcta --reml --pheno SUBSET_L6_Add.fam --mpheno 4 --grm SUBSET_GREML6_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_Add; ./gcta --reml --pheno SUBSET_L7_Add.fam --mpheno 4 --grm SUBSET_GREML7_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_Add; ./gcta --reml --pheno SUBSET_L8_Add.fam --mpheno 4 --grm SUBSET_GREML8_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_Add; ./gcta --reml --pheno SUBSET_L9_Add.fam --mpheno 4 --grm SUBSET_GREML9_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_Add; ./gcta --reml --pheno SUBSET_L10_Add.fam --mpheno 4 --grm SUBSET_GREML10_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_Add; ./gcta --reml --pheno SUBSET_L11_Add.fam --mpheno 4 --grm SUBSET_GREML11_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_Add; ./gcta --reml --pheno SUBSET_L12_Add.fam --mpheno 4 --grm SUBSET_GREML12_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_Add; ./gcta --reml --pheno SUBSET_L13_Add.fam --mpheno 4 --grm SUBSET_GREML13_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_Add; ./gcta --reml --pheno SUBSET_L14_Add.fam --mpheno 4 --grm SUBSET_GREML14_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_Add; ./gcta --reml --pheno SUBSET_L15_Add.fam --mpheno 4 --grm SUBSET_GREML15_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_Add; ./gcta --reml --pheno SUBSET_L16_Add.fam --mpheno 4 --grm SUBSET_GREML16_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_Add; ./gcta --reml --pheno SUBSET_L17_Add.fam --mpheno 4 --grm SUBSET_GREML17_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_Add; ./gcta --reml --pheno SUBSET_L18_Add.fam --mpheno 4 --grm SUBSET_GREML18_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_Add; ./gcta --reml --pheno MAIN_L_Add.fam --mpheno 4  --grm MAIN_GREML_L_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_Add"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included...Add. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_Add.fam --mpheno 4 --grm SUBSET_GREML1_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_Add; ./gcta --reml --pheno SUBSET_L2_Add.fam --mpheno 4 --grm SUBSET_GREML2_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_Add; ./gcta --reml --pheno SUBSET_L3_Add.fam --mpheno 4 --grm SUBSET_GREML3_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_Add; ./gcta --reml --pheno SUBSET_L4_Add.fam --mpheno 4 --grm SUBSET_GREML4_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_Add; ./gcta --reml --pheno SUBSET_L5_Add.fam --mpheno 4 --grm SUBSET_GREML5_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_Add; ./gcta --reml --pheno SUBSET_L6_Add.fam --mpheno 4 --grm SUBSET_GREML6_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_Add; ./gcta --reml --pheno SUBSET_L7_Add.fam --mpheno 4 --grm SUBSET_GREML7_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_Add; ./gcta --reml --pheno SUBSET_L8_Add.fam --mpheno 4 --grm SUBSET_GREML8_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_Add; ./gcta --reml --pheno SUBSET_L9_Add.fam --mpheno 4 --grm SUBSET_GREML9_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_Add; ./gcta --reml --pheno SUBSET_L10_Add.fam --mpheno 4 --grm SUBSET_GREML10_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_Add; ./gcta --reml --pheno SUBSET_L11_Add.fam --mpheno 4 --grm SUBSET_GREML11_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_Add; ./gcta --reml --pheno SUBSET_L12_Add.fam --mpheno 4 --grm SUBSET_GREML12_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_Add; ./gcta --reml --pheno SUBSET_L13_Add.fam --mpheno 4 --grm SUBSET_GREML13_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_Add; ./gcta --reml --pheno SUBSET_L14_Add.fam --mpheno 4 --grm SUBSET_GREML14_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_Add; ./gcta --reml --pheno SUBSET_L15_Add.fam --mpheno 4 --grm SUBSET_GREML15_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_Add; ./gcta --reml --pheno SUBSET_L16_Add.fam --mpheno 4 --grm SUBSET_GREML16_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_Add; ./gcta --reml --pheno SUBSET_L17_Add.fam --mpheno 4 --grm SUBSET_GREML17_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_Add; ./gcta --reml --pheno SUBSET_L18_Add.fam --mpheno 4 --grm SUBSET_GREML18_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_Add; ./gcta --reml --pheno MAIN_L_Add.fam --mpheno 4  --grm MAIN_GREML_L_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_Add"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates...Add. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_Add.fam --mpheno 4 --grm SUBSET_GREML1_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_Add; ./gcta --reml --pheno SUBSET_L2_Add.fam --mpheno 4 --grm SUBSET_GREML2_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_Add; ./gcta --reml --pheno SUBSET_L3_Add.fam --mpheno 4 --grm SUBSET_GREML3_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_Add; ./gcta --reml --pheno SUBSET_L4_Add.fam --mpheno 4 --grm SUBSET_GREML4_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_Add; ./gcta --reml --pheno SUBSET_L5_Add.fam --mpheno 4 --grm SUBSET_GREML5_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_Add; ./gcta --reml --pheno SUBSET_L6_Add.fam --mpheno 4 --grm SUBSET_GREML6_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_Add; ./gcta --reml --pheno SUBSET_L7_Add.fam --mpheno 4 --grm SUBSET_GREML7_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_Add; ./gcta --reml --pheno SUBSET_L8_Add.fam --mpheno 4 --grm SUBSET_GREML8_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_Add; ./gcta --reml --pheno SUBSET_L9_Add.fam --mpheno 4 --grm SUBSET_GREML9_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_Add; ./gcta --reml --pheno SUBSET_L10_Add.fam --mpheno 4 --grm SUBSET_GREML10_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_Add; ./gcta --reml --pheno SUBSET_L11_Add.fam --mpheno 4 --grm SUBSET_GREML11_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_Add; ./gcta --reml --pheno SUBSET_L12_Add.fam --mpheno 4 --grm SUBSET_GREML12_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_Add; ./gcta --reml --pheno SUBSET_L13_Add.fam --mpheno 4 --grm SUBSET_GREML13_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_Add; ./gcta --reml --pheno SUBSET_L14_Add.fam --mpheno 4 --grm SUBSET_GREML14_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_Add; ./gcta --reml --pheno SUBSET_L15_Add.fam --mpheno 4 --grm SUBSET_GREML15_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_Add; ./gcta --reml --pheno SUBSET_L16_Add.fam --mpheno 4 --grm SUBSET_GREML16_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_Add; ./gcta --reml --pheno SUBSET_L17_Add.fam --mpheno 4 --grm SUBSET_GREML17_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_Add; ./gcta --reml --pheno SUBSET_L18_Add.fam --mpheno 4 --grm SUBSET_GREML18_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_Add; ./gcta --reml --pheno MAIN_L_Add.fam --mpheno 4 --grm MAIN_GREML_L_Add --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_Add"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

                
with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included...Add. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_Add.fam --mpheno 4 --grm SUBSET_GREML1_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_Add; ./gcta --reml --pheno SUBSET_L2_Add.fam --mpheno 4 --grm SUBSET_GREML2_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_Add; ./gcta --reml --pheno SUBSET_L3_Add.fam --mpheno 4 --grm SUBSET_GREML3_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_Add; ./gcta --reml --pheno SUBSET_L4_Add.fam --mpheno 4 --grm SUBSET_GREML4_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_Add; ./gcta --reml --pheno SUBSET_L5_Add.fam --mpheno 4 --grm SUBSET_GREML5_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_Add; ./gcta --reml --pheno SUBSET_L6_Add.fam --mpheno 4 --grm SUBSET_GREML6_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_Add; ./gcta --reml --pheno SUBSET_L7_Add.fam --mpheno 4 --grm SUBSET_GREML7_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_Add; ./gcta --reml --pheno SUBSET_L8_Add.fam --mpheno 4 --grm SUBSET_GREML8_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_Add; ./gcta --reml --pheno SUBSET_L9_Add.fam --mpheno 4 --grm SUBSET_GREML9_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_Add; ./gcta --reml --pheno SUBSET_L10_Add.fam --mpheno 4 --grm SUBSET_GREML10_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_Add; ./gcta --reml --pheno SUBSET_L11_Add.fam --mpheno 4 --grm SUBSET_GREML11_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_Add; ./gcta --reml --pheno SUBSET_L12_Add.fam --mpheno 4 --grm SUBSET_GREML12_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_Add; ./gcta --reml --pheno SUBSET_L13_Add.fam --mpheno 4 --grm SUBSET_GREML13_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_Add; ./gcta --reml --pheno SUBSET_L14_Add.fam --mpheno 4 --grm SUBSET_GREML14_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_Add; ./gcta --reml --pheno SUBSET_L15_Add.fam --mpheno 4 --grm SUBSET_GREML15_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_Add; ./gcta --reml --pheno SUBSET_L16_Add.fam --mpheno 4 --grm SUBSET_GREML16_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_Add; ./gcta --reml --pheno SUBSET_L17_Add.fam --mpheno 4 --grm SUBSET_GREML17_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_Add; ./gcta --reml --pheno SUBSET_L18_Add.fam --mpheno 4 --grm SUBSET_GREML18_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_Add; ./gcta --reml --pheno MAIN_L_Add.fam --mpheno 4  --grm MAIN_GREML_L_Add --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_Add"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included...Add. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_Add.fam --mpheno 4 --grm SUBSET_GREML1_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_Add; ./gcta --reml --pheno SUBSET_L2_Add.fam --mpheno 4 --grm SUBSET_GREML2_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_Add; ./gcta --reml --pheno SUBSET_L3_Add.fam --mpheno 4 --grm SUBSET_GREML3_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_Add; ./gcta --reml --pheno SUBSET_L4_Add.fam --mpheno 4 --grm SUBSET_GREML4_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_Add; ./gcta --reml --pheno SUBSET_L5_Add.fam --mpheno 4 --grm SUBSET_GREML5_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_Add; ./gcta --reml --pheno SUBSET_L6_Add.fam --mpheno 4 --grm SUBSET_GREML6_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_Add; ./gcta --reml --pheno SUBSET_L7_Add.fam --mpheno 4 --grm SUBSET_GREML7_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_Add; ./gcta --reml --pheno SUBSET_L8_Add.fam --mpheno 4 --grm SUBSET_GREML8_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_Add; ./gcta --reml --pheno SUBSET_L9_Add.fam --mpheno 4 --grm SUBSET_GREML9_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_Add; ./gcta --reml --pheno SUBSET_L10_Add.fam --mpheno 4 --grm SUBSET_GREML10_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_Add; ./gcta --reml --pheno SUBSET_L11_Add.fam --mpheno 4 --grm SUBSET_GREML11_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_Add; ./gcta --reml --pheno SUBSET_L12_Add.fam --mpheno 4 --grm SUBSET_GREML12_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_Add; ./gcta --reml --pheno SUBSET_L13_Add.fam --mpheno 4 --grm SUBSET_GREML13_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_Add; ./gcta --reml --pheno SUBSET_L14_Add.fam --mpheno 4 --grm SUBSET_GREML14_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_Add; ./gcta --reml --pheno SUBSET_L15_Add.fam --mpheno 4 --grm SUBSET_GREML15_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_Add; ./gcta --reml --pheno SUBSET_L16_Add.fam --mpheno 4 --grm SUBSET_GREML16_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_Add; ./gcta --reml --pheno SUBSET_L17_Add.fam --mpheno 4 --grm SUBSET_GREML17_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_Add; ./gcta --reml --pheno SUBSET_L18_Add.fam --mpheno 4 --grm SUBSET_GREML18_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_Add; ./gcta --reml --pheno MAIN_L_Add.fam --mpheno 4  --grm MAIN_GREML_L_Add --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_Add"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates...Add. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_Add.fam --mpheno 4 --grm SUBSET_GREML1_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_Add; ./gcta --reml --pheno SUBSET_L2_Add.fam --mpheno 4 --grm SUBSET_GREML2_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_Add; ./gcta --reml --pheno SUBSET_L3_Add.fam --mpheno 4 --grm SUBSET_GREML3_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_Add; ./gcta --reml --pheno SUBSET_L4_Add.fam --mpheno 4 --grm SUBSET_GREML4_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_Add; ./gcta --reml --pheno SUBSET_L5_Add.fam --mpheno 4 --grm SUBSET_GREML5_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_Add; ./gcta --reml --pheno SUBSET_L6_Add.fam --mpheno 4 --grm SUBSET_GREML6_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_Add; ./gcta --reml --pheno SUBSET_L7_Add.fam --mpheno 4 --grm SUBSET_GREML7_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_Add; ./gcta --reml --pheno SUBSET_L8_Add.fam --mpheno 4 --grm SUBSET_GREML8_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_Add; ./gcta --reml --pheno SUBSET_L9_Add.fam --mpheno 4 --grm SUBSET_GREML9_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_Add; ./gcta --reml --pheno SUBSET_L10_Add.fam --mpheno 4 --grm SUBSET_GREML10_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_Add; ./gcta --reml --pheno SUBSET_L11_Add.fam --mpheno 4 --grm SUBSET_GREML11_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_Add; ./gcta --reml --pheno SUBSET_L12_Add.fam --mpheno 4 --grm SUBSET_GREML12_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_Add; ./gcta --reml --pheno SUBSET_L13_Add.fam --mpheno 4 --grm SUBSET_GREML13_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_Add; ./gcta --reml --pheno SUBSET_L14_Add.fam --mpheno 4 --grm SUBSET_GREML14_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_Add; ./gcta --reml --pheno SUBSET_L15_Add.fam --mpheno 4 --grm SUBSET_GREML15_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_Add; ./gcta --reml --pheno SUBSET_L16_Add.fam --mpheno 4 --grm SUBSET_GREML16_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_Add; ./gcta --reml --pheno SUBSET_L17_Add.fam --mpheno 4 --grm SUBSET_GREML17_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_Add; ./gcta --reml --pheno SUBSET_L18_Add.fam --mpheno 4 --grm SUBSET_GREML18_Add --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_Add; ./gcta --reml --pheno MAIN_L_Add.fam --mpheno 4 --grm MAIN_GREML_L_Add --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_Add"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)





with open("Prog4_select_act.txt", "a+") as ActD_AddDom:
    ActD_AddDom.seek(0) # set position to start of file
    lineD = ActD_AddDom.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model...AddDom. scenario"...')
            command = "./gcta --bfile SUBSET_L1_AddDom --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML1_AddDom; ./gcta --bfile SUBSET_L2_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML2_AddDom; ./gcta --bfile SUBSET_L3_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML3_AddDom; ./gcta --bfile SUBSET_L4_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML4_AddDom; ./gcta --bfile SUBSET_L5_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML5_AddDom; ./gcta --bfile SUBSET_L6_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML6_AddDom; ./gcta --bfile SUBSET_L7_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML7_AddDom; ./gcta --bfile SUBSET_L8_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML8_AddDom; ./gcta --bfile SUBSET_L9_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML9_AddDom; ./gcta --bfile SUBSET_L10_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML10_AddDom; ./gcta --bfile SUBSET_L11_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML11_AddDom; ./gcta --bfile SUBSET_L12_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML12_AddDom; ./gcta --bfile SUBSET_L13_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML13_AddDom; ./gcta --bfile SUBSET_L14_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML14_AddDom; ./gcta --bfile SUBSET_L15_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML15_AddDom; ./gcta --bfile SUBSET_L16_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML16_AddDom; ./gcta --bfile SUBSET_L17_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML17_AddDom; ./gcta --bfile SUBSET_L18_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML18_AddDom; ./gcta --bfile MAIN_L_AddDom --autosome --autosome-num 90 --make-grm  --thread-num 20 --out MAIN_GREML_L_AddDom"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


with open("Prog4_select_act.txt", "a+") as ActD_AddDom:
    ActD_AddDom.seek(0) # set position to start of file
    lineD = ActD_AddDom.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model...AddDom. scenario"...')
            command = "./gcta --bfile SUBSET_L1_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML1_AddDom; ./gcta --bfile SUBSET_L2_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML2_AddDom; ./gcta --bfile SUBSET_L3_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML3_AddDom; ./gcta --bfile SUBSET_L4_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML4_AddDom; ./gcta --bfile SUBSET_L5_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML5_AddDom; ./gcta --bfile SUBSET_L6_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML6_AddDom; ./gcta --bfile SUBSET_L7_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML7_AddDom; ./gcta --bfile SUBSET_L8_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML8_AddDom; ./gcta --bfile SUBSET_L9_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML9_AddDom; ./gcta --bfile SUBSET_L10_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML10_AddDom; ./gcta --bfile SUBSET_L11_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML11_AddDom; ./gcta --bfile SUBSET_L12_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML12_AddDom; ./gcta --bfile SUBSET_L13_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML13_AddDom; ./gcta --bfile SUBSET_L14_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML14_AddDom; ./gcta --bfile SUBSET_L15_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML15_AddDom; ./gcta --bfile SUBSET_L16_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML16_AddDom; ./gcta --bfile SUBSET_L17_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML17_AddDom; ./gcta --bfile SUBSET_L18_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML18_AddDom; ./gcta --bfile MAIN_L_AddDom --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out MAIN_GREML_L_AddDom"

            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


            
with open("Prog4_select_act.txt", "a+") as ActD_AddDom:
    ActD_AddDom.seek(0) # set position to start of file
    lineD = ActD_AddDom.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included...AddDom. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm SUBSET_GREML1_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDom; ./gcta --reml --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm SUBSET_GREML2_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDom; ./gcta --reml --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm SUBSET_GREML3_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDom; ./gcta --reml --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm SUBSET_GREML4_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDom; ./gcta --reml --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm SUBSET_GREML5_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDom; ./gcta --reml --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm SUBSET_GREML6_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDom; ./gcta --reml --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm SUBSET_GREML7_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDom; ./gcta --reml --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm SUBSET_GREML8_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDom; ./gcta --reml --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm SUBSET_GREML9_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDom; ./gcta --reml --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm SUBSET_GREML10_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDom; ./gcta --reml --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm SUBSET_GREML11_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDom; ./gcta --reml --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm SUBSET_GREML12_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDom; ./gcta --reml --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm SUBSET_GREML13_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDom; ./gcta --reml --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm SUBSET_GREML14_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDom; ./gcta --reml --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm SUBSET_GREML15_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDom; ./gcta --reml --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm SUBSET_GREML16_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDom; ./gcta --reml --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm SUBSET_GREML17_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDom; ./gcta --reml --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm SUBSET_GREML18_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDom; ./gcta --reml --pheno MAIN_L_AddDom.fam --mpheno 4 --grm MAIN_GREML_L_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDom"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included...AddDom. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm SUBSET_GREML1_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDom; ./gcta --reml --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm SUBSET_GREML2_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDom; ./gcta --reml --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm SUBSET_GREML3_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDom; ./gcta --reml --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm SUBSET_GREML4_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDom; ./gcta --reml --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm SUBSET_GREML5_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDom; ./gcta --reml --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm SUBSET_GREML6_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDom; ./gcta --reml --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm SUBSET_GREML7_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDom; ./gcta --reml --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm SUBSET_GREML8_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDom; ./gcta --reml --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm SUBSET_GREML9_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDom; ./gcta --reml --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm SUBSET_GREML10_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDom; ./gcta --reml --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm SUBSET_GREML11_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDom; ./gcta --reml --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm SUBSET_GREML12_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDom; ./gcta --reml --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm SUBSET_GREML13_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDom; ./gcta --reml --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm SUBSET_GREML14_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDom; ./gcta --reml --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm SUBSET_GREML15_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDom; ./gcta --reml --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm SUBSET_GREML16_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDom; ./gcta --reml --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm SUBSET_GREML17_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDom; ./gcta --reml --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm SUBSET_GREML18_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDom; ./gcta --reml --pheno MAIN_L_AddDom.fam --mpheno 4 --grm MAIN_GREML_L_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDom"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates...AddDom. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm SUBSET_GREML1_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDom; ./gcta --reml --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm SUBSET_GREML2_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDom; ./gcta --reml --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm SUBSET_GREML3_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDom; ./gcta --reml --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm SUBSET_GREML4_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDom; ./gcta --reml --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm SUBSET_GREML5_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDom; ./gcta --reml --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm SUBSET_GREML6_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDom; ./gcta --reml --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm SUBSET_GREML7_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDom; ./gcta --reml --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm SUBSET_GREML8_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDom; ./gcta --reml --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm SUBSET_GREML9_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDom; ./gcta --reml --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm SUBSET_GREML10_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDom; ./gcta --reml --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm SUBSET_GREML11_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDom; ./gcta --reml --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm SUBSET_GREML12_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDom; ./gcta --reml --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm SUBSET_GREML13_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDom; ./gcta --reml --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm SUBSET_GREML14_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDom; ./gcta --reml --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm SUBSET_GREML15_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDom; ./gcta --reml --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm SUBSET_GREML16_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDom; ./gcta --reml --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm SUBSET_GREML17_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDom; ./gcta --reml --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm SUBSET_GREML18_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDom; ./gcta --reml --pheno MAIN_L_AddDom.fam --mpheno 4 --grm MAIN_GREML_L_AddDom --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDom"
                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

with open("Prog4_select_act.txt", "a+") as ActD_AddDom:
    ActD_AddDom.seek(0) # set position to start of file
    lineD = ActD_AddDom.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included...AddDom. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm SUBSET_GREML1_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDom; ./gcta --reml --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm SUBSET_GREML2_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDom; ./gcta --reml --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm SUBSET_GREML3_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDom; ./gcta --reml --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm SUBSET_GREML4_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDom; ./gcta --reml --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm SUBSET_GREML5_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDom; ./gcta --reml --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm SUBSET_GREML6_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDom; ./gcta --reml --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm SUBSET_GREML7_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDom; ./gcta --reml --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm SUBSET_GREML8_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDom; ./gcta --reml --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm SUBSET_GREML9_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDom; ./gcta --reml --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm SUBSET_GREML10_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDom; ./gcta --reml --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm SUBSET_GREML11_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDom; ./gcta --reml --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm SUBSET_GREML12_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDom; ./gcta --reml --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm SUBSET_GREML13_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDom; ./gcta --reml --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm SUBSET_GREML14_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDom; ./gcta --reml --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm SUBSET_GREML15_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDom; ./gcta --reml --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm SUBSET_GREML16_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDom; ./gcta --reml --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm SUBSET_GREML17_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDom; ./gcta --reml --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm SUBSET_GREML18_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDom; ./gcta --reml --pheno MAIN_L_AddDom.fam --mpheno 4 --grm MAIN_GREML_L_AddDom --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDom"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included...AddDom. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm SUBSET_GREML1_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDom; ./gcta --reml --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm SUBSET_GREML2_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDom; ./gcta --reml --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm SUBSET_GREML3_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDom; ./gcta --reml --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm SUBSET_GREML4_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDom; ./gcta --reml --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm SUBSET_GREML5_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDom; ./gcta --reml --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm SUBSET_GREML6_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDom; ./gcta --reml --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm SUBSET_GREML7_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDom; ./gcta --reml --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm SUBSET_GREML8_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDom; ./gcta --reml --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm SUBSET_GREML9_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDom; ./gcta --reml --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm SUBSET_GREML10_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDom; ./gcta --reml --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm SUBSET_GREML11_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDom; ./gcta --reml --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm SUBSET_GREML12_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDom; ./gcta --reml --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm SUBSET_GREML13_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDom; ./gcta --reml --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm SUBSET_GREML14_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDom; ./gcta --reml --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm SUBSET_GREML15_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDom; ./gcta --reml --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm SUBSET_GREML16_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDom; ./gcta --reml --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm SUBSET_GREML17_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDom; ./gcta --reml --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm SUBSET_GREML18_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDom; ./gcta --reml --pheno MAIN_L_AddDom.fam --mpheno 4 --grm MAIN_GREML_L_AddDom --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDom"
                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates...AddDom. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDom.fam --mpheno 4 --grm SUBSET_GREML1_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDom; ./gcta --reml --pheno SUBSET_L2_AddDom.fam --mpheno 4 --grm SUBSET_GREML2_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDom; ./gcta --reml --pheno SUBSET_L3_AddDom.fam --mpheno 4 --grm SUBSET_GREML3_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDom; ./gcta --reml --pheno SUBSET_L4_AddDom.fam --mpheno 4 --grm SUBSET_GREML4_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDom; ./gcta --reml --pheno SUBSET_L5_AddDom.fam --mpheno 4 --grm SUBSET_GREML5_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDom; ./gcta --reml --pheno SUBSET_L6_AddDom.fam --mpheno 4 --grm SUBSET_GREML6_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDom; ./gcta --reml --pheno SUBSET_L7_AddDom.fam --mpheno 4 --grm SUBSET_GREML7_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDom; ./gcta --reml --pheno SUBSET_L8_AddDom.fam --mpheno 4 --grm SUBSET_GREML8_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDom; ./gcta --reml --pheno SUBSET_L9_AddDom.fam --mpheno 4 --grm SUBSET_GREML9_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDom; ./gcta --reml --pheno SUBSET_L10_AddDom.fam --mpheno 4 --grm SUBSET_GREML10_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDom; ./gcta --reml --pheno SUBSET_L11_AddDom.fam --mpheno 4 --grm SUBSET_GREML11_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDom; ./gcta --reml --pheno SUBSET_L12_AddDom.fam --mpheno 4 --grm SUBSET_GREML12_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDom; ./gcta --reml --pheno SUBSET_L13_AddDom.fam --mpheno 4 --grm SUBSET_GREML13_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDom; ./gcta --reml --pheno SUBSET_L14_AddDom.fam --mpheno 4 --grm SUBSET_GREML14_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDom; ./gcta --reml --pheno SUBSET_L15_AddDom.fam --mpheno 4 --grm SUBSET_GREML15_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDom; ./gcta --reml --pheno SUBSET_L16_AddDom.fam --mpheno 4 --grm SUBSET_GREML16_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDom; ./gcta --reml --pheno SUBSET_L17_AddDom.fam --mpheno 4 --grm SUBSET_GREML17_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDom; ./gcta --reml --pheno SUBSET_L18_AddDom.fam --mpheno 4 --grm SUBSET_GREML18_AddDom --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDom; ./gcta --reml --pheno MAIN_L_AddDom.fam --mpheno 4 --grm MAIN_GREML_L_AddDom --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDom"
                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)


                






with open("Prog4_select_act.txt", "a+") as ActD_AddDomOD:
    ActD_AddDomOD.seek(0) # set position to start of file
    lineD = ActD_AddDomOD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model...AddDomOD. scenario"...')
            command = "./gcta --bfile SUBSET_L1_AddDomOD --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML1_AddDomOD; ./gcta --bfile SUBSET_L2_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML2_AddDomOD; ./gcta --bfile SUBSET_L3_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML3_AddDomOD; ./gcta --bfile SUBSET_L4_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML4_AddDomOD; ./gcta --bfile SUBSET_L5_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML5_AddDomOD; ./gcta --bfile SUBSET_L6_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML6_AddDomOD; ./gcta --bfile SUBSET_L7_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML7_AddDomOD; ./gcta --bfile SUBSET_L8_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML8_AddDomOD; ./gcta --bfile SUBSET_L9_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML9_AddDomOD; ./gcta --bfile SUBSET_L10_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML10_AddDomOD; ./gcta --bfile SUBSET_L11_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML11_AddDomOD; ./gcta --bfile SUBSET_L12_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML12_AddDomOD; ./gcta --bfile SUBSET_L13_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML13_AddDomOD; ./gcta --bfile SUBSET_L14_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML14_AddDomOD; ./gcta --bfile SUBSET_L15_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML15_AddDomOD; ./gcta --bfile SUBSET_L16_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML16_AddDomOD; ./gcta --bfile SUBSET_L17_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML17_AddDomOD; ./gcta --bfile SUBSET_L18_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML18_AddDomOD; ./gcta --bfile MAIN_L_AddDomOD --autosome --autosome-num 90 --make-grm  --thread-num 20 --out MAIN_GREML_L_AddDomOD"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD_AddDomOD:
    ActD_AddDomOD.seek(0) # set position to start of file
    lineD = ActD_AddDomOD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model...AddDomOD. scenario"...')
            command = "./gcta --bfile SUBSET_L1_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML1_AddDomOD; ./gcta --bfile SUBSET_L2_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML2_AddDomOD; ./gcta --bfile SUBSET_L3_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML3_AddDomOD; ./gcta --bfile SUBSET_L4_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML4_AddDomOD; ./gcta --bfile SUBSET_L5_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML5_AddDomOD; ./gcta --bfile SUBSET_L6_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML6_AddDomOD; ./gcta --bfile SUBSET_L7_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML7_AddDomOD; ./gcta --bfile SUBSET_L8_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML8_AddDomOD; ./gcta --bfile SUBSET_L9_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML9_AddDomOD; ./gcta --bfile SUBSET_L10_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML10_AddDomOD; ./gcta --bfile SUBSET_L11_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML11_AddDomOD; ./gcta --bfile SUBSET_L12_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML12_AddDomOD; ./gcta --bfile SUBSET_L13_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML13_AddDomOD; ./gcta --bfile SUBSET_L14_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML14_AddDomOD; ./gcta --bfile SUBSET_L15_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML15_AddDomOD; ./gcta --bfile SUBSET_L16_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML16_AddDomOD; ./gcta --bfile SUBSET_L17_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML17_AddDomOD; ./gcta --bfile SUBSET_L18_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML18_AddDomOD; ./gcta --bfile MAIN_L_AddDomOD --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out MAIN_GREML_L_AddDomOD"
            
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())


            
with open("Prog4_select_act.txt", "a+") as ActD_AddDomOD:
    ActD_AddDomOD.seek(0) # set position to start of file
    lineD = ActD_AddDomOD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included...AddDomOD. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML1_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomOD; ./gcta --reml --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML2_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomOD; ./gcta --reml --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML3_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomOD; ./gcta --reml --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML4_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomOD; ./gcta --reml --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML5_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomOD; ./gcta --reml --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML6_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomOD; ./gcta --reml --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML7_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomOD; ./gcta --reml --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML8_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomOD; ./gcta --reml --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML9_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomOD; ./gcta --reml --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML10_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomOD; ./gcta --reml --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML11_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomOD; ./gcta --reml --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML12_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomOD; ./gcta --reml --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML13_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomOD; ./gcta --reml --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML14_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomOD; ./gcta --reml --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML15_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomOD; ./gcta --reml --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML16_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomOD; ./gcta --reml --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML17_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomOD; ./gcta --reml --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML18_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomOD; ./gcta --reml --pheno MAIN_L_AddDomOD.fam --mpheno 4 --grm MAIN_GREML_L_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomOD"
                                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included...AddDomOD. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML1_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomOD; ./gcta --reml --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML2_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomOD; ./gcta --reml --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML3_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomOD; ./gcta --reml --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML4_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomOD; ./gcta --reml --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML5_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomOD; ./gcta --reml --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML6_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomOD; ./gcta --reml --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML7_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomOD; ./gcta --reml --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML8_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomOD; ./gcta --reml --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML9_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomOD; ./gcta --reml --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML10_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomOD; ./gcta --reml --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML11_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomOD; ./gcta --reml --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML12_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomOD; ./gcta --reml --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML13_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomOD; ./gcta --reml --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML14_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomOD; ./gcta --reml --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML15_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomOD; ./gcta --reml --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML16_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomOD; ./gcta --reml --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML17_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomOD; ./gcta --reml --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML18_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomOD; ./gcta --reml --pheno MAIN_L_AddDomOD.fam --mpheno 4 --grm MAIN_GREML_L_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomOD"
                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates...AddDomOD. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML1_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomOD; ./gcta --reml --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML2_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomOD; ./gcta --reml --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML3_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomOD; ./gcta --reml --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML4_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomOD; ./gcta --reml --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML5_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomOD; ./gcta --reml --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML6_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomOD; ./gcta --reml --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML7_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomOD; ./gcta --reml --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML8_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomOD; ./gcta --reml --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML9_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomOD; ./gcta --reml --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML10_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomOD; ./gcta --reml --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML11_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomOD; ./gcta --reml --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML12_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomOD; ./gcta --reml --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML13_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomOD; ./gcta --reml --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML14_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomOD; ./gcta --reml --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML15_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomOD; ./gcta --reml --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML16_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomOD; ./gcta --reml --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML17_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomOD; ./gcta --reml --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML18_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomOD; ./gcta --reml --pheno MAIN.fam --mpheno 4 --grm MAIN_GREML_L_AddDomOD --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomOD"
                                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(15)

with open("Prog4_select_act.txt", "a+") as ActD_AddDomOD:
    ActD_AddDomOD.seek(0) # set position to start of file
    lineD = ActD_AddDomOD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included...AddDomOD. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML1_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomOD; ./gcta --reml --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML2_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomOD; ./gcta --reml --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML3_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomOD; ./gcta --reml --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML4_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomOD; ./gcta --reml --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML5_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomOD; ./gcta --reml --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML6_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomOD; ./gcta --reml --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML7_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomOD; ./gcta --reml --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML8_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomOD; ./gcta --reml --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML9_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomOD; ./gcta --reml --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML10_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomOD; ./gcta --reml --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML11_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomOD; ./gcta --reml --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML12_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomOD; ./gcta --reml --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML13_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomOD; ./gcta --reml --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML14_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomOD; ./gcta --reml --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML15_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomOD; ./gcta --reml --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML16_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomOD; ./gcta --reml --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML17_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomOD; ./gcta --reml --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML18_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomOD; ./gcta --reml --pheno MAIN_L_AddDomOD.fam --mpheno 4 --grm MAIN_GREML_L_AddDomOD --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomOD"
                                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included...AddDomOD. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML1_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomOD; ./gcta --reml --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML2_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomOD; ./gcta --reml --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML3_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomOD; ./gcta --reml --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML4_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomOD; ./gcta --reml --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML5_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomOD; ./gcta --reml --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML6_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomOD; ./gcta --reml --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML7_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomOD; ./gcta --reml --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML8_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomOD; ./gcta --reml --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML9_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomOD; ./gcta --reml --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML10_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomOD; ./gcta --reml --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML11_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomOD; ./gcta --reml --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML12_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomOD; ./gcta --reml --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML13_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomOD; ./gcta --reml --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML14_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomOD; ./gcta --reml --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML15_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomOD; ./gcta --reml --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML16_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomOD; ./gcta --reml --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML17_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomOD; ./gcta --reml --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML18_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomOD; ./gcta --reml --pheno MAIN_L_AddDomOD.fam --mpheno 4 --grm MAIN_GREML_L_AddDomOD --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomOD"
                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates...AddDomOD. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML1_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomOD; ./gcta --reml --pheno SUBSET_L2_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML2_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomOD; ./gcta --reml --pheno SUBSET_L3_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML3_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomOD; ./gcta --reml --pheno SUBSET_L4_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML4_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomOD; ./gcta --reml --pheno SUBSET_L5_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML5_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomOD; ./gcta --reml --pheno SUBSET_L6_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML6_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomOD; ./gcta --reml --pheno SUBSET_L7_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML7_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomOD; ./gcta --reml --pheno SUBSET_L8_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML8_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomOD; ./gcta --reml --pheno SUBSET_L9_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML9_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomOD; ./gcta --reml --pheno SUBSET_L10_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML10_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomOD; ./gcta --reml --pheno SUBSET_L11_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML11_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomOD; ./gcta --reml --pheno SUBSET_L12_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML12_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomOD; ./gcta --reml --pheno SUBSET_L13_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML13_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomOD; ./gcta --reml --pheno SUBSET_L14_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML14_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomOD; ./gcta --reml --pheno SUBSET_L15_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML15_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomOD; ./gcta --reml --pheno SUBSET_L16_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML16_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomOD; ./gcta --reml --pheno SUBSET_L17_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML17_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomOD; ./gcta --reml --pheno SUBSET_L18_AddDomOD.fam --mpheno 4 --grm SUBSET_GREML18_AddDomOD --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomOD; ./gcta --reml --pheno MAIN.fam --mpheno 4 --grm MAIN_GREML_L_AddDomOD --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomOD"
                                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)









with open("Prog4_select_act.txt", "a+") as ActD_AddDomODHet:
    ActD_AddDomODHet.seek(0) # set position to start of file
    lineD = ActD_AddDomODHet.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model...AddDomODHet. scenario"...')
            command = "./gcta --bfile SUBSET_L1_AddDomODHet --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML1_AddDomODHet; ./gcta --bfile SUBSET_L2_AddDomODHet --autosome --autosome-num 90 --make-grm --thread-num 20 --out SUBSET_GREML2_AddDomODHet; ./gcta --bfile SUBSET_L3_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML3_AddDomODHet; ./gcta --bfile SUBSET_L4_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML4_AddDomODHet; ./gcta --bfile SUBSET_L5_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML5_AddDomODHet; ./gcta --bfile SUBSET_L6_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML6_AddDomODHet; ./gcta --bfile SUBSET_L7_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML7_AddDomODHet; ./gcta --bfile SUBSET_L8_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML8_AddDomODHet; ./gcta --bfile SUBSET_L9_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML9_AddDomODHet; ./gcta --bfile SUBSET_L10_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML10_AddDomODHet; ./gcta --bfile SUBSET_L11_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML11_AddDomODHet; ./gcta --bfile SUBSET_L12_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML12_AddDomODHet; ./gcta --bfile SUBSET_L13_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML13_AddDomODHet; ./gcta --bfile SUBSET_L14_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML14_AddDomODHet; ./gcta --bfile SUBSET_L15_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML15_AddDomODHet; ./gcta --bfile SUBSET_L16_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML16_AddDomODHet; ./gcta --bfile SUBSET_L17_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML17_AddDomODHet; ./gcta --bfile SUBSET_L18_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out SUBSET_GREML18_AddDomODHet; ./gcta --bfile MAIN_L_AddDomODHet --autosome --autosome-num 90 --make-grm  --thread-num 20 --out MAIN_GREML_L_AddDomODHet"
                        
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())

with open("Prog4_select_act.txt", "a+") as ActD_AddDomODHet:
    ActD_AddDomODHet.seek(0) # set position to start of file
    lineD = ActD_AddDomODHet.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            print(' "Preparing kinship matrices for GCTA-GREML_model...AddDomODHet. scenario"...')
            command = "./gcta --bfile SUBSET_L1_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML1_AddDomODHet; ./gcta --bfile SUBSET_L2_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML2_AddDomODHet; ./gcta --bfile SUBSET_L3_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML3_AddDomODHet; ./gcta --bfile SUBSET_L4_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML4_AddDomODHet; ./gcta --bfile SUBSET_L5_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML5_AddDomODHet; ./gcta --bfile SUBSET_L6_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML6_AddDomODHet; ./gcta --bfile SUBSET_L7_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML7_AddDomODHet; ./gcta --bfile SUBSET_L8_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML8_AddDomODHet; ./gcta --bfile SUBSET_L9_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML9_AddDomODHet; ./gcta --bfile SUBSET_L10_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML10_AddDomODHet; ./gcta --bfile SUBSET_L11_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML11_AddDomODHet; ./gcta --bfile SUBSET_L12_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML12_AddDomODHet; ./gcta --bfile SUBSET_L13_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML13_AddDomODHet; ./gcta --bfile SUBSET_L14_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML14_AddDomODHet; ./gcta --bfile SUBSET_L15_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML15_AddDomODHet; ./gcta --bfile SUBSET_L16_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML16_AddDomODHet; ./gcta --bfile SUBSET_L17_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML17_AddDomODHet; ./gcta --bfile SUBSET_L18_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out SUBSET_GREML18_AddDomODHet; ./gcta --bfile MAIN_L_AddDomODHet --autosome --autosome-num 90 --make-grm-inbred --thread-num 20 --out MAIN_GREML_L_AddDomODHet"
                        
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())



            
with open("Prog4_select_act.txt", "a+") as ActD_AddDomODHet:
    ActD_AddDomODHet.seek(0) # set position to start of file
    lineD = ActD_AddDomODHet.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included...AddDomODHet. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML1_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomODHet; ./gcta --reml --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML2_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomODHet; ./gcta --reml --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML3_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomODHet; ./gcta --reml --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML4_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomODHet; ./gcta --reml --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML5_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomODHet; ./gcta --reml --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML6_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomODHet; ./gcta --reml --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML7_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomODHet; ./gcta --reml --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML8_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomODHet; ./gcta --reml --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML9_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomODHet; ./gcta --reml --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML10_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomODHet; ./gcta --reml --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML11_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomODHet; ./gcta --reml --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML12_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomODHet; ./gcta --reml --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML13_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomODHet; ./gcta --reml --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML14_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomODHet; ./gcta --reml --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML15_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomODHet; ./gcta --reml --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML16_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomODHet; ./gcta --reml --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML17_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomODHet; ./gcta --reml --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML18_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomODHet; ./gcta --reml --pheno MAIN_L_AddDomODHet.fam --mpheno 4 --grm MAIN_GREML_L_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomODHet"
                                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included...AddDomODHet. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML1_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomODHet; ./gcta --reml --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML2_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomODHet; ./gcta --reml --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML3_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomODHet; ./gcta --reml --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML4_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomODHet; ./gcta --reml --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML5_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomODHet; ./gcta --reml --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML6_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomODHet; ./gcta --reml --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML7_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomODHet; ./gcta --reml --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML8_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomODHet; ./gcta --reml --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML9_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomODHet; ./gcta --reml --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML10_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomODHet; ./gcta --reml --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML11_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomODHet; ./gcta --reml --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML12_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomODHet; ./gcta --reml --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML13_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomODHet; ./gcta --reml --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML14_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomODHet; ./gcta --reml --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML15_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomODHet; ./gcta --reml --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML16_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomODHet; ./gcta --reml --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML17_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomODHet; ./gcta --reml --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML18_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomODHet; ./gcta --reml --pheno MAIN_L_AddDomODHet.fam --mpheno 4 --grm MAIN_GREML_L_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomODHet"
                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates...AddDomODHet. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML1_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomODHet; ./gcta --reml --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML2_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomODHet; ./gcta --reml --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML3_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomODHet; ./gcta --reml --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML4_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomODHet; ./gcta --reml --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML5_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomODHet; ./gcta --reml --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML6_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomODHet; ./gcta --reml --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML7_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomODHet; ./gcta --reml --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML8_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomODHet; ./gcta --reml --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML9_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomODHet; ./gcta --reml --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML10_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomODHet; ./gcta --reml --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML11_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomODHet; ./gcta --reml --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML12_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomODHet; ./gcta --reml --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML13_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomODHet; ./gcta --reml --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML14_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomODHet; ./gcta --reml --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML15_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomODHet; ./gcta --reml --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML16_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomODHet; ./gcta --reml --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML17_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomODHet; ./gcta --reml --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML18_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomODHet; ./gcta --reml --pheno MAIN.fam --mpheno 4 --grm MAIN_GREML_L_AddDomODHet --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomODHet"
                                                                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)                                                     

with open("Prog4_select_act.txt", "a+") as ActD_AddDomODHet:
    ActD_AddDomODHet.seek(0) # set position to start of file
    lineD = ActD_AddDomODHet.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if fileqCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...quantitative covariate included...AddDomODHet. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML1_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomODHet; ./gcta --reml --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML2_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomODHet; ./gcta --reml --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML3_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomODHet; ./gcta --reml --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML4_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomODHet; ./gcta --reml --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML5_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomODHet; ./gcta --reml --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML6_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomODHet; ./gcta --reml --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML7_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomODHet; ./gcta --reml --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML8_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomODHet; ./gcta --reml --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML9_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomODHet; ./gcta --reml --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML10_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomODHet; ./gcta --reml --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML11_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomODHet; ./gcta --reml --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML12_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomODHet; ./gcta --reml --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML13_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomODHet; ./gcta --reml --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML14_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomODHet; ./gcta --reml --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML15_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomODHet; ./gcta --reml --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML16_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomODHet; ./gcta --reml --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML17_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomODHet; ./gcta --reml --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML18_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomODHet; ./gcta --reml --pheno MAIN_L_AddDomODHet.fam --mpheno 4 --grm MAIN_GREML_L_AddDomODHet --qcovar qCovar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomODHet"
                                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)

               
            elif filecCovar_greml.exists ():
                print(' "Heritability profiling by GCTA-GREML_model...categorical covariate included...AddDomODHet. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML1_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomODHet; ./gcta --reml --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML2_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomODHet; ./gcta --reml --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML3_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomODHet; ./gcta --reml --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML4_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomODHet; ./gcta --reml --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML5_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomODHet; ./gcta --reml --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML6_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomODHet; ./gcta --reml --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML7_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomODHet; ./gcta --reml --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML8_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomODHet; ./gcta --reml --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML9_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomODHet; ./gcta --reml --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML10_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomODHet; ./gcta --reml --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML11_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomODHet; ./gcta --reml --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML12_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomODHet; ./gcta --reml --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML13_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomODHet; ./gcta --reml --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML14_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomODHet; ./gcta --reml --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML15_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomODHet; ./gcta --reml --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML16_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomODHet; ./gcta --reml --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML17_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomODHet; ./gcta --reml --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML18_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomODHet; ./gcta --reml --pheno MAIN_L_AddDomODHet.fam --mpheno 4 --grm MAIN_GREML_L_AddDomODHet --covar Covar_greml --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomODHet"
                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)
               
            else:
                print(' "Heritability profiling by GCTA-GREML_model...without covariates...AddDomODHet. scenario"...')
                command = "./gcta --reml --pheno SUBSET_L1_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML1_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML1_AddDomODHet; ./gcta --reml --pheno SUBSET_L2_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML2_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML2_AddDomODHet; ./gcta --reml --pheno SUBSET_L3_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML3_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML3_AddDomODHet; ./gcta --reml --pheno SUBSET_L4_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML4_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML4_AddDomODHet; ./gcta --reml --pheno SUBSET_L5_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML5_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML5_AddDomODHet; ./gcta --reml --pheno SUBSET_L6_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML6_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML6_AddDomODHet; ./gcta --reml --pheno SUBSET_L7_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML7_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML7_AddDomODHet; ./gcta --reml --pheno SUBSET_L8_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML8_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML8_AddDomODHet; ./gcta --reml --pheno SUBSET_L9_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML9_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML9_AddDomODHet; ./gcta --reml --pheno SUBSET_L10_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML10_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML10_AddDomODHet; ./gcta --reml --pheno SUBSET_L11_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML11_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML11_AddDomODHet; ./gcta --reml --pheno SUBSET_L12_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML12_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML12_AddDomODHet; ./gcta --reml --pheno SUBSET_L13_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML13_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML13_AddDomODHet; ./gcta --reml --pheno SUBSET_L14_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML14_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML14_AddDomODHet; ./gcta --reml --pheno SUBSET_L15_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML15_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML15_AddDomODHet; ./gcta --reml --pheno SUBSET_L16_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML16_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML16_AddDomODHet; ./gcta --reml --pheno SUBSET_L17_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML17_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML17_AddDomODHet; ./gcta --reml --pheno SUBSET_L18_AddDomODHet.fam --mpheno 4 --grm SUBSET_GREML18_AddDomODHet --reml-maxit 1000 --thread-num 20 --out SUBSET_GREML18_AddDomODHet; ./gcta --reml --pheno MAIN.fam --mpheno 4 --grm MAIN_GREML_L_AddDomODHet --reml-maxit 1000 --thread-num 20 --out MAIN_GREML_L_AddDomODHet"
                                                                                
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                time.sleep(10)                                                     














with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineGGG = ActGGG.read().splitlines()
    if valueG in lineGGG:
        if Prog4.exists ():
            print(' "Preparing kinship matrices (standardized relatedness matrix)for GEMMA_model"...Add. scenario"...')
            command = "./gemma -gk 2 -bfile SUBSET_L1_Add -o SUBSET_L1_Add; ./gemma -gk 2 -bfile SUBSET_L2_Add -o SUBSET_L2_Add; ./gemma -gk 2 -bfile SUBSET_L3_Add -o SUBSET_L3_Add; ./gemma -gk 2 -bfile SUBSET_L4_Add -o SUBSET_L4_Add; ./gemma -gk 2 -bfile SUBSET_L5_Add -o SUBSET_L5_Add; ./gemma -gk 2 -bfile SUBSET_L6_Add -o SUBSET_L6_Add; ./gemma -gk 2 -bfile SUBSET_L7_Add -o SUBSET_L7_Add; ./gemma -gk 2 -bfile SUBSET_L8_Add -o SUBSET_L8_Add; ./gemma -gk 2 -bfile SUBSET_L9_Add -o SUBSET_L9_Add; ./gemma -gk 2 -bfile SUBSET_L10_Add -o SUBSET_L10_Add; ./gemma -gk 2 -bfile SUBSET_L11_Add -o SUBSET_L11_Add; ./gemma -gk 2 -bfile SUBSET_L12_Add -o SUBSET_L12_Add; ./gemma -gk 2 -bfile SUBSET_L13_Add -o SUBSET_L13_Add; ./gemma -gk 2 -bfile SUBSET_L14_Add -o SUBSET_L14_Add; ./gemma -gk 2 -bfile SUBSET_L15_Add -o SUBSET_L15_Add; ./gemma -gk 2 -bfile SUBSET_L16_Add -o SUBSET_L16_Add; ./gemma -gk 2 -bfile SUBSET_L17_Add -o SUBSET_L17_Add; ./gemma -gk 2 -bfile SUBSET_L18_Add -o SUBSET_L18_Add; ./gemma -gk 2 -bfile MAIN -o MAIN_Add; mv output/*.sXX.txt  .; rm output/*.log.txt; rmdir output"
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineG = ActGGG.read().splitlines()
    if valueG in lineG:
        if Prog4.exists ():
            if fileCovar_gemma.exists ():
                print(' "Heritability profiling by Gemma_model...covariates included"...Add. scenario"...')
                command = "./gemma -bfile SUBSET_L1_Add -k SUBSET_L1_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add1; ./gemma -bfile SUBSET_L2_Add -k SUBSET_L2_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add2; ./gemma -bfile SUBSET_L3_Add -k SUBSET_L3_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add3; ./gemma -bfile SUBSET_L4_Add -k SUBSET_L4_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add4; ./gemma -bfile SUBSET_L5_Add -k SUBSET_L5_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add5; ./gemma -bfile SUBSET_L6_Add -k SUBSET_L6_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add6; ./gemma -bfile SUBSET_L7_Add -k SUBSET_L7_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add7; ./gemma -bfile SUBSET_L8_Add -k SUBSET_L8_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add8; ./gemma -bfile SUBSET_L9_Add -k SUBSET_L9_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add9; ./gemma -bfile SUBSET_L10_Add -k SUBSET_L10_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add10; ./gemma -bfile SUBSET_L11_Add -k SUBSET_L11_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add11; ./gemma -bfile SUBSET_L12_Add -k SUBSET_L12_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add12; ./gemma -bfile SUBSET_L13_Add -k SUBSET_L13_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add13; ./gemma -bfile SUBSET_L14_Add -k SUBSET_L14_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add14; ./gemma -bfile SUBSET_L15_Add -k SUBSET_L15_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add15; ./gemma -bfile SUBSET_L16_Add -k SUBSET_L16_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add16; ./gemma -bfile SUBSET_L17_Add -k SUBSET_L17_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add17; ./gemma -bfile SUBSET_L18_Add -k SUBSET_L18_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add18; ./gemma -bfile MAIN -k MAIN_Add.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_Add; mv output/*.log.txt  .; rm output/*.txt; rmdir output"
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Gemma_model...without covariates"...Add. scenario"...')
                command = "./gemma -bfile SUBSET_L1_Add -k SUBSET_L1_Add.sXX.txt -lmm 1 -o subset_gemma_Add1; ./gemma -bfile SUBSET_L2_Add -k SUBSET_L2_Add.sXX.txt -lmm 1 -o subset_gemma_Add2; ./gemma -bfile SUBSET_L3_Add -k SUBSET_L3_Add.sXX.txt -lmm 1 -o subset_gemma_Add3; ./gemma -bfile SUBSET_L4_Add -k SUBSET_L4_Add.sXX.txt -lmm 1 -o subset_gemma_Add4; ./gemma -bfile SUBSET_L5_Add -k SUBSET_L5_Add.sXX.txt -lmm 1 -o subset_gemma_Add5; ./gemma -bfile SUBSET_L6_Add -k SUBSET_L6_Add.sXX.txt -lmm 1 -o subset_gemma_Add6; ./gemma -bfile SUBSET_L7_Add -k SUBSET_L7_Add.sXX.txt -lmm 1 -o subset_gemma_Add7; ./gemma -bfile SUBSET_L8_Add -k SUBSET_L8_Add.sXX.txt -lmm 1 -o subset_gemma_Add8; ./gemma -bfile SUBSET_L9_Add -k SUBSET_L9_Add.sXX.txt -lmm 1 -o subset_gemma_Add9; ./gemma -bfile SUBSET_L10_Add -k SUBSET_L10_Add.sXX.txt -lmm 1 -o subset_gemma_Add10; ./gemma -bfile SUBSET_L11_Add -k SUBSET_L11_Add.sXX.txt -lmm 1 -o subset_gemma_Add11; ./gemma -bfile SUBSET_L12_Add -k SUBSET_L12_Add.sXX.txt -lmm 1 -o subset_gemma_Add12; ./gemma -bfile SUBSET_L13_Add -k SUBSET_L13_Add.sXX.txt -lmm 1 -o subset_gemma_Add13; ./gemma -bfile SUBSET_L14_Add -k SUBSET_L14_Add.sXX.txt -lmm 1 -o subset_gemma_Add14; ./gemma -bfile SUBSET_L15_Add -k SUBSET_L15_Add.sXX.txt -lmm 1 -o subset_gemma_Add15; ./gemma -bfile SUBSET_L16_Add -k SUBSET_L16_Add.sXX.txt -lmm 1 -o subset_gemma_Add16; ./gemma -bfile SUBSET_L17_Add -k SUBSET_L17_Add.sXX.txt -lmm 1 -o subset_gemma_Add17; ./gemma -bfile SUBSET_L18_Add -k SUBSET_L18_Add.sXX.txt -lmm 1 -o subset_gemma_Add18; ./gemma -bfile MAIN -k MAIN_Add.sXX.txt -lmm 1 -o subset_gemma_Add; mv output/*.log.txt  .; rm output/*.txt; rmdir output"
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineG = ActGGG.read().splitlines()
    if valueG in lineG:
        if Prog4.exists ():
            print(' "Heritability profiling by Gemma_model...covariates included"...Add. scenario"...')
            command = """sed -i '1,25d' subset_gemma_Add1.log.txt; sed -i '3,12d' subset_gemma_Add1.log.txt; awk '{print $9}' subset_gemma_Add1.log.txt > new_xxx && mv new_xxx subset_gemma_Add1.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add1.log.txt > new_xxx && cat subset_gemma_Add1.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add1.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add1.log.txt > new_yyy && mv new_yyy subset_gemma_Add1.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add1.log.txt > new_yyy && mv new_yyy subset_gemma_Add1.log.txt && awk '{print $4}' subset_gemma_Add1.log.txt  > new_yyy && mv new_yyy subset_gemma_Add1.log.csv; rm new_xxx; rm subset_gemma_Add1.log.txt; sed -i '1,25d' subset_gemma_Add2.log.txt; sed -i '3,12d' subset_gemma_Add2.log.txt; awk '{print $9}' subset_gemma_Add2.log.txt > new_xxx && mv new_xxx subset_gemma_Add2.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add2.log.txt > new_xxx && cat subset_gemma_Add2.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add2.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add2.log.txt > new_yyy && mv new_yyy subset_gemma_Add2.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add2.log.txt > new_yyy && mv new_yyy subset_gemma_Add2.log.txt && awk '{print $4}' subset_gemma_Add2.log.txt  > new_yyy && mv new_yyy subset_gemma_Add2.log.csv; rm new_xxx; rm subset_gemma_Add2.log.txt; sed -i '1,25d' subset_gemma_Add3.log.txt; sed -i '3,12d' subset_gemma_Add3.log.txt; awk '{print $9}' subset_gemma_Add3.log.txt > new_xxx && mv new_xxx subset_gemma_Add3.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add3.log.txt > new_xxx && cat subset_gemma_Add3.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add3.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add3.log.txt > new_yyy && mv new_yyy subset_gemma_Add3.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add3.log.txt > new_yyy && mv new_yyy subset_gemma_Add3.log.txt && awk '{print $4}' subset_gemma_Add3.log.txt  > new_yyy && mv new_yyy subset_gemma_Add3.log.csv; rm new_xxx; rm subset_gemma_Add3.log.txt; sed -i '1,25d' subset_gemma_Add4.log.txt; sed -i '3,12d' subset_gemma_Add4.log.txt; awk '{print $9}' subset_gemma_Add4.log.txt > new_xxx && mv new_xxx subset_gemma_Add4.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add4.log.txt > new_xxx && cat subset_gemma_Add4.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add4.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add4.log.txt > new_yyy && mv new_yyy subset_gemma_Add4.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add4.log.txt > new_yyy && mv new_yyy subset_gemma_Add4.log.txt && awk '{print $4}' subset_gemma_Add4.log.txt  > new_yyy && mv new_yyy subset_gemma_Add4.log.csv; rm new_xxx; rm subset_gemma_Add4.log.txt; sed -i '1,25d' subset_gemma_Add5.log.txt; sed -i '3,12d' subset_gemma_Add5.log.txt; awk '{print $9}' subset_gemma_Add5.log.txt > new_xxx && mv new_xxx subset_gemma_Add5.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add5.log.txt > new_xxx && cat subset_gemma_Add5.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add5.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add5.log.txt > new_yyy && mv new_yyy subset_gemma_Add5.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add5.log.txt > new_yyy && mv new_yyy subset_gemma_Add5.log.txt && awk '{print $4}' subset_gemma_Add5.log.txt  > new_yyy && mv new_yyy subset_gemma_Add5.log.csv; rm new_xxx; rm subset_gemma_Add5.log.txt; sed -i '1,25d' subset_gemma_Add6.log.txt; sed -i '3,12d' subset_gemma_Add6.log.txt; awk '{print $9}' subset_gemma_Add6.log.txt > new_xxx && mv new_xxx subset_gemma_Add6.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add6.log.txt > new_xxx && cat subset_gemma_Add6.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add6.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add6.log.txt > new_yyy && mv new_yyy subset_gemma_Add6.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add6.log.txt > new_yyy && mv new_yyy subset_gemma_Add6.log.txt && awk '{print $4}' subset_gemma_Add6.log.txt  > new_yyy && mv new_yyy subset_gemma_Add6.log.csv; rm new_xxx; rm subset_gemma_Add6.log.txt; sed -i '1,25d' subset_gemma_Add7.log.txt; sed -i '3,12d' subset_gemma_Add7.log.txt; awk '{print $9}' subset_gemma_Add7.log.txt > new_xxx && mv new_xxx subset_gemma_Add7.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add7.log.txt > new_xxx && cat subset_gemma_Add7.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add7.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add7.log.txt > new_yyy && mv new_yyy subset_gemma_Add7.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add7.log.txt > new_yyy && mv new_yyy subset_gemma_Add7.log.txt && awk '{print $4}' subset_gemma_Add7.log.txt  > new_yyy && mv new_yyy subset_gemma_Add7.log.csv; rm new_xxx; rm subset_gemma_Add7.log.txt; sed -i '1,25d' subset_gemma_Add8.log.txt; sed -i '3,12d' subset_gemma_Add8.log.txt; awk '{print $9}' subset_gemma_Add8.log.txt > new_xxx && mv new_xxx subset_gemma_Add8.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add8.log.txt > new_xxx && cat subset_gemma_Add8.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add8.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add8.log.txt > new_yyy && mv new_yyy subset_gemma_Add8.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add8.log.txt > new_yyy && mv new_yyy subset_gemma_Add8.log.txt && awk '{print $4}' subset_gemma_Add8.log.txt  > new_yyy && mv new_yyy subset_gemma_Add8.log.csv; rm new_xxx; rm subset_gemma_Add8.log.txt; sed -i '1,25d' subset_gemma_Add9.log.txt; sed -i '3,12d' subset_gemma_Add9.log.txt; awk '{print $9}' subset_gemma_Add9.log.txt > new_xxx && mv new_xxx subset_gemma_Add9.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add9.log.txt > new_xxx && cat subset_gemma_Add9.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add9.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add9.log.txt > new_yyy && mv new_yyy subset_gemma_Add9.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add9.log.txt > new_yyy && mv new_yyy subset_gemma_Add9.log.txt && awk '{print $4}' subset_gemma_Add9.log.txt  > new_yyy && mv new_yyy subset_gemma_Add9.log.csv; rm new_xxx; rm subset_gemma_Add9.log.txt; sed -i '1,25d' subset_gemma_Add10.log.txt; sed -i '3,12d' subset_gemma_Add10.log.txt; awk '{print $9}' subset_gemma_Add10.log.txt > new_xxx && mv new_xxx subset_gemma_Add10.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add10.log.txt > new_xxx && cat subset_gemma_Add10.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add10.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add10.log.txt > new_yyy && mv new_yyy subset_gemma_Add10.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add10.log.txt > new_yyy && mv new_yyy subset_gemma_Add10.log.txt && awk '{print $4}' subset_gemma_Add10.log.txt  > new_yyy && mv new_yyy subset_gemma_Add10.log.csv; rm new_xxx; rm subset_gemma_Add10.log.txt; sed -i '1,25d' subset_gemma_Add11.log.txt; sed -i '3,12d' subset_gemma_Add11.log.txt; awk '{print $9}' subset_gemma_Add11.log.txt > new_xxx && mv new_xxx subset_gemma_Add11.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add11.log.txt > new_xxx && cat subset_gemma_Add11.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add11.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add11.log.txt > new_yyy && mv new_yyy subset_gemma_Add11.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add11.log.txt > new_yyy && mv new_yyy subset_gemma_Add11.log.txt && awk '{print $4}' subset_gemma_Add11.log.txt  > new_yyy && mv new_yyy subset_gemma_Add11.log.csv; rm new_xxx; rm subset_gemma_Add11.log.txt; sed -i '1,25d' subset_gemma_Add12.log.txt; sed -i '3,12d' subset_gemma_Add12.log.txt; awk '{print $9}' subset_gemma_Add12.log.txt > new_xxx && mv new_xxx subset_gemma_Add12.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add12.log.txt > new_xxx && cat subset_gemma_Add12.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add12.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add12.log.txt > new_yyy && mv new_yyy subset_gemma_Add12.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add12.log.txt > new_yyy && mv new_yyy subset_gemma_Add12.log.txt && awk '{print $4}' subset_gemma_Add12.log.txt  > new_yyy && mv new_yyy subset_gemma_Add12.log.csv; rm new_xxx; rm subset_gemma_Add12.log.txt; sed -i '1,25d' subset_gemma_Add13.log.txt; sed -i '3,12d' subset_gemma_Add13.log.txt; awk '{print $9}' subset_gemma_Add13.log.txt > new_xxx && mv new_xxx subset_gemma_Add13.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add13.log.txt > new_xxx && cat subset_gemma_Add13.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add13.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add13.log.txt > new_yyy && mv new_yyy subset_gemma_Add13.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add13.log.txt > new_yyy && mv new_yyy subset_gemma_Add13.log.txt && awk '{print $4}' subset_gemma_Add13.log.txt  > new_yyy && mv new_yyy subset_gemma_Add13.log.csv; rm new_xxx; rm subset_gemma_Add13.log.txt; sed -i '1,25d' subset_gemma_Add14.log.txt; sed -i '3,12d' subset_gemma_Add14.log.txt; awk '{print $9}' subset_gemma_Add14.log.txt > new_xxx && mv new_xxx subset_gemma_Add14.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add14.log.txt > new_xxx && cat subset_gemma_Add14.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add14.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add14.log.txt > new_yyy && mv new_yyy subset_gemma_Add14.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add14.log.txt > new_yyy && mv new_yyy subset_gemma_Add14.log.txt && awk '{print $4}' subset_gemma_Add14.log.txt  > new_yyy && mv new_yyy subset_gemma_Add14.log.csv; rm new_xxx; rm subset_gemma_Add14.log.txt; sed -i '1,25d' subset_gemma_Add15.log.txt; sed -i '3,12d' subset_gemma_Add15.log.txt; awk '{print $9}' subset_gemma_Add15.log.txt > new_xxx && mv new_xxx subset_gemma_Add15.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add15.log.txt > new_xxx && cat subset_gemma_Add15.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add15.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add15.log.txt > new_yyy && mv new_yyy subset_gemma_Add15.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add15.log.txt > new_yyy && mv new_yyy subset_gemma_Add15.log.txt && awk '{print $4}' subset_gemma_Add15.log.txt  > new_yyy && mv new_yyy subset_gemma_Add15.log.csv; rm new_xxx; rm subset_gemma_Add15.log.txt; sed -i '1,25d' subset_gemma_Add16.log.txt; sed -i '3,12d' subset_gemma_Add16.log.txt; awk '{print $9}' subset_gemma_Add16.log.txt > new_xxx && mv new_xxx subset_gemma_Add16.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add16.log.txt > new_xxx && cat subset_gemma_Add16.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add16.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add16.log.txt > new_yyy && mv new_yyy subset_gemma_Add16.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add16.log.txt > new_yyy && mv new_yyy subset_gemma_Add16.log.txt && awk '{print $4}' subset_gemma_Add16.log.txt  > new_yyy && mv new_yyy subset_gemma_Add16.log.csv; rm new_xxx; rm subset_gemma_Add16.log.txt; sed -i '1,25d' subset_gemma_Add17.log.txt; sed -i '3,12d' subset_gemma_Add17.log.txt; awk '{print $9}' subset_gemma_Add17.log.txt > new_xxx && mv new_xxx subset_gemma_Add17.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add17.log.txt > new_xxx && cat subset_gemma_Add17.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add17.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add17.log.txt > new_yyy && mv new_yyy subset_gemma_Add17.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add17.log.txt > new_yyy && mv new_yyy subset_gemma_Add17.log.txt && awk '{print $4}' subset_gemma_Add17.log.txt  > new_yyy && mv new_yyy subset_gemma_Add17.log.csv; rm new_xxx; rm subset_gemma_Add17.log.txt; sed -i '1,25d' subset_gemma_Add18.log.txt; sed -i '3,12d' subset_gemma_Add18.log.txt; awk '{print $9}' subset_gemma_Add18.log.txt > new_xxx && mv new_xxx subset_gemma_Add18.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add18.log.txt > new_xxx && cat subset_gemma_Add18.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add18.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add18.log.txt > new_yyy && mv new_yyy subset_gemma_Add18.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add18.log.txt > new_yyy && mv new_yyy subset_gemma_Add18.log.txt && awk '{print $4}' subset_gemma_Add18.log.txt  > new_yyy && mv new_yyy subset_gemma_Add18.log.csv; rm new_xxx; rm subset_gemma_Add18.log.txt; sed -i '1,25d' subset_gemma_Add.log.txt; sed -i '3,12d' subset_gemma_Add.log.txt; awk '{print $9}' subset_gemma_Add.log.txt > new_xxx && mv new_xxx subset_gemma_Add.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_Add.log.txt > new_xxx && cat subset_gemma_Add.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_Add.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_Add.log.txt > new_yyy && mv new_yyy subset_gemma_Add.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_Add.log.txt > new_yyy && mv new_yyy subset_gemma_Add.log.txt && awk '{print $4}' subset_gemma_Add.log.txt  > new_yyy && mv new_yyy subset_gemma_Add.log.csv; rm new_xxx; rm subset_gemma_Add.log.txt"""
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())










with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineGGG = ActGGG.read().splitlines()
    if valueG in lineGGG:
        if Prog4.exists ():
            print(' "Preparing kinship matrices (standardized relatedness matrix)for GEMMA_model"...AddDom. scenario"...')
            command = "./gemma -gk 2 -bfile SUBSET_L1_AddDom -o SUBSET_L1_AddDom; ./gemma -gk 2 -bfile SUBSET_L2_AddDom -o SUBSET_L2_AddDom; ./gemma -gk 2 -bfile SUBSET_L3_AddDom -o SUBSET_L3_AddDom; ./gemma -gk 2 -bfile SUBSET_L4_AddDom -o SUBSET_L4_AddDom; ./gemma -gk 2 -bfile SUBSET_L5_AddDom -o SUBSET_L5_AddDom; ./gemma -gk 2 -bfile SUBSET_L6_AddDom -o SUBSET_L6_AddDom; ./gemma -gk 2 -bfile SUBSET_L7_AddDom -o SUBSET_L7_AddDom; ./gemma -gk 2 -bfile SUBSET_L8_AddDom -o SUBSET_L8_AddDom; ./gemma -gk 2 -bfile SUBSET_L9_AddDom -o SUBSET_L9_AddDom; ./gemma -gk 2 -bfile SUBSET_L10_AddDom -o SUBSET_L10_AddDom; ./gemma -gk 2 -bfile SUBSET_L11_AddDom -o SUBSET_L11_AddDom; ./gemma -gk 2 -bfile SUBSET_L12_AddDom -o SUBSET_L12_AddDom; ./gemma -gk 2 -bfile SUBSET_L13_AddDom -o SUBSET_L13_AddDom; ./gemma -gk 2 -bfile SUBSET_L14_AddDom -o SUBSET_L14_AddDom; ./gemma -gk 2 -bfile SUBSET_L15_AddDom -o SUBSET_L15_AddDom; ./gemma -gk 2 -bfile SUBSET_L16_AddDom -o SUBSET_L16_AddDom; ./gemma -gk 2 -bfile SUBSET_L17_AddDom -o SUBSET_L17_AddDom; ./gemma -gk 2 -bfile SUBSET_L18_AddDom -o SUBSET_L18_AddDom; ./gemma -gk 2 -bfile MAIN_AD -o MAIN_AddDom; mv output/*.sXX.txt  .; rm output/*.log.txt; rmdir output"
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineG = ActGGG.read().splitlines()
    if valueG in lineG:
        if Prog4.exists ():
            if fileCovar_gemma.exists ():
                print(' "Heritability profiling by Gemma_model...covariates included"...AddDom. scenario"...')
                command = "./gemma -bfile SUBSET_L1_AddDom -k SUBSET_L1_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom1; ./gemma -bfile SUBSET_L2_AddDom -k SUBSET_L2_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom2; ./gemma -bfile SUBSET_L3_AddDom -k SUBSET_L3_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom3; ./gemma -bfile SUBSET_L4_AddDom -k SUBSET_L4_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom4; ./gemma -bfile SUBSET_L5_AddDom -k SUBSET_L5_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom5; ./gemma -bfile SUBSET_L6_AddDom -k SUBSET_L6_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom6; ./gemma -bfile SUBSET_L7_AddDom -k SUBSET_L7_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom7; ./gemma -bfile SUBSET_L8_AddDom -k SUBSET_L8_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom8; ./gemma -bfile SUBSET_L9_AddDom -k SUBSET_L9_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom9; ./gemma -bfile SUBSET_L10_AddDom -k SUBSET_L10_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom10; ./gemma -bfile SUBSET_L11_AddDom -k SUBSET_L11_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom11; ./gemma -bfile SUBSET_L12_AddDom -k SUBSET_L12_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom12; ./gemma -bfile SUBSET_L13_AddDom -k SUBSET_L13_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom13; ./gemma -bfile SUBSET_L14_AddDom -k SUBSET_L14_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom14; ./gemma -bfile SUBSET_L15_AddDom -k SUBSET_L15_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom15; ./gemma -bfile SUBSET_L16_AddDom -k SUBSET_L16_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom16; ./gemma -bfile SUBSET_L17_AddDom -k SUBSET_L17_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom17; ./gemma -bfile SUBSET_L18_AddDom -k SUBSET_L18_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom18; ./gemma -bfile MAIN_AD -k MAIN_AddDom.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDom; mv output/*.log.txt  .; rm output/*.txt; rmdir output"
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Gemma_model...without covariates"...AddDom. scenario"...')
                command = "./gemma -bfile SUBSET_L1_AddDom -k SUBSET_L1_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom1; ./gemma -bfile SUBSET_L2_AddDom -k SUBSET_L2_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom2; ./gemma -bfile SUBSET_L3_AddDom -k SUBSET_L3_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom3; ./gemma -bfile SUBSET_L4_AddDom -k SUBSET_L4_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom4; ./gemma -bfile SUBSET_L5_AddDom -k SUBSET_L5_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom5; ./gemma -bfile SUBSET_L6_AddDom -k SUBSET_L6_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom6; ./gemma -bfile SUBSET_L7_AddDom -k SUBSET_L7_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom7; ./gemma -bfile SUBSET_L8_AddDom -k SUBSET_L8_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom8; ./gemma -bfile SUBSET_L9_AddDom -k SUBSET_L9_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom9; ./gemma -bfile SUBSET_L10_AddDom -k SUBSET_L10_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom10; ./gemma -bfile SUBSET_L11_AddDom -k SUBSET_L11_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom11; ./gemma -bfile SUBSET_L12_AddDom -k SUBSET_L12_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom12; ./gemma -bfile SUBSET_L13_AddDom -k SUBSET_L13_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom13; ./gemma -bfile SUBSET_L14_AddDom -k SUBSET_L14_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom14; ./gemma -bfile SUBSET_L15_AddDom -k SUBSET_L15_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom15; ./gemma -bfile SUBSET_L16_AddDom -k SUBSET_L16_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom16; ./gemma -bfile SUBSET_L17_AddDom -k SUBSET_L17_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom17; ./gemma -bfile SUBSET_L18_AddDom -k SUBSET_L18_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom18; ./gemma -bfile MAIN_AD -k MAIN_AddDom.sXX.txt -lmm 1 -o subset_gemma_AddDom; mv output/*.log.txt  .; rm output/*.txt; rmdir output"
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineG = ActGGG.read().splitlines()
    if valueG in lineG:
        if Prog4.exists ():
            print(' "Heritability profiling by Gemma_model...covariates included"...AddDom. scenario"...')
            command = """sed -i '1,25d' subset_gemma_AddDom1.log.txt; sed -i '3,12d' subset_gemma_AddDom1.log.txt; awk '{print $9}' subset_gemma_AddDom1.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom1.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom1.log.txt > new_xxx && cat subset_gemma_AddDom1.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom1.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom1.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom1.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom1.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom1.log.txt && awk '{print $4}' subset_gemma_AddDom1.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom1.log.csv; rm new_xxx; rm subset_gemma_AddDom1.log.txt; sed -i '1,25d' subset_gemma_AddDom2.log.txt; sed -i '3,12d' subset_gemma_AddDom2.log.txt; awk '{print $9}' subset_gemma_AddDom2.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom2.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom2.log.txt > new_xxx && cat subset_gemma_AddDom2.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom2.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom2.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom2.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom2.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom2.log.txt && awk '{print $4}' subset_gemma_AddDom2.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom2.log.csv; rm new_xxx; rm subset_gemma_AddDom2.log.txt; sed -i '1,25d' subset_gemma_AddDom3.log.txt; sed -i '3,12d' subset_gemma_AddDom3.log.txt; awk '{print $9}' subset_gemma_AddDom3.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom3.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom3.log.txt > new_xxx && cat subset_gemma_AddDom3.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom3.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom3.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom3.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom3.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom3.log.txt && awk '{print $4}' subset_gemma_AddDom3.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom3.log.csv; rm new_xxx; rm subset_gemma_AddDom3.log.txt; sed -i '1,25d' subset_gemma_AddDom4.log.txt; sed -i '3,12d' subset_gemma_AddDom4.log.txt; awk '{print $9}' subset_gemma_AddDom4.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom4.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom4.log.txt > new_xxx && cat subset_gemma_AddDom4.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom4.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom4.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom4.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom4.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom4.log.txt && awk '{print $4}' subset_gemma_AddDom4.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom4.log.csv; rm new_xxx; rm subset_gemma_AddDom4.log.txt; sed -i '1,25d' subset_gemma_AddDom5.log.txt; sed -i '3,12d' subset_gemma_AddDom5.log.txt; awk '{print $9}' subset_gemma_AddDom5.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom5.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom5.log.txt > new_xxx && cat subset_gemma_AddDom5.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom5.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom5.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom5.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom5.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom5.log.txt && awk '{print $4}' subset_gemma_AddDom5.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom5.log.csv; rm new_xxx; rm subset_gemma_AddDom5.log.txt; sed -i '1,25d' subset_gemma_AddDom6.log.txt; sed -i '3,12d' subset_gemma_AddDom6.log.txt; awk '{print $9}' subset_gemma_AddDom6.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom6.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom6.log.txt > new_xxx && cat subset_gemma_AddDom6.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom6.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom6.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom6.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom6.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom6.log.txt && awk '{print $4}' subset_gemma_AddDom6.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom6.log.csv; rm new_xxx; rm subset_gemma_AddDom6.log.txt; sed -i '1,25d' subset_gemma_AddDom7.log.txt; sed -i '3,12d' subset_gemma_AddDom7.log.txt; awk '{print $9}' subset_gemma_AddDom7.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom7.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom7.log.txt > new_xxx && cat subset_gemma_AddDom7.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom7.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom7.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom7.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom7.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom7.log.txt && awk '{print $4}' subset_gemma_AddDom7.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom7.log.csv; rm new_xxx; rm subset_gemma_AddDom7.log.txt; sed -i '1,25d' subset_gemma_AddDom8.log.txt; sed -i '3,12d' subset_gemma_AddDom8.log.txt; awk '{print $9}' subset_gemma_AddDom8.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom8.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom8.log.txt > new_xxx && cat subset_gemma_AddDom8.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom8.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom8.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom8.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom8.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom8.log.txt && awk '{print $4}' subset_gemma_AddDom8.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom8.log.csv; rm new_xxx; rm subset_gemma_AddDom8.log.txt; sed -i '1,25d' subset_gemma_AddDom9.log.txt; sed -i '3,12d' subset_gemma_AddDom9.log.txt; awk '{print $9}' subset_gemma_AddDom9.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom9.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom9.log.txt > new_xxx && cat subset_gemma_AddDom9.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom9.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom9.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom9.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom9.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom9.log.txt && awk '{print $4}' subset_gemma_AddDom9.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom9.log.csv; rm new_xxx; rm subset_gemma_AddDom9.log.txt; sed -i '1,25d' subset_gemma_AddDom10.log.txt; sed -i '3,12d' subset_gemma_AddDom10.log.txt; awk '{print $9}' subset_gemma_AddDom10.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom10.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom10.log.txt > new_xxx && cat subset_gemma_AddDom10.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom10.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom10.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom10.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom10.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom10.log.txt && awk '{print $4}' subset_gemma_AddDom10.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom10.log.csv; rm new_xxx; rm subset_gemma_AddDom10.log.txt; sed -i '1,25d' subset_gemma_AddDom11.log.txt; sed -i '3,12d' subset_gemma_AddDom11.log.txt; awk '{print $9}' subset_gemma_AddDom11.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom11.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom11.log.txt > new_xxx && cat subset_gemma_AddDom11.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom11.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom11.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom11.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom11.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom11.log.txt && awk '{print $4}' subset_gemma_AddDom11.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom11.log.csv; rm new_xxx; rm subset_gemma_AddDom11.log.txt; sed -i '1,25d' subset_gemma_AddDom12.log.txt; sed -i '3,12d' subset_gemma_AddDom12.log.txt; awk '{print $9}' subset_gemma_AddDom12.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom12.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom12.log.txt > new_xxx && cat subset_gemma_AddDom12.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom12.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom12.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom12.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom12.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom12.log.txt && awk '{print $4}' subset_gemma_AddDom12.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom12.log.csv; rm new_xxx; rm subset_gemma_AddDom12.log.txt; sed -i '1,25d' subset_gemma_AddDom13.log.txt; sed -i '3,12d' subset_gemma_AddDom13.log.txt; awk '{print $9}' subset_gemma_AddDom13.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom13.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom13.log.txt > new_xxx && cat subset_gemma_AddDom13.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom13.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom13.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom13.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom13.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom13.log.txt && awk '{print $4}' subset_gemma_AddDom13.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom13.log.csv; rm new_xxx; rm subset_gemma_AddDom13.log.txt; sed -i '1,25d' subset_gemma_AddDom14.log.txt; sed -i '3,12d' subset_gemma_AddDom14.log.txt; awk '{print $9}' subset_gemma_AddDom14.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom14.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom14.log.txt > new_xxx && cat subset_gemma_AddDom14.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom14.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom14.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom14.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom14.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom14.log.txt && awk '{print $4}' subset_gemma_AddDom14.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom14.log.csv; rm new_xxx; rm subset_gemma_AddDom14.log.txt; sed -i '1,25d' subset_gemma_AddDom15.log.txt; sed -i '3,12d' subset_gemma_AddDom15.log.txt; awk '{print $9}' subset_gemma_AddDom15.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom15.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom15.log.txt > new_xxx && cat subset_gemma_AddDom15.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom15.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom15.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom15.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom15.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom15.log.txt && awk '{print $4}' subset_gemma_AddDom15.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom15.log.csv; rm new_xxx; rm subset_gemma_AddDom15.log.txt; sed -i '1,25d' subset_gemma_AddDom16.log.txt; sed -i '3,12d' subset_gemma_AddDom16.log.txt; awk '{print $9}' subset_gemma_AddDom16.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom16.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom16.log.txt > new_xxx && cat subset_gemma_AddDom16.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom16.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom16.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom16.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom16.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom16.log.txt && awk '{print $4}' subset_gemma_AddDom16.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom16.log.csv; rm new_xxx; rm subset_gemma_AddDom16.log.txt; sed -i '1,25d' subset_gemma_AddDom17.log.txt; sed -i '3,12d' subset_gemma_AddDom17.log.txt; awk '{print $9}' subset_gemma_AddDom17.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom17.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom17.log.txt > new_xxx && cat subset_gemma_AddDom17.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom17.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom17.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom17.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom17.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom17.log.txt && awk '{print $4}' subset_gemma_AddDom17.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom17.log.csv; rm new_xxx; rm subset_gemma_AddDom17.log.txt; sed -i '1,25d' subset_gemma_AddDom18.log.txt; sed -i '3,12d' subset_gemma_AddDom18.log.txt; awk '{print $9}' subset_gemma_AddDom18.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom18.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom18.log.txt > new_xxx && cat subset_gemma_AddDom18.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom18.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom18.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom18.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom18.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom18.log.txt && awk '{print $4}' subset_gemma_AddDom18.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom18.log.csv; rm new_xxx; rm subset_gemma_AddDom18.log.txt; sed -i '1,25d' subset_gemma_AddDom.log.txt; sed -i '3,12d' subset_gemma_AddDom.log.txt; awk '{print $9}' subset_gemma_AddDom.log.txt > new_xxx && mv new_xxx subset_gemma_AddDom.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDom.log.txt > new_xxx && cat subset_gemma_AddDom.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDom.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDom.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDom.log.txt > new_yyy && mv new_yyy subset_gemma_AddDom.log.txt && awk '{print $4}' subset_gemma_AddDom.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDom.log.csv; rm new_xxx; rm subset_gemma_AddDom.log.txt"""
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())








with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineGGG = ActGGG.read().splitlines()
    if valueG in lineGGG:
        if Prog4.exists ():
            print(' "Preparing kinship matrices (standardized relatedness matrix)for GEMMA_model"...AddDomOD. scenario"...')
            command = "./gemma -gk 2 -bfile SUBSET_L1_AddDomOD -o SUBSET_L1_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L2_AddDomOD -o SUBSET_L2_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L3_AddDomOD -o SUBSET_L3_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L4_AddDomOD -o SUBSET_L4_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L5_AddDomOD -o SUBSET_L5_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L6_AddDomOD -o SUBSET_L6_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L7_AddDomOD -o SUBSET_L7_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L8_AddDomOD -o SUBSET_L8_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L9_AddDomOD -o SUBSET_L9_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L10_AddDomOD -o SUBSET_L10_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L11_AddDomOD -o SUBSET_L11_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L12_AddDomOD -o SUBSET_L12_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L13_AddDomOD -o SUBSET_L13_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L14_AddDomOD -o SUBSET_L14_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L15_AddDomOD -o SUBSET_L15_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L16_AddDomOD -o SUBSET_L16_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L17_AddDomOD -o SUBSET_L17_AddDomOD; ./gemma -gk 2 -bfile SUBSET_L18_AddDomOD -o SUBSET_L18_AddDomOD; ./gemma -gk 2 -bfile MAIN_ADO -o MAIN_AddDomOD; mv output/*.sXX.txt  .; rm output/*.log.txt; rmdir output"
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineG = ActGGG.read().splitlines()
    if valueG in lineG:
        if Prog4.exists ():
            if fileCovar_gemma.exists ():
                print(' "Heritability profiling by Gemma_model...covariates included"...AddDomOD. scenario"...')
                command = "./gemma -bfile SUBSET_L1_AddDomOD -k SUBSET_L1_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD1; ./gemma -bfile SUBSET_L2_AddDomOD -k SUBSET_L2_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD2; ./gemma -bfile SUBSET_L3_AddDomOD -k SUBSET_L3_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD3; ./gemma -bfile SUBSET_L4_AddDomOD -k SUBSET_L4_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD4; ./gemma -bfile SUBSET_L5_AddDomOD -k SUBSET_L5_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD5; ./gemma -bfile SUBSET_L6_AddDomOD -k SUBSET_L6_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD6; ./gemma -bfile SUBSET_L7_AddDomOD -k SUBSET_L7_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD7; ./gemma -bfile SUBSET_L8_AddDomOD -k SUBSET_L8_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD8; ./gemma -bfile SUBSET_L9_AddDomOD -k SUBSET_L9_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD9; ./gemma -bfile SUBSET_L10_AddDomOD -k SUBSET_L10_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD10; ./gemma -bfile SUBSET_L11_AddDomOD -k SUBSET_L11_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD11; ./gemma -bfile SUBSET_L12_AddDomOD -k SUBSET_L12_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD12; ./gemma -bfile SUBSET_L13_AddDomOD -k SUBSET_L13_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD13; ./gemma -bfile SUBSET_L14_AddDomOD -k SUBSET_L14_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD14; ./gemma -bfile SUBSET_L15_AddDomOD -k SUBSET_L15_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD15; ./gemma -bfile SUBSET_L16_AddDomOD -k SUBSET_L16_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD16; ./gemma -bfile SUBSET_L17_AddDomOD -k SUBSET_L17_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD17; ./gemma -bfile SUBSET_L18_AddDomOD -k SUBSET_L18_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD18; ./gemma -bfile MAIN_ADO -k MAIN_AddDomOD.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomOD; mv output/*.log.txt  .; rm output/*.txt; rmdir output"
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Gemma_model...without covariates"...AddDomOD. scenario"...')
                command = "./gemma -bfile SUBSET_L1_AddDomOD -k SUBSET_L1_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD1; ./gemma -bfile SUBSET_L2_AddDomOD -k SUBSET_L2_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD2; ./gemma -bfile SUBSET_L3_AddDomOD -k SUBSET_L3_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD3; ./gemma -bfile SUBSET_L4_AddDomOD -k SUBSET_L4_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD4; ./gemma -bfile SUBSET_L5_AddDomOD -k SUBSET_L5_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD5; ./gemma -bfile SUBSET_L6_AddDomOD -k SUBSET_L6_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD6; ./gemma -bfile SUBSET_L7_AddDomOD -k SUBSET_L7_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD7; ./gemma -bfile SUBSET_L8_AddDomOD -k SUBSET_L8_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD8; ./gemma -bfile SUBSET_L9_AddDomOD -k SUBSET_L9_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD9; ./gemma -bfile SUBSET_L10_AddDomOD -k SUBSET_L10_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD10; ./gemma -bfile SUBSET_L11_AddDomOD -k SUBSET_L11_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD11; ./gemma -bfile SUBSET_L12_AddDomOD -k SUBSET_L12_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD12; ./gemma -bfile SUBSET_L13_AddDomOD -k SUBSET_L13_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD13; ./gemma -bfile SUBSET_L14_AddDomOD -k SUBSET_L14_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD14; ./gemma -bfile SUBSET_L15_AddDomOD -k SUBSET_L15_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD15; ./gemma -bfile SUBSET_L16_AddDomOD -k SUBSET_L16_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD16; ./gemma -bfile SUBSET_L17_AddDomOD -k SUBSET_L17_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD17; ./gemma -bfile SUBSET_L18_AddDomOD -k SUBSET_L18_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD18; ./gemma -bfile MAIN_ADO -k MAIN_AddDomOD.sXX.txt -lmm 1 -o subset_gemma_AddDomOD; mv output/*.log.txt  .; rm output/*.txt; rmdir output"
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineG = ActGGG.read().splitlines()
    if valueG in lineG:
        if Prog4.exists ():
            print(' "Heritability profiling by Gemma_model...covariates included"...AddDomOD. scenario"...')
            command = """sed -i '1,25d' subset_gemma_AddDomOD1.log.txt; sed -i '3,12d' subset_gemma_AddDomOD1.log.txt; awk '{print $9}' subset_gemma_AddDomOD1.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD1.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD1.log.txt > new_xxx && cat subset_gemma_AddDomOD1.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD1.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD1.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD1.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD1.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD1.log.txt && awk '{print $4}' subset_gemma_AddDomOD1.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD1.log.csv; rm new_xxx; rm subset_gemma_AddDomOD1.log.txt; sed -i '1,25d' subset_gemma_AddDomOD2.log.txt; sed -i '3,12d' subset_gemma_AddDomOD2.log.txt; awk '{print $9}' subset_gemma_AddDomOD2.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD2.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD2.log.txt > new_xxx && cat subset_gemma_AddDomOD2.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD2.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD2.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD2.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD2.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD2.log.txt && awk '{print $4}' subset_gemma_AddDomOD2.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD2.log.csv; rm new_xxx; rm subset_gemma_AddDomOD2.log.txt; sed -i '1,25d' subset_gemma_AddDomOD3.log.txt; sed -i '3,12d' subset_gemma_AddDomOD3.log.txt; awk '{print $9}' subset_gemma_AddDomOD3.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD3.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD3.log.txt > new_xxx && cat subset_gemma_AddDomOD3.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD3.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD3.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD3.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD3.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD3.log.txt && awk '{print $4}' subset_gemma_AddDomOD3.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD3.log.csv; rm new_xxx; rm subset_gemma_AddDomOD3.log.txt; sed -i '1,25d' subset_gemma_AddDomOD4.log.txt; sed -i '3,12d' subset_gemma_AddDomOD4.log.txt; awk '{print $9}' subset_gemma_AddDomOD4.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD4.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD4.log.txt > new_xxx && cat subset_gemma_AddDomOD4.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD4.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD4.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD4.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD4.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD4.log.txt && awk '{print $4}' subset_gemma_AddDomOD4.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD4.log.csv; rm new_xxx; rm subset_gemma_AddDomOD4.log.txt; sed -i '1,25d' subset_gemma_AddDomOD5.log.txt; sed -i '3,12d' subset_gemma_AddDomOD5.log.txt; awk '{print $9}' subset_gemma_AddDomOD5.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD5.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD5.log.txt > new_xxx && cat subset_gemma_AddDomOD5.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD5.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD5.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD5.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD5.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD5.log.txt && awk '{print $4}' subset_gemma_AddDomOD5.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD5.log.csv; rm new_xxx; rm subset_gemma_AddDomOD5.log.txt; sed -i '1,25d' subset_gemma_AddDomOD6.log.txt; sed -i '3,12d' subset_gemma_AddDomOD6.log.txt; awk '{print $9}' subset_gemma_AddDomOD6.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD6.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD6.log.txt > new_xxx && cat subset_gemma_AddDomOD6.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD6.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD6.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD6.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD6.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD6.log.txt && awk '{print $4}' subset_gemma_AddDomOD6.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD6.log.csv; rm new_xxx; rm subset_gemma_AddDomOD6.log.txt; sed -i '1,25d' subset_gemma_AddDomOD7.log.txt; sed -i '3,12d' subset_gemma_AddDomOD7.log.txt; awk '{print $9}' subset_gemma_AddDomOD7.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD7.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD7.log.txt > new_xxx && cat subset_gemma_AddDomOD7.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD7.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD7.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD7.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD7.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD7.log.txt && awk '{print $4}' subset_gemma_AddDomOD7.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD7.log.csv; rm new_xxx; rm subset_gemma_AddDomOD7.log.txt; sed -i '1,25d' subset_gemma_AddDomOD8.log.txt; sed -i '3,12d' subset_gemma_AddDomOD8.log.txt; awk '{print $9}' subset_gemma_AddDomOD8.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD8.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD8.log.txt > new_xxx && cat subset_gemma_AddDomOD8.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD8.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD8.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD8.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD8.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD8.log.txt && awk '{print $4}' subset_gemma_AddDomOD8.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD8.log.csv; rm new_xxx; rm subset_gemma_AddDomOD8.log.txt; sed -i '1,25d' subset_gemma_AddDomOD9.log.txt; sed -i '3,12d' subset_gemma_AddDomOD9.log.txt; awk '{print $9}' subset_gemma_AddDomOD9.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD9.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD9.log.txt > new_xxx && cat subset_gemma_AddDomOD9.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD9.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD9.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD9.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD9.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD9.log.txt && awk '{print $4}' subset_gemma_AddDomOD9.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD9.log.csv; rm new_xxx; rm subset_gemma_AddDomOD9.log.txt; sed -i '1,25d' subset_gemma_AddDomOD10.log.txt; sed -i '3,12d' subset_gemma_AddDomOD10.log.txt; awk '{print $9}' subset_gemma_AddDomOD10.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD10.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD10.log.txt > new_xxx && cat subset_gemma_AddDomOD10.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD10.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD10.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD10.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD10.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD10.log.txt && awk '{print $4}' subset_gemma_AddDomOD10.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD10.log.csv; rm new_xxx; rm subset_gemma_AddDomOD10.log.txt; sed -i '1,25d' subset_gemma_AddDomOD11.log.txt; sed -i '3,12d' subset_gemma_AddDomOD11.log.txt; awk '{print $9}' subset_gemma_AddDomOD11.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD11.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD11.log.txt > new_xxx && cat subset_gemma_AddDomOD11.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD11.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD11.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD11.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD11.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD11.log.txt && awk '{print $4}' subset_gemma_AddDomOD11.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD11.log.csv; rm new_xxx; rm subset_gemma_AddDomOD11.log.txt; sed -i '1,25d' subset_gemma_AddDomOD12.log.txt; sed -i '3,12d' subset_gemma_AddDomOD12.log.txt; awk '{print $9}' subset_gemma_AddDomOD12.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD12.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD12.log.txt > new_xxx && cat subset_gemma_AddDomOD12.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD12.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD12.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD12.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD12.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD12.log.txt && awk '{print $4}' subset_gemma_AddDomOD12.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD12.log.csv; rm new_xxx; rm subset_gemma_AddDomOD12.log.txt; sed -i '1,25d' subset_gemma_AddDomOD13.log.txt; sed -i '3,12d' subset_gemma_AddDomOD13.log.txt; awk '{print $9}' subset_gemma_AddDomOD13.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD13.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD13.log.txt > new_xxx && cat subset_gemma_AddDomOD13.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD13.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD13.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD13.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD13.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD13.log.txt && awk '{print $4}' subset_gemma_AddDomOD13.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD13.log.csv; rm new_xxx; rm subset_gemma_AddDomOD13.log.txt; sed -i '1,25d' subset_gemma_AddDomOD14.log.txt; sed -i '3,12d' subset_gemma_AddDomOD14.log.txt; awk '{print $9}' subset_gemma_AddDomOD14.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD14.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD14.log.txt > new_xxx && cat subset_gemma_AddDomOD14.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD14.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD14.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD14.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD14.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD14.log.txt && awk '{print $4}' subset_gemma_AddDomOD14.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD14.log.csv; rm new_xxx; rm subset_gemma_AddDomOD14.log.txt; sed -i '1,25d' subset_gemma_AddDomOD15.log.txt; sed -i '3,12d' subset_gemma_AddDomOD15.log.txt; awk '{print $9}' subset_gemma_AddDomOD15.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD15.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD15.log.txt > new_xxx && cat subset_gemma_AddDomOD15.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD15.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD15.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD15.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD15.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD15.log.txt && awk '{print $4}' subset_gemma_AddDomOD15.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD15.log.csv; rm new_xxx; rm subset_gemma_AddDomOD15.log.txt; sed -i '1,25d' subset_gemma_AddDomOD16.log.txt; sed -i '3,12d' subset_gemma_AddDomOD16.log.txt; awk '{print $9}' subset_gemma_AddDomOD16.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD16.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD16.log.txt > new_xxx && cat subset_gemma_AddDomOD16.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD16.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD16.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD16.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD16.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD16.log.txt && awk '{print $4}' subset_gemma_AddDomOD16.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD16.log.csv; rm new_xxx; rm subset_gemma_AddDomOD16.log.txt; sed -i '1,25d' subset_gemma_AddDomOD17.log.txt; sed -i '3,12d' subset_gemma_AddDomOD17.log.txt; awk '{print $9}' subset_gemma_AddDomOD17.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD17.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD17.log.txt > new_xxx && cat subset_gemma_AddDomOD17.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD17.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD17.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD17.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD17.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD17.log.txt && awk '{print $4}' subset_gemma_AddDomOD17.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD17.log.csv; rm new_xxx; rm subset_gemma_AddDomOD17.log.txt; sed -i '1,25d' subset_gemma_AddDomOD18.log.txt; sed -i '3,12d' subset_gemma_AddDomOD18.log.txt; awk '{print $9}' subset_gemma_AddDomOD18.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD18.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD18.log.txt > new_xxx && cat subset_gemma_AddDomOD18.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD18.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD18.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD18.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD18.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD18.log.txt && awk '{print $4}' subset_gemma_AddDomOD18.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD18.log.csv; rm new_xxx; rm subset_gemma_AddDomOD18.log.txt; sed -i '1,25d' subset_gemma_AddDomOD.log.txt; sed -i '3,12d' subset_gemma_AddDomOD.log.txt; awk '{print $9}' subset_gemma_AddDomOD.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomOD.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomOD.log.txt > new_xxx && cat subset_gemma_AddDomOD.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomOD.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomOD.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomOD.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomOD.log.txt && awk '{print $4}' subset_gemma_AddDomOD.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomOD.log.csv; rm new_xxx; rm subset_gemma_AddDomOD.log.txt"""
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())









with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineGGG = ActGGG.read().splitlines()
    if valueG in lineGGG:
        if Prog4.exists ():
            print(' "Preparing kinship matrices (standardized relatedness matrix)for GEMMA_model"...AddDomODHet. scenario"...')
            command = "./gemma -gk 2 -bfile SUBSET_L1_AddDomODHet -o SUBSET_L1_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L2_AddDomODHet -o SUBSET_L2_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L3_AddDomODHet -o SUBSET_L3_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L4_AddDomODHet -o SUBSET_L4_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L5_AddDomODHet -o SUBSET_L5_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L6_AddDomODHet -o SUBSET_L6_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L7_AddDomODHet -o SUBSET_L7_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L8_AddDomODHet -o SUBSET_L8_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L9_AddDomODHet -o SUBSET_L9_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L10_AddDomODHet -o SUBSET_L10_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L11_AddDomODHet -o SUBSET_L11_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L12_AddDomODHet -o SUBSET_L12_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L13_AddDomODHet -o SUBSET_L13_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L14_AddDomODHet -o SUBSET_L14_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L15_AddDomODHet -o SUBSET_L15_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L16_AddDomODHet -o SUBSET_L16_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L17_AddDomODHet -o SUBSET_L17_AddDomODHet; ./gemma -gk 2 -bfile SUBSET_L18_AddDomODHet -o SUBSET_L18_AddDomODHet; ./gemma -gk 2 -bfile MAIN_ADOH -o MAIN_AddDomODHet; mv output/*.sXX.txt  .; rm output/*.log.txt; rmdir output"
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())
        
    
with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineG = ActGGG.read().splitlines()
    if valueG in lineG:
        if Prog4.exists ():
            if fileCovar_gemma.exists ():
                print(' "Heritability profiling by Gemma_model...covariates included"...AddDomODHet. scenario"...')
                command = "./gemma -bfile SUBSET_L1_AddDomODHet -k SUBSET_L1_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet1; ./gemma -bfile SUBSET_L2_AddDomODHet -k SUBSET_L2_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet2; ./gemma -bfile SUBSET_L3_AddDomODHet -k SUBSET_L3_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet3; ./gemma -bfile SUBSET_L4_AddDomODHet -k SUBSET_L4_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet4; ./gemma -bfile SUBSET_L5_AddDomODHet -k SUBSET_L5_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet5; ./gemma -bfile SUBSET_L6_AddDomODHet -k SUBSET_L6_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet6; ./gemma -bfile SUBSET_L7_AddDomODHet -k SUBSET_L7_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet7; ./gemma -bfile SUBSET_L8_AddDomODHet -k SUBSET_L8_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet8; ./gemma -bfile SUBSET_L9_AddDomODHet -k SUBSET_L9_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet9; ./gemma -bfile SUBSET_L10_AddDomODHet -k SUBSET_L10_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet10; ./gemma -bfile SUBSET_L11_AddDomODHet -k SUBSET_L11_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet11; ./gemma -bfile SUBSET_L12_AddDomODHet -k SUBSET_L12_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet12; ./gemma -bfile SUBSET_L13_AddDomODHet -k SUBSET_L13_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet13; ./gemma -bfile SUBSET_L14_AddDomODHet -k SUBSET_L14_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet14; ./gemma -bfile SUBSET_L15_AddDomODHet -k SUBSET_L15_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet15; ./gemma -bfile SUBSET_L16_AddDomODHet -k SUBSET_L16_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet16; ./gemma -bfile SUBSET_L17_AddDomODHet -k SUBSET_L17_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet17; ./gemma -bfile SUBSET_L18_AddDomODHet -k SUBSET_L18_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet18; ./gemma -bfile MAIN_ADOH -k MAIN_AddDomODHet.sXX.txt -c Covar_gemma -lmm 1 -o subset_gemma_AddDomODHet; mv output/*.log.txt  .; rm output/*.txt; rmdir output"
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
            else:
                print(' "Heritability profiling by Gemma_model...without covariates"...AddDomODHet. scenario"...')
                command = "./gemma -bfile SUBSET_L1_AddDomODHet -k SUBSET_L1_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet1; ./gemma -bfile SUBSET_L2_AddDomODHet -k SUBSET_L2_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet2; ./gemma -bfile SUBSET_L3_AddDomODHet -k SUBSET_L3_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet3; ./gemma -bfile SUBSET_L4_AddDomODHet -k SUBSET_L4_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet4; ./gemma -bfile SUBSET_L5_AddDomODHet -k SUBSET_L5_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet5; ./gemma -bfile SUBSET_L6_AddDomODHet -k SUBSET_L6_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet6; ./gemma -bfile SUBSET_L7_AddDomODHet -k SUBSET_L7_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet7; ./gemma -bfile SUBSET_L8_AddDomODHet -k SUBSET_L8_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet8; ./gemma -bfile SUBSET_L9_AddDomODHet -k SUBSET_L9_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet9; ./gemma -bfile SUBSET_L10_AddDomODHet -k SUBSET_L10_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet10; ./gemma -bfile SUBSET_L11_AddDomODHet -k SUBSET_L11_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet11; ./gemma -bfile SUBSET_L12_AddDomODHet -k SUBSET_L12_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet12; ./gemma -bfile SUBSET_L13_AddDomODHet -k SUBSET_L13_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet13; ./gemma -bfile SUBSET_L14_AddDomODHet -k SUBSET_L14_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet14; ./gemma -bfile SUBSET_L15_AddDomODHet -k SUBSET_L15_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet15; ./gemma -bfile SUBSET_L16_AddDomODHet -k SUBSET_L16_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet16; ./gemma -bfile SUBSET_L17_AddDomODHet -k SUBSET_L17_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet17; ./gemma -bfile SUBSET_L18_AddDomODHet -k SUBSET_L18_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet18; ./gemma -bfile MAIN_ADOH -k MAIN_AddDomODHet.sXX.txt -lmm 1 -o subset_gemma_AddDomODHet; mv output/*.log.txt  .; rm output/*.txt; rmdir output"
                ret = subprocess.run(command, capture_output=True, shell=True)
                # before Python 3.7:
                # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
                print(ret.stdout.decode())
                
with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineG = ActGGG.read().splitlines()
    if valueG in lineG:
        if Prog4.exists ():
            print(' "Heritability profiling by Gemma_model...covariates included"...AddDomODHet. scenario"...')
            command = """sed -i '1,25d' subset_gemma_AddDomODHet1.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet1.log.txt; awk '{print $9}' subset_gemma_AddDomODHet1.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet1.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet1.log.txt > new_xxx && cat subset_gemma_AddDomODHet1.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet1.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet1.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet1.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet1.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet1.log.txt && awk '{print $4}' subset_gemma_AddDomODHet1.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet1.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet1.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet2.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet2.log.txt; awk '{print $9}' subset_gemma_AddDomODHet2.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet2.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet2.log.txt > new_xxx && cat subset_gemma_AddDomODHet2.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet2.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet2.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet2.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet2.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet2.log.txt && awk '{print $4}' subset_gemma_AddDomODHet2.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet2.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet2.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet3.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet3.log.txt; awk '{print $9}' subset_gemma_AddDomODHet3.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet3.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet3.log.txt > new_xxx && cat subset_gemma_AddDomODHet3.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet3.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet3.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet3.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet3.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet3.log.txt && awk '{print $4}' subset_gemma_AddDomODHet3.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet3.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet3.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet4.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet4.log.txt; awk '{print $9}' subset_gemma_AddDomODHet4.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet4.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet4.log.txt > new_xxx && cat subset_gemma_AddDomODHet4.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet4.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet4.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet4.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet4.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet4.log.txt && awk '{print $4}' subset_gemma_AddDomODHet4.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet4.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet4.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet5.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet5.log.txt; awk '{print $9}' subset_gemma_AddDomODHet5.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet5.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet5.log.txt > new_xxx && cat subset_gemma_AddDomODHet5.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet5.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet5.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet5.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet5.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet5.log.txt && awk '{print $4}' subset_gemma_AddDomODHet5.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet5.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet5.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet6.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet6.log.txt; awk '{print $9}' subset_gemma_AddDomODHet6.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet6.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet6.log.txt > new_xxx && cat subset_gemma_AddDomODHet6.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet6.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet6.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet6.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet6.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet6.log.txt && awk '{print $4}' subset_gemma_AddDomODHet6.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet6.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet6.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet7.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet7.log.txt; awk '{print $9}' subset_gemma_AddDomODHet7.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet7.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet7.log.txt > new_xxx && cat subset_gemma_AddDomODHet7.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet7.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet7.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet7.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet7.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet7.log.txt && awk '{print $4}' subset_gemma_AddDomODHet7.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet7.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet7.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet8.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet8.log.txt; awk '{print $9}' subset_gemma_AddDomODHet8.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet8.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet8.log.txt > new_xxx && cat subset_gemma_AddDomODHet8.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet8.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet8.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet8.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet8.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet8.log.txt && awk '{print $4}' subset_gemma_AddDomODHet8.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet8.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet8.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet9.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet9.log.txt; awk '{print $9}' subset_gemma_AddDomODHet9.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet9.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet9.log.txt > new_xxx && cat subset_gemma_AddDomODHet9.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet9.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet9.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet9.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet9.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet9.log.txt && awk '{print $4}' subset_gemma_AddDomODHet9.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet9.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet9.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet10.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet10.log.txt; awk '{print $9}' subset_gemma_AddDomODHet10.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet10.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet10.log.txt > new_xxx && cat subset_gemma_AddDomODHet10.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet10.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet10.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet10.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet10.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet10.log.txt && awk '{print $4}' subset_gemma_AddDomODHet10.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet10.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet10.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet11.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet11.log.txt; awk '{print $9}' subset_gemma_AddDomODHet11.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet11.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet11.log.txt > new_xxx && cat subset_gemma_AddDomODHet11.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet11.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet11.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet11.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet11.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet11.log.txt && awk '{print $4}' subset_gemma_AddDomODHet11.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet11.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet11.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet12.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet12.log.txt; awk '{print $9}' subset_gemma_AddDomODHet12.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet12.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet12.log.txt > new_xxx && cat subset_gemma_AddDomODHet12.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet12.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet12.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet12.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet12.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet12.log.txt && awk '{print $4}' subset_gemma_AddDomODHet12.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet12.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet12.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet13.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet13.log.txt; awk '{print $9}' subset_gemma_AddDomODHet13.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet13.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet13.log.txt > new_xxx && cat subset_gemma_AddDomODHet13.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet13.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet13.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet13.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet13.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet13.log.txt && awk '{print $4}' subset_gemma_AddDomODHet13.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet13.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet13.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet14.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet14.log.txt; awk '{print $9}' subset_gemma_AddDomODHet14.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet14.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet14.log.txt > new_xxx && cat subset_gemma_AddDomODHet14.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet14.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet14.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet14.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet14.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet14.log.txt && awk '{print $4}' subset_gemma_AddDomODHet14.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet14.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet14.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet15.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet15.log.txt; awk '{print $9}' subset_gemma_AddDomODHet15.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet15.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet15.log.txt > new_xxx && cat subset_gemma_AddDomODHet15.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet15.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet15.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet15.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet15.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet15.log.txt && awk '{print $4}' subset_gemma_AddDomODHet15.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet15.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet15.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet16.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet16.log.txt; awk '{print $9}' subset_gemma_AddDomODHet16.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet16.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet16.log.txt > new_xxx && cat subset_gemma_AddDomODHet16.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet16.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet16.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet16.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet16.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet16.log.txt && awk '{print $4}' subset_gemma_AddDomODHet16.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet16.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet16.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet17.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet17.log.txt; awk '{print $9}' subset_gemma_AddDomODHet17.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet17.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet17.log.txt > new_xxx && cat subset_gemma_AddDomODHet17.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet17.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet17.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet17.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet17.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet17.log.txt && awk '{print $4}' subset_gemma_AddDomODHet17.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet17.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet17.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet18.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet18.log.txt; awk '{print $9}' subset_gemma_AddDomODHet18.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet18.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet18.log.txt > new_xxx && cat subset_gemma_AddDomODHet18.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet18.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet18.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet18.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet18.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet18.log.txt && awk '{print $4}' subset_gemma_AddDomODHet18.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet18.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet18.log.txt; sed -i '1,25d' subset_gemma_AddDomODHet.log.txt; sed -i '3,12d' subset_gemma_AddDomODHet.log.txt; awk '{print $9}' subset_gemma_AddDomODHet.log.txt > new_xxx && mv new_xxx subset_gemma_AddDomODHet.log.txt; awk -F'|' '{s+=$1}END{print s}' subset_gemma_AddDomODHet.log.txt > new_xxx && cat subset_gemma_AddDomODHet.log.txt new_xxx > new_yyy && mv new_yyy subset_gemma_AddDomODHet.log.txt; awk 'BEGIN { ORS = " " } { print }' subset_gemma_AddDomODHet.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet.log.txt; awk '{$4 = $1 / $3}1' subset_gemma_AddDomODHet.log.txt > new_yyy && mv new_yyy subset_gemma_AddDomODHet.log.txt && awk '{print $4}' subset_gemma_AddDomODHet.log.txt  > new_yyy && mv new_yyy subset_gemma_AddDomODHet.log.csv; rm new_xxx; rm subset_gemma_AddDomODHet.log.txt"""
            ret = subprocess.run(command, capture_output=True, shell=True)
            # before Python 3.7:
            # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
            print(ret.stdout.decode())










print(' "Collecting the heritability measures"...')




file = pathlib.Path("SUBSET_E1_Add.reml")
if file.exists ():
    with open("SUBSET_E1_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2_Add.reml")
if file.exists ():
    with open("SUBSET_E2_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3_Add.reml")
if file.exists ():
    with open("SUBSET_E3_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4_Add.reml")
if file.exists ():
    with open("SUBSET_E4_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5_Add.reml")
if file.exists ():
    with open("SUBSET_E5_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6_Add.reml")
if file.exists ():
    with open("SUBSET_E6_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7_Add.reml")
if file.exists ():
    with open("SUBSET_E7_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8_Add.reml")
if file.exists ():
    with open("SUBSET_E8_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9_Add.reml")
if file.exists ():
    with open("SUBSET_E9_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10_Add.reml")
if file.exists ():
    with open("SUBSET_E10_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11_Add.reml")
if file.exists ():
    with open("SUBSET_E11_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12_Add.reml")
if file.exists ():
    with open("SUBSET_E12_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13_Add.reml")
if file.exists ():
    with open("SUBSET_E13_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14_Add.reml")
if file.exists ():
    with open("SUBSET_E14_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15_Add.reml")
if file.exists ():
    with open("SUBSET_E15_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16_Add.reml")
if file.exists ():
    with open("SUBSET_E16_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17_Add.reml")
if file.exists ():
    with open("SUBSET_E17_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18_Add.reml")
if file.exists ():
    with open("SUBSET_E18_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E_Add.reml")
if file.exists ():
    with open("MAIN_E_Add.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_Add', 'a') as out_file:
        out_file.write(str(last_line))









file = pathlib.Path("SUBSET_E1_AddDom.reml")
if file.exists ():
    with open("SUBSET_E1_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2_AddDom.reml")
if file.exists ():
    with open("SUBSET_E2_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3_AddDom.reml")
if file.exists ():
    with open("SUBSET_E3_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4_AddDom.reml")
if file.exists ():
    with open("SUBSET_E4_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5_AddDom.reml")
if file.exists ():
    with open("SUBSET_E5_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6_AddDom.reml")
if file.exists ():
    with open("SUBSET_E6_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7_AddDom.reml")
if file.exists ():
    with open("SUBSET_E7_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8_AddDom.reml")
if file.exists ():
    with open("SUBSET_E8_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9_AddDom.reml")
if file.exists ():
    with open("SUBSET_E9_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10_AddDom.reml")
if file.exists ():
    with open("SUBSET_E10_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11_AddDom.reml")
if file.exists ():
    with open("SUBSET_E11_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12_AddDom.reml")
if file.exists ():
    with open("SUBSET_E12_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13_AddDom.reml")
if file.exists ():
    with open("SUBSET_E13_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14_AddDom.reml")
if file.exists ():
    with open("SUBSET_E14_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15_AddDom.reml")
if file.exists ():
    with open("SUBSET_E15_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16_AddDom.reml")
if file.exists ():
    with open("SUBSET_E16_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17_AddDom.reml")
if file.exists ():
    with open("SUBSET_E17_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18_AddDom.reml")
if file.exists ():
    with open("SUBSET_E18_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E_AddDom.reml")
if file.exists ():
    with open("MAIN_E_AddDom.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDom', 'a') as out_file:
        out_file.write(str(last_line))










file = pathlib.Path("SUBSET_E1_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E1_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E2_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E3_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E4_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E5_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E6_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E7_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E8_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E9_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E10_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E11_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E12_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E13_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E14_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E15_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E16_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E17_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18_AddDomOD.reml")
if file.exists ():
    with open("SUBSET_E18_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E_AddDomOD.reml")
if file.exists ():
    with open("MAIN_E_AddDomOD.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))


















file = pathlib.Path("SUBSET_E1_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E1_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E2_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E2_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_E3_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E3_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_E4_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E4_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_E5_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E5_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E6_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E6_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E7_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E7_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E8_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E8_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_E9_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E9_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E10_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E10_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_E11_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E11_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E12_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E12_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_E13_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E13_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E14_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E14_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E15_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E15_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_E16_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E16_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_E17_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E17_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_E18_AddDomODHet.reml")
if file.exists ():
    with open("SUBSET_E18_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_E_AddDomODHet.reml")
if file.exists ():
    with open("MAIN_E_AddDomODHet.reml", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_E_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))


















if Prog2.exists ():
    my_file = Path("SUBSET_L1_Add.progress")
    if my_file.is_file ():
        L1_Add = pd.read_csv("SUBSET_L1_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1_Add.progress')


    my_file = Path("SUBSET_L2_Add.progress")
    if my_file.is_file ():
        L2_Add = pd.read_csv("SUBSET_L2_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2_Add.progress')


    my_file = Path("SUBSET_L3_Add.progress")
    if my_file.is_file ():
        L3_Add = pd.read_csv("SUBSET_L3_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3_Add.progress')


    my_file = Path("SUBSET_L4_Add.progress")
    if my_file.is_file ():
        L4_Add = pd.read_csv("SUBSET_L4_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4_Add.progress')


    my_file = Path("SUBSET_L5_Add.progress")
    if my_file.is_file ():
        L5_Add = pd.read_csv("SUBSET_L5_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5_Add.progress')

    
    my_file = Path("SUBSET_L6_Add.progress")
    if my_file.is_file ():
        L6_Add = pd.read_csv("SUBSET_L6_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6_Add.progress')


    my_file = Path("SUBSET_L7_Add.progress")
    if my_file.is_file ():
        L7_Add = pd.read_csv("SUBSET_L7_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7_Add.progress')


    my_file = Path("SUBSET_L8_Add.progress")
    if my_file.is_file ():
        L8_Add = pd.read_csv("SUBSET_L8_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8_Add.progress')


    my_file = Path("SUBSET_L9_Add.progress")
    if my_file.is_file ():
        L9_Add = pd.read_csv("SUBSET_L9_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9_Add.progress')


    my_file = Path("SUBSET_L10_Add.progress")
    if my_file.is_file ():
        L10_Add = pd.read_csv("SUBSET_L10_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10_Add.progress')


    my_file = Path("SUBSET_L11_Add.progress")
    if my_file.is_file ():
        L11_Add = pd.read_csv("SUBSET_L11_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11_Add.progress')



    my_file = Path("SUBSET_L12_Add.progress")
    if my_file.is_file ():
        L12_Add = pd.read_csv("SUBSET_L12_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12_Add.progress')


    my_file = Path("SUBSET_L13_Add.progress")
    if my_file.is_file ():
        L13_Add = pd.read_csv("SUBSET_L13_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13_Add.progress')


    my_file = Path("SUBSET_L14_Add.progress")
    if my_file.is_file ():
        L14_Add = pd.read_csv("SUBSET_L14_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14_Add.progress')


    my_file = Path("SUBSET_L15_Add.progress")
    if my_file.is_file ():
        L15_Add = pd.read_csv("SUBSET_L15_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15_Add.progress')



    my_file = Path("SUBSET_L16_Add.progress")
    if my_file.is_file ():
        L16_Add = pd.read_csv("SUBSET_L16_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16_Add.progress')



    my_file = Path("SUBSET_L17_Add.progress")
    if my_file.is_file ():
        L17_Add = pd.read_csv("SUBSET_L17_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17_Add.progress')



    my_file = Path("SUBSET_L18_Add.progress")
    if my_file.is_file ():
        L18_Add = pd.read_csv("SUBSET_L18_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18_Add.progress')



    my_file = Path("MAIN_L_Add.progress")
    if my_file.is_file ():
        L_MAIN_Add = pd.read_csv("MAIN_L_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L_Add.progress')









if Prog2.exists ():
    my_file = Path("SUBSET_L1_AddDom.progress")
    if my_file.is_file ():
        L1_AddDom = pd.read_csv("SUBSET_L1_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1_AddDom.progress')


    my_file = Path("SUBSET_L2_AddDom.progress")
    if my_file.is_file ():
        L2_AddDom = pd.read_csv("SUBSET_L2_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2_AddDom.progress')


    my_file = Path("SUBSET_L3_AddDom.progress")
    if my_file.is_file ():
        L3_AddDom = pd.read_csv("SUBSET_L3_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3_AddDom.progress')


    my_file = Path("SUBSET_L4_AddDom.progress")
    if my_file.is_file ():
        L4_AddDom = pd.read_csv("SUBSET_L4_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4_AddDom.progress')


    my_file = Path("SUBSET_L5_AddDom.progress")
    if my_file.is_file ():
        L5_AddDom = pd.read_csv("SUBSET_L5_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5_AddDom.progress')

    
    my_file = Path("SUBSET_L6_AddDom.progress")
    if my_file.is_file ():
        L6_AddDom = pd.read_csv("SUBSET_L6_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6_AddDom.progress')


    my_file = Path("SUBSET_L7_AddDom.progress")
    if my_file.is_file ():
        L7_AddDom = pd.read_csv("SUBSET_L7_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7_AddDom.progress')


    my_file = Path("SUBSET_L8_AddDom.progress")
    if my_file.is_file ():
        L8_AddDom = pd.read_csv("SUBSET_L8_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8_AddDom.progress')


    my_file = Path("SUBSET_L9_AddDom.progress")
    if my_file.is_file ():
        L9_AddDom = pd.read_csv("SUBSET_L9_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9_AddDom.progress')


    my_file = Path("SUBSET_L10_AddDom.progress")
    if my_file.is_file ():
        L10_AddDom = pd.read_csv("SUBSET_L10_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10_AddDom.progress')


    my_file = Path("SUBSET_L11_AddDom.progress")
    if my_file.is_file ():
        L11_AddDom = pd.read_csv("SUBSET_L11_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11_AddDom.progress')



    my_file = Path("SUBSET_L12_AddDom.progress")
    if my_file.is_file ():
        L12_AddDom = pd.read_csv("SUBSET_L12_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12_AddDom.progress')


    my_file = Path("SUBSET_L13_AddDom.progress")
    if my_file.is_file ():
        L13_AddDom = pd.read_csv("SUBSET_L13_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13_AddDom.progress')


    my_file = Path("SUBSET_L14_AddDom.progress")
    if my_file.is_file ():
        L14_AddDom = pd.read_csv("SUBSET_L14_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14_AddDom.progress')


    my_file = Path("SUBSET_L15_AddDom.progress")
    if my_file.is_file ():
        L15_AddDom = pd.read_csv("SUBSET_L15_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15_AddDom.progress')



    my_file = Path("SUBSET_L16_AddDom.progress")
    if my_file.is_file ():
        L16_AddDom = pd.read_csv("SUBSET_L16_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16_AddDom.progress')



    my_file = Path("SUBSET_L17_AddDom.progress")
    if my_file.is_file ():
        L17_AddDom = pd.read_csv("SUBSET_L17_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17_AddDom.progress')



    my_file = Path("SUBSET_L18_AddDom.progress")
    if my_file.is_file ():
        L18_AddDom = pd.read_csv("SUBSET_L18_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18_AddDom.progress')



    my_file = Path("MAIN_L_AddDom.progress")
    if my_file.is_file ():
        L_MAIN_AddDom = pd.read_csv("MAIN_L_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L_AddDom.progress')










if Prog2.exists ():
    my_file = Path("SUBSET_L1_AddDomOD.progress")
    if my_file.is_file ():
        L1_AddDomOD = pd.read_csv("SUBSET_L1_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1_AddDomOD.progress')


    my_file = Path("SUBSET_L2_AddDomOD.progress")
    if my_file.is_file ():
        L2_AddDomOD = pd.read_csv("SUBSET_L2_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2_AddDomOD.progress')


    my_file = Path("SUBSET_L3_AddDomOD.progress")
    if my_file.is_file ():
        L3_AddDomOD = pd.read_csv("SUBSET_L3_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3_AddDomOD.progress')


    my_file = Path("SUBSET_L4_AddDomOD.progress")
    if my_file.is_file ():
        L4_AddDomOD = pd.read_csv("SUBSET_L4_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4_AddDomOD.progress')


    my_file = Path("SUBSET_L5_AddDomOD.progress")
    if my_file.is_file ():
        L5_AddDomOD = pd.read_csv("SUBSET_L5_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5_AddDomOD.progress')

    
    my_file = Path("SUBSET_L6_AddDomOD.progress")
    if my_file.is_file ():
        L6_AddDomOD = pd.read_csv("SUBSET_L6_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6_AddDomOD.progress')


    my_file = Path("SUBSET_L7_AddDomOD.progress")
    if my_file.is_file ():
        L7_AddDomOD = pd.read_csv("SUBSET_L7_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7_AddDomOD.progress')


    my_file = Path("SUBSET_L8_AddDomOD.progress")
    if my_file.is_file ():
        L8_AddDomOD = pd.read_csv("SUBSET_L8_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8_AddDomOD.progress')


    my_file = Path("SUBSET_L9_AddDomOD.progress")
    if my_file.is_file ():
        L9_AddDomOD = pd.read_csv("SUBSET_L9_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9_AddDomOD.progress')


    my_file = Path("SUBSET_L10_AddDomOD.progress")
    if my_file.is_file ():
        L10_AddDomOD = pd.read_csv("SUBSET_L10_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10_AddDomOD.progress')


    my_file = Path("SUBSET_L11_AddDomOD.progress")
    if my_file.is_file ():
        L11_AddDomOD = pd.read_csv("SUBSET_L11_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11_AddDomOD.progress')



    my_file = Path("SUBSET_L12_AddDomOD.progress")
    if my_file.is_file ():
        L12_AddDomOD = pd.read_csv("SUBSET_L12_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12_AddDomOD.progress')


    my_file = Path("SUBSET_L13_AddDomOD.progress")
    if my_file.is_file ():
        L13_AddDomOD = pd.read_csv("SUBSET_L13_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13_AddDomOD.progress')


    my_file = Path("SUBSET_L14_AddDomOD.progress")
    if my_file.is_file ():
        L14_AddDomOD = pd.read_csv("SUBSET_L14_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14_AddDomOD.progress')


    my_file = Path("SUBSET_L15_AddDomOD.progress")
    if my_file.is_file ():
        L15_AddDomOD = pd.read_csv("SUBSET_L15_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15_AddDomOD.progress')



    my_file = Path("SUBSET_L16_AddDomOD.progress")
    if my_file.is_file ():
        L16_AddDomOD = pd.read_csv("SUBSET_L16_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16_AddDomOD.progress')



    my_file = Path("SUBSET_L17_AddDomOD.progress")
    if my_file.is_file ():
        L17_AddDomOD = pd.read_csv("SUBSET_L17_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17_AddDomOD.progress')



    my_file = Path("SUBSET_L18_AddDomOD.progress")
    if my_file.is_file ():
        L18_AddDomOD = pd.read_csv("SUBSET_L18_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18_AddDomOD.progress')



    my_file = Path("MAIN_L_AddDomOD.progress")
    if my_file.is_file ():
        L_MAIN_AddDomOD = pd.read_csv("MAIN_L_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L_AddDomOD.progress')













if Prog2.exists ():
    my_file = Path("SUBSET_L1_AddDomODHet.progress")
    if my_file.is_file ():
        L1_AddDomODHet = pd.read_csv("SUBSET_L1_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L1_AddDomODHet.progress')


    my_file = Path("SUBSET_L2_AddDomODHet.progress")
    if my_file.is_file ():
        L2_AddDomODHet = pd.read_csv("SUBSET_L2_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L2_AddDomODHet.progress')


    my_file = Path("SUBSET_L3_AddDomODHet.progress")
    if my_file.is_file ():
        L3_AddDomODHet = pd.read_csv("SUBSET_L3_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L3_AddDomODHet.progress')


    my_file = Path("SUBSET_L4_AddDomODHet.progress")
    if my_file.is_file ():
        L4_AddDomODHet = pd.read_csv("SUBSET_L4_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L4_AddDomODHet.progress')


    my_file = Path("SUBSET_L5_AddDomODHet.progress")
    if my_file.is_file ():
        L5_AddDomODHet = pd.read_csv("SUBSET_L5_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L5_AddDomODHet.progress')

    
    my_file = Path("SUBSET_L6_AddDomODHet.progress")
    if my_file.is_file ():
        L6_AddDomODHet = pd.read_csv("SUBSET_L6_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L6_AddDomODHet.progress')


    my_file = Path("SUBSET_L7_AddDomODHet.progress")
    if my_file.is_file ():
        L7_AddDomODHet = pd.read_csv("SUBSET_L7_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L7_AddDomODHet.progress')


    my_file = Path("SUBSET_L8_AddDomODHet.progress")
    if my_file.is_file ():
        L8_AddDomODHet = pd.read_csv("SUBSET_L8_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L8_AddDomODHet.progress')


    my_file = Path("SUBSET_L9_AddDomODHet.progress")
    if my_file.is_file ():
        L9_AddDomODHet = pd.read_csv("SUBSET_L9_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L9_AddDomODHet.progress')


    my_file = Path("SUBSET_L10_AddDomODHet.progress")
    if my_file.is_file ():
        L10_AddDomODHet = pd.read_csv("SUBSET_L10_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L10_AddDomODHet.progress')


    my_file = Path("SUBSET_L11_AddDomODHet.progress")
    if my_file.is_file ():
        L11_AddDomODHet = pd.read_csv("SUBSET_L11_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L11_AddDomODHet.progress')



    my_file = Path("SUBSET_L12_AddDomODHet.progress")
    if my_file.is_file ():
        L12_AddDomODHet = pd.read_csv("SUBSET_L12_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L12_AddDomODHet.progress')


    my_file = Path("SUBSET_L13_AddDomODHet.progress")
    if my_file.is_file ():
        L13_AddDomODHet = pd.read_csv("SUBSET_L13_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L13_AddDomODHet.progress')


    my_file = Path("SUBSET_L14_AddDomODHet.progress")
    if my_file.is_file ():
        L14_AddDomODHet = pd.read_csv("SUBSET_L14_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L14_AddDomODHet.progress')


    my_file = Path("SUBSET_L15_AddDomODHet.progress")
    if my_file.is_file ():
        L15_AddDomODHet = pd.read_csv("SUBSET_L15_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L15_AddDomODHet.progress')



    my_file = Path("SUBSET_L16_AddDomODHet.progress")
    if my_file.is_file ():
        L16_AddDomODHet = pd.read_csv("SUBSET_L16_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L16_AddDomODHet.progress')



    my_file = Path("SUBSET_L17_AddDomODHet.progress")
    if my_file.is_file ():
        L17_AddDomODHet = pd.read_csv("SUBSET_L17_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L17_AddDomODHet.progress')



    my_file = Path("SUBSET_L18_AddDomODHet.progress")
    if my_file.is_file ():
        L18_AddDomODHet = pd.read_csv("SUBSET_L18_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_L18_AddDomODHet.progress')



    my_file = Path("MAIN_L_AddDomODHet.progress")
    if my_file.is_file ():
        L_MAIN_AddDomODHet = pd.read_csv("MAIN_L_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_L_AddDomODHet.progress')

















        
    L1_Add = pd.read_csv("SUBSET_L1_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2_Add = pd.read_csv("SUBSET_L2_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3_Add = pd.read_csv("SUBSET_L3_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4_Add = pd.read_csv("SUBSET_L4_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5_Add = pd.read_csv("SUBSET_L5_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6_Add = pd.read_csv("SUBSET_L6_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7_Add = pd.read_csv("SUBSET_L7_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8_Add = pd.read_csv("SUBSET_L8_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9_Add = pd.read_csv("SUBSET_L9_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10_Add = pd.read_csv("SUBSET_L10_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11_Add = pd.read_csv("SUBSET_L11_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12_Add = pd.read_csv("SUBSET_L12_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13_Add = pd.read_csv("SUBSET_L13_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14_Add = pd.read_csv("SUBSET_L14_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15_Add = pd.read_csv("SUBSET_L15_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16_Add = pd.read_csv("SUBSET_L16_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17_Add = pd.read_csv("SUBSET_L17_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18_Add = pd.read_csv("SUBSET_L18_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN_Add = pd.read_csv("MAIN_L_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])




    SUBSET_reml_L1_Add = L1_Add['Her_All']
    SUBSET_reml_L2_Add = L2_Add['Her_All']
    SUBSET_reml_L3_Add = L3_Add['Her_All']
    SUBSET_reml_L4_Add = L4_Add['Her_All']
    SUBSET_reml_L5_Add = L5_Add['Her_All']
    SUBSET_reml_L6_Add = L6_Add['Her_All']
    SUBSET_reml_L7_Add = L7_Add['Her_All']
    SUBSET_reml_L8_Add = L8_Add['Her_All']
    SUBSET_reml_L9_Add = L9_Add['Her_All']
    SUBSET_reml_L10_Add = L10_Add['Her_All']
    SUBSET_reml_L11_Add = L11_Add['Her_All']
    SUBSET_reml_L12_Add = L12_Add['Her_All']
    SUBSET_reml_L13_Add = L13_Add['Her_All']
    SUBSET_reml_L14_Add = L14_Add['Her_All']
    SUBSET_reml_L15_Add = L15_Add['Her_All']
    SUBSET_reml_L16_Add = L16_Add['Her_All']
    SUBSET_reml_L17_Add = L17_Add['Her_All']
    SUBSET_reml_L18_Add = L18_Add['Her_All']
    MAIN_reml_L_Add = L_MAIN_Add['Her_All']

    SUBSET_reml_L1_Add.to_csv('SUBSET_reml_L1_Add.csv', header=False, index=False)
    SUBSET_reml_L2_Add.to_csv('SUBSET_reml_L2_Add.csv', header=False, index=False)
    SUBSET_reml_L3_Add.to_csv('SUBSET_reml_L3_Add.csv', header=False, index=False)
    SUBSET_reml_L4_Add.to_csv('SUBSET_reml_L4_Add.csv', header=False, index=False)
    SUBSET_reml_L5_Add.to_csv('SUBSET_reml_L5_Add.csv', header=False, index=False)
    SUBSET_reml_L6_Add.to_csv('SUBSET_reml_L6_Add.csv', header=False, index=False)
    SUBSET_reml_L7_Add.to_csv('SUBSET_reml_L7_Add.csv', header=False, index=False)
    SUBSET_reml_L8_Add.to_csv('SUBSET_reml_L8_Add.csv', header=False, index=False)
    SUBSET_reml_L9_Add.to_csv('SUBSET_reml_L9_Add.csv', header=False, index=False)
    SUBSET_reml_L10_Add.to_csv('SUBSET_reml_L10_Add.csv', header=False, index=False)
    SUBSET_reml_L11_Add.to_csv('SUBSET_reml_L11_Add.csv', header=False, index=False)
    SUBSET_reml_L12_Add.to_csv('SUBSET_reml_L12_Add.csv', header=False, index=False)
    SUBSET_reml_L13_Add.to_csv('SUBSET_reml_L13_Add.csv', header=False, index=False)
    SUBSET_reml_L14_Add.to_csv('SUBSET_reml_L14_Add.csv', header=False, index=False)
    SUBSET_reml_L15_Add.to_csv('SUBSET_reml_L15_Add.csv', header=False, index=False)
    SUBSET_reml_L16_Add.to_csv('SUBSET_reml_L16_Add.csv', header=False, index=False)
    SUBSET_reml_L17_Add.to_csv('SUBSET_reml_L17_Add.csv', header=False, index=False)
    SUBSET_reml_L18_Add.to_csv('SUBSET_reml_L18_Add.csv', header=False, index=False)
    MAIN_reml_L_Add.to_csv('MAIN_reml_L_Add.csv', header=False, index=False)















    L1_AddDom = pd.read_csv("SUBSET_L1_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2_AddDom = pd.read_csv("SUBSET_L2_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3_AddDom = pd.read_csv("SUBSET_L3_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4_AddDom = pd.read_csv("SUBSET_L4_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5_AddDom = pd.read_csv("SUBSET_L5_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6_AddDom = pd.read_csv("SUBSET_L6_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7_AddDom = pd.read_csv("SUBSET_L7_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8_AddDom = pd.read_csv("SUBSET_L8_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9_AddDom = pd.read_csv("SUBSET_L9_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10_AddDom = pd.read_csv("SUBSET_L10_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11_AddDom = pd.read_csv("SUBSET_L11_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12_AddDom = pd.read_csv("SUBSET_L12_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13_AddDom = pd.read_csv("SUBSET_L13_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14_AddDom = pd.read_csv("SUBSET_L14_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15_AddDom = pd.read_csv("SUBSET_L15_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16_AddDom = pd.read_csv("SUBSET_L16_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17_AddDom = pd.read_csv("SUBSET_L17_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18_AddDom = pd.read_csv("SUBSET_L18_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN_AddDom = pd.read_csv("MAIN_L_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])




    SUBSET_reml_L1_AddDom = L1_AddDom['Her_All']
    SUBSET_reml_L2_AddDom = L2_AddDom['Her_All']
    SUBSET_reml_L3_AddDom = L3_AddDom['Her_All']
    SUBSET_reml_L4_AddDom = L4_AddDom['Her_All']
    SUBSET_reml_L5_AddDom = L5_AddDom['Her_All']
    SUBSET_reml_L6_AddDom = L6_AddDom['Her_All']
    SUBSET_reml_L7_AddDom = L7_AddDom['Her_All']
    SUBSET_reml_L8_AddDom = L8_AddDom['Her_All']
    SUBSET_reml_L9_AddDom = L9_AddDom['Her_All']
    SUBSET_reml_L10_AddDom = L10_AddDom['Her_All']
    SUBSET_reml_L11_AddDom = L11_AddDom['Her_All']
    SUBSET_reml_L12_AddDom = L12_AddDom['Her_All']
    SUBSET_reml_L13_AddDom = L13_AddDom['Her_All']
    SUBSET_reml_L14_AddDom = L14_AddDom['Her_All']
    SUBSET_reml_L15_AddDom = L15_AddDom['Her_All']
    SUBSET_reml_L16_AddDom = L16_AddDom['Her_All']
    SUBSET_reml_L17_AddDom = L17_AddDom['Her_All']
    SUBSET_reml_L18_AddDom = L18_AddDom['Her_All']
    MAIN_reml_L_AddDom = L_MAIN_AddDom['Her_All']

    SUBSET_reml_L1_AddDom.to_csv('SUBSET_reml_L1_AddDom.csv', header=False, index=False)
    SUBSET_reml_L2_AddDom.to_csv('SUBSET_reml_L2_AddDom.csv', header=False, index=False)
    SUBSET_reml_L3_AddDom.to_csv('SUBSET_reml_L3_AddDom.csv', header=False, index=False)
    SUBSET_reml_L4_AddDom.to_csv('SUBSET_reml_L4_AddDom.csv', header=False, index=False)
    SUBSET_reml_L5_AddDom.to_csv('SUBSET_reml_L5_AddDom.csv', header=False, index=False)
    SUBSET_reml_L6_AddDom.to_csv('SUBSET_reml_L6_AddDom.csv', header=False, index=False)
    SUBSET_reml_L7_AddDom.to_csv('SUBSET_reml_L7_AddDom.csv', header=False, index=False)
    SUBSET_reml_L8_AddDom.to_csv('SUBSET_reml_L8_AddDom.csv', header=False, index=False)
    SUBSET_reml_L9_AddDom.to_csv('SUBSET_reml_L9_AddDom.csv', header=False, index=False)
    SUBSET_reml_L10_AddDom.to_csv('SUBSET_reml_L10_AddDom.csv', header=False, index=False)
    SUBSET_reml_L11_AddDom.to_csv('SUBSET_reml_L11_AddDom.csv', header=False, index=False)
    SUBSET_reml_L12_AddDom.to_csv('SUBSET_reml_L12_AddDom.csv', header=False, index=False)
    SUBSET_reml_L13_AddDom.to_csv('SUBSET_reml_L13_AddDom.csv', header=False, index=False)
    SUBSET_reml_L14_AddDom.to_csv('SUBSET_reml_L14_AddDom.csv', header=False, index=False)
    SUBSET_reml_L15_AddDom.to_csv('SUBSET_reml_L15_AddDom.csv', header=False, index=False)
    SUBSET_reml_L16_AddDom.to_csv('SUBSET_reml_L16_AddDom.csv', header=False, index=False)
    SUBSET_reml_L17_AddDom.to_csv('SUBSET_reml_L17_AddDom.csv', header=False, index=False)
    SUBSET_reml_L18_AddDom.to_csv('SUBSET_reml_L18_AddDom.csv', header=False, index=False)
    MAIN_reml_L_AddDom.to_csv('MAIN_reml_L_AddDom.csv', header=False, index=False)

















    L1_AddDomOD = pd.read_csv("SUBSET_L1_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2_AddDomOD = pd.read_csv("SUBSET_L2_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3_AddDomOD = pd.read_csv("SUBSET_L3_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4_AddDomOD = pd.read_csv("SUBSET_L4_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5_AddDomOD = pd.read_csv("SUBSET_L5_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6_AddDomOD = pd.read_csv("SUBSET_L6_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7_AddDomOD = pd.read_csv("SUBSET_L7_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8_AddDomOD = pd.read_csv("SUBSET_L8_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9_AddDomOD = pd.read_csv("SUBSET_L9_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10_AddDomOD = pd.read_csv("SUBSET_L10_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11_AddDomOD = pd.read_csv("SUBSET_L11_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12_AddDomOD = pd.read_csv("SUBSET_L12_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13_AddDomOD = pd.read_csv("SUBSET_L13_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14_AddDomOD = pd.read_csv("SUBSET_L14_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15_AddDomOD = pd.read_csv("SUBSET_L15_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16_AddDomOD = pd.read_csv("SUBSET_L16_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17_AddDomOD = pd.read_csv("SUBSET_L17_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18_AddDomOD = pd.read_csv("SUBSET_L18_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN_AddDomOD = pd.read_csv("MAIN_L_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])




    SUBSET_reml_L1_AddDomOD = L1_AddDomOD['Her_All']
    SUBSET_reml_L2_AddDomOD = L2_AddDomOD['Her_All']
    SUBSET_reml_L3_AddDomOD = L3_AddDomOD['Her_All']
    SUBSET_reml_L4_AddDomOD = L4_AddDomOD['Her_All']
    SUBSET_reml_L5_AddDomOD = L5_AddDomOD['Her_All']
    SUBSET_reml_L6_AddDomOD = L6_AddDomOD['Her_All']
    SUBSET_reml_L7_AddDomOD = L7_AddDomOD['Her_All']
    SUBSET_reml_L8_AddDomOD = L8_AddDomOD['Her_All']
    SUBSET_reml_L9_AddDomOD = L9_AddDomOD['Her_All']
    SUBSET_reml_L10_AddDomOD = L10_AddDomOD['Her_All']
    SUBSET_reml_L11_AddDomOD = L11_AddDomOD['Her_All']
    SUBSET_reml_L12_AddDomOD = L12_AddDomOD['Her_All']
    SUBSET_reml_L13_AddDomOD = L13_AddDomOD['Her_All']
    SUBSET_reml_L14_AddDomOD = L14_AddDomOD['Her_All']
    SUBSET_reml_L15_AddDomOD = L15_AddDomOD['Her_All']
    SUBSET_reml_L16_AddDomOD = L16_AddDomOD['Her_All']
    SUBSET_reml_L17_AddDomOD = L17_AddDomOD['Her_All']
    SUBSET_reml_L18_AddDomOD = L18_AddDomOD['Her_All']
    MAIN_reml_L_AddDomOD = L_MAIN_AddDomOD['Her_All']

    SUBSET_reml_L1_AddDomOD.to_csv('SUBSET_reml_L1_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L2_AddDomOD.to_csv('SUBSET_reml_L2_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L3_AddDomOD.to_csv('SUBSET_reml_L3_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L4_AddDomOD.to_csv('SUBSET_reml_L4_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L5_AddDomOD.to_csv('SUBSET_reml_L5_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L6_AddDomOD.to_csv('SUBSET_reml_L6_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L7_AddDomOD.to_csv('SUBSET_reml_L7_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L8_AddDomOD.to_csv('SUBSET_reml_L8_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L9_AddDomOD.to_csv('SUBSET_reml_L9_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L10_AddDomOD.to_csv('SUBSET_reml_L10_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L11_AddDomOD.to_csv('SUBSET_reml_L11_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L12_AddDomOD.to_csv('SUBSET_reml_L12_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L13_AddDomOD.to_csv('SUBSET_reml_L13_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L14_AddDomOD.to_csv('SUBSET_reml_L14_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L15_AddDomOD.to_csv('SUBSET_reml_L15_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L16_AddDomOD.to_csv('SUBSET_reml_L16_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L17_AddDomOD.to_csv('SUBSET_reml_L17_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_L18_AddDomOD.to_csv('SUBSET_reml_L18_AddDomOD.csv', header=False, index=False)
    MAIN_reml_L_AddDomOD.to_csv('MAIN_reml_L_AddDomOD.csv', header=False, index=False)













    L1_AddDomODHet = pd.read_csv("SUBSET_L1_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L2_AddDomODHet = pd.read_csv("SUBSET_L2_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L3_AddDomODHet = pd.read_csv("SUBSET_L3_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L4_AddDomODHet = pd.read_csv("SUBSET_L4_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L5_AddDomODHet = pd.read_csv("SUBSET_L5_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L6_AddDomODHet = pd.read_csv("SUBSET_L6_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L7_AddDomODHet = pd.read_csv("SUBSET_L7_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L8_AddDomODHet = pd.read_csv("SUBSET_L8_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L9_AddDomODHet = pd.read_csv("SUBSET_L9_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L10_AddDomODHet = pd.read_csv("SUBSET_L10_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L11_AddDomODHet = pd.read_csv("SUBSET_L11_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L12_AddDomODHet = pd.read_csv("SUBSET_L12_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L13_AddDomODHet = pd.read_csv("SUBSET_L13_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L14_AddDomODHet = pd.read_csv("SUBSET_L14_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L15_AddDomODHet = pd.read_csv("SUBSET_L15_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L16_AddDomODHet = pd.read_csv("SUBSET_L16_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L17_AddDomODHet = pd.read_csv("SUBSET_L17_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L18_AddDomODHet = pd.read_csv("SUBSET_L18_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    L_MAIN_AddDomODHet = pd.read_csv("MAIN_L_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])




    SUBSET_reml_L1_AddDomODHet = L1_AddDomODHet['Her_All']
    SUBSET_reml_L2_AddDomODHet = L2_AddDomODHet['Her_All']
    SUBSET_reml_L3_AddDomODHet = L3_AddDomODHet['Her_All']
    SUBSET_reml_L4_AddDomODHet = L4_AddDomODHet['Her_All']
    SUBSET_reml_L5_AddDomODHet = L5_AddDomODHet['Her_All']
    SUBSET_reml_L6_AddDomODHet = L6_AddDomODHet['Her_All']
    SUBSET_reml_L7_AddDomODHet = L7_AddDomODHet['Her_All']
    SUBSET_reml_L8_AddDomODHet = L8_AddDomODHet['Her_All']
    SUBSET_reml_L9_AddDomODHet = L9_AddDomODHet['Her_All']
    SUBSET_reml_L10_AddDomODHet = L10_AddDomODHet['Her_All']
    SUBSET_reml_L11_AddDomODHet = L11_AddDomODHet['Her_All']
    SUBSET_reml_L12_AddDomODHet = L12_AddDomODHet['Her_All']
    SUBSET_reml_L13_AddDomODHet = L13_AddDomODHet['Her_All']
    SUBSET_reml_L14_AddDomODHet = L14_AddDomODHet['Her_All']
    SUBSET_reml_L15_AddDomODHet = L15_AddDomODHet['Her_All']
    SUBSET_reml_L16_AddDomODHet = L16_AddDomODHet['Her_All']
    SUBSET_reml_L17_AddDomODHet = L17_AddDomODHet['Her_All']
    SUBSET_reml_L18_AddDomODHet = L18_AddDomODHet['Her_All']
    MAIN_reml_L_AddDomODHet = L_MAIN_AddDomODHet['Her_All']

    SUBSET_reml_L1_AddDomODHet.to_csv('SUBSET_reml_L1_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L2_AddDomODHet.to_csv('SUBSET_reml_L2_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L3_AddDomODHet.to_csv('SUBSET_reml_L3_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L4_AddDomODHet.to_csv('SUBSET_reml_L4_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L5_AddDomODHet.to_csv('SUBSET_reml_L5_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L6_AddDomODHet.to_csv('SUBSET_reml_L6_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L7_AddDomODHet.to_csv('SUBSET_reml_L7_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L8_AddDomODHet.to_csv('SUBSET_reml_L8_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L9_AddDomODHet.to_csv('SUBSET_reml_L9_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L10_AddDomODHet.to_csv('SUBSET_reml_L10_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L11_AddDomODHet.to_csv('SUBSET_reml_L11_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L12_AddDomODHet.to_csv('SUBSET_reml_L12_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L13_AddDomODHet.to_csv('SUBSET_reml_L13_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L14_AddDomODHet.to_csv('SUBSET_reml_L14_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L15_AddDomODHet.to_csv('SUBSET_reml_L15_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L16_AddDomODHet.to_csv('SUBSET_reml_L16_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L17_AddDomODHet.to_csv('SUBSET_reml_L17_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_L18_AddDomODHet.to_csv('SUBSET_reml_L18_AddDomODHet.csv', header=False, index=False)
    MAIN_reml_L_AddDomODHet.to_csv('MAIN_reml_L_AddDomODHet.csv', header=False, index=False)
















file = pathlib.Path("SUBSET_reml_L1_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L1_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L2_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L3_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L4_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L5_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L6_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L7_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L8_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L9_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L10_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L11_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L12_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L13_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L14_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L15_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L16_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L17_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18_Add.csv")
if file.exists ():
    with open("SUBSET_reml_L18_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L_Add.csv")
if file.exists ():
    with open("MAIN_reml_L_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_Add', 'a') as out_file:
        out_file.write(str(last_line))











file = pathlib.Path("SUBSET_reml_L1_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L1_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L2_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L3_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L4_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L5_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L6_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L7_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L8_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L9_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L10_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L11_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L12_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L13_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L14_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L15_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L16_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L17_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_L18_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L_AddDom.csv")
if file.exists ():
    with open("MAIN_reml_L_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDom', 'a') as out_file:
        out_file.write(str(last_line))












file = pathlib.Path("SUBSET_reml_L1_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L1_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L2_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L3_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L4_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L5_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L6_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L7_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L8_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L9_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L10_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L11_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L12_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L13_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L14_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L15_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L16_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L17_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_L18_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L_AddDomOD.csv")
if file.exists ():
    with open("MAIN_reml_L_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))












file = pathlib.Path("SUBSET_reml_L1_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L1_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L2_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L2_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_L3_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L3_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_L4_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L4_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_L5_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L5_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L6_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L6_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L7_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L7_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L8_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L8_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("SUBSET_reml_L9_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L9_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L10_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L10_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_L11_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L11_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L12_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L12_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_L13_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L13_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L14_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L14_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L15_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L15_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_L16_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L16_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_L17_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L17_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_L18_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_L18_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_L_AddDomODHet.csv")
if file.exists ():
    with open("MAIN_reml_L_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_L_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))

        

















if Prog2.exists ():
    my_file = Path("SUBSET_LT1_Add.progress")
    if my_file.is_file ():
        LT1_Add = pd.read_csv("SUBSET_LT1_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1_Add.progress')


    my_file = Path("SUBSET_LT2_Add.progress")
    if my_file.is_file ():
        LT2_Add = pd.read_csv("SUBSET_LT2_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2_Add.progress')


    my_file = Path("SUBSET_LT3_Add.progress")
    if my_file.is_file ():
        LT3_Add = pd.read_csv("SUBSET_LT3_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3_Add.progress')


    my_file = Path("SUBSET_LT4_Add.progress")
    if my_file.is_file ():
        LT4_Add = pd.read_csv("SUBSET_LT4_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4_Add.progress')


    my_file = Path("SUBSET_LT5_Add.progress")
    if my_file.is_file ():
        LT5_Add = pd.read_csv("SUBSET_LT5_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5_Add.progress')

    
    my_file = Path("SUBSET_LT6_Add.progress")
    if my_file.is_file ():
        LT6_Add = pd.read_csv("SUBSET_LT6_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6_Add.progress')


    my_file = Path("SUBSET_LT7_Add.progress")
    if my_file.is_file ():
        LT7_Add = pd.read_csv("SUBSET_LT7_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7_Add.progress')


    my_file = Path("SUBSET_LT8_Add.progress")
    if my_file.is_file ():
        LT8_Add = pd.read_csv("SUBSET_LT8_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8_Add.progress')


    my_file = Path("SUBSET_LT9_Add.progress")
    if my_file.is_file ():
        LT9_Add = pd.read_csv("SUBSET_LT9_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9_Add.progress')


    my_file = Path("SUBSET_LT10_Add.progress")
    if my_file.is_file ():
        LT10_Add = pd.read_csv("SUBSET_LT10_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10_Add.progress')


    my_file = Path("SUBSET_LT11_Add.progress")
    if my_file.is_file ():
        LT11_Add = pd.read_csv("SUBSET_LT11_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11_Add.progress')



    my_file = Path("SUBSET_LT12_Add.progress")
    if my_file.is_file ():
        LT12_Add = pd.read_csv("SUBSET_LT12_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12_Add.progress')


    my_file = Path("SUBSET_LT13_Add.progress")
    if my_file.is_file ():
        LT13_Add = pd.read_csv("SUBSET_LT13_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13_Add.progress')


    my_file = Path("SUBSET_LT14_Add.progress")
    if my_file.is_file ():
        LT14_Add = pd.read_csv("SUBSET_LT14_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14_Add.progress')


    my_file = Path("SUBSET_LT15_Add.progress")
    if my_file.is_file ():
        LT15_Add = pd.read_csv("SUBSET_LT15_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15_Add.progress')



    my_file = Path("SUBSET_LT16_Add.progress")
    if my_file.is_file ():
        LT16_Add = pd.read_csv("SUBSET_LT16_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16_Add.progress')



    my_file = Path("SUBSET_LT17_Add.progress")
    if my_file.is_file ():
        LT17_Add = pd.read_csv("SUBSET_LT17_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17_Add.progress')



    my_file = Path("SUBSET_LT18_Add.progress")
    if my_file.is_file ():
        LT18_Add = pd.read_csv("SUBSET_LT18_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18_Add.progress')



    my_file = Path("MAIN_LT_Add.progress")
    if my_file.is_file ():
        LT_MAIN_Add = pd.read_csv("MAIN_LT_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT_Add.progress')












if Prog2.exists ():
    my_file = Path("SUBSET_LT1_AddDom.progress")
    if my_file.is_file ():
        LT1_AddDom = pd.read_csv("SUBSET_LT1_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1_AddDom.progress')


    my_file = Path("SUBSET_LT2_AddDom.progress")
    if my_file.is_file ():
        LT2_AddDom = pd.read_csv("SUBSET_LT2_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2_AddDom.progress')


    my_file = Path("SUBSET_LT3_AddDom.progress")
    if my_file.is_file ():
        LT3_AddDom = pd.read_csv("SUBSET_LT3_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3_AddDom.progress')


    my_file = Path("SUBSET_LT4_AddDom.progress")
    if my_file.is_file ():
        LT4_AddDom = pd.read_csv("SUBSET_LT4_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4_AddDom.progress')


    my_file = Path("SUBSET_LT5_AddDom.progress")
    if my_file.is_file ():
        LT5_AddDom = pd.read_csv("SUBSET_LT5_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5_AddDom.progress')

    
    my_file = Path("SUBSET_LT6_AddDom.progress")
    if my_file.is_file ():
        LT6_AddDom = pd.read_csv("SUBSET_LT6_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6_AddDom.progress')


    my_file = Path("SUBSET_LT7_AddDom.progress")
    if my_file.is_file ():
        LT7_AddDom = pd.read_csv("SUBSET_LT7_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7_AddDom.progress')


    my_file = Path("SUBSET_LT8_AddDom.progress")
    if my_file.is_file ():
        LT8_AddDom = pd.read_csv("SUBSET_LT8_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8_AddDom.progress')


    my_file = Path("SUBSET_LT9_AddDom.progress")
    if my_file.is_file ():
        LT9_AddDom = pd.read_csv("SUBSET_LT9_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9_AddDom.progress')


    my_file = Path("SUBSET_LT10_AddDom.progress")
    if my_file.is_file ():
        LT10_AddDom = pd.read_csv("SUBSET_LT10_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10_AddDom.progress')


    my_file = Path("SUBSET_LT11_AddDom.progress")
    if my_file.is_file ():
        LT11_AddDom = pd.read_csv("SUBSET_LT11_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11_AddDom.progress')



    my_file = Path("SUBSET_LT12_AddDom.progress")
    if my_file.is_file ():
        LT12_AddDom = pd.read_csv("SUBSET_LT12_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12_AddDom.progress')


    my_file = Path("SUBSET_LT13_AddDom.progress")
    if my_file.is_file ():
        LT13_AddDom = pd.read_csv("SUBSET_LT13_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13_AddDom.progress')


    my_file = Path("SUBSET_LT14_AddDom.progress")
    if my_file.is_file ():
        LT14_AddDom = pd.read_csv("SUBSET_LT14_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14_AddDom.progress')


    my_file = Path("SUBSET_LT15_AddDom.progress")
    if my_file.is_file ():
        LT15_AddDom = pd.read_csv("SUBSET_LT15_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15_AddDom.progress')



    my_file = Path("SUBSET_LT16_AddDom.progress")
    if my_file.is_file ():
        LT16_AddDom = pd.read_csv("SUBSET_LT16_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16_AddDom.progress')



    my_file = Path("SUBSET_LT17_AddDom.progress")
    if my_file.is_file ():
        LT17_AddDom = pd.read_csv("SUBSET_LT17_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17_AddDom.progress')



    my_file = Path("SUBSET_LT18_AddDom.progress")
    if my_file.is_file ():
        LT18_AddDom = pd.read_csv("SUBSET_LT18_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18_AddDom.progress')



    my_file = Path("MAIN_LT_AddDom.progress")
    if my_file.is_file ():
        LT_MAIN_AddDom = pd.read_csv("MAIN_LT_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT_AddDom.progress')











if Prog2.exists ():
    my_file = Path("SUBSET_LT1_AddDomOD.progress")
    if my_file.is_file ():
        LT1_AddDomOD = pd.read_csv("SUBSET_LT1_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1_AddDomOD.progress')


    my_file = Path("SUBSET_LT2_AddDomOD.progress")
    if my_file.is_file ():
        LT2_AddDomOD = pd.read_csv("SUBSET_LT2_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2_AddDomOD.progress')


    my_file = Path("SUBSET_LT3_AddDomOD.progress")
    if my_file.is_file ():
        LT3_AddDomOD = pd.read_csv("SUBSET_LT3_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3_AddDomOD.progress')


    my_file = Path("SUBSET_LT4_AddDomOD.progress")
    if my_file.is_file ():
        LT4_AddDomOD = pd.read_csv("SUBSET_LT4_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4_AddDomOD.progress')


    my_file = Path("SUBSET_LT5_AddDomOD.progress")
    if my_file.is_file ():
        LT5_AddDomOD = pd.read_csv("SUBSET_LT5_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5_AddDomOD.progress')

    
    my_file = Path("SUBSET_LT6_AddDomOD.progress")
    if my_file.is_file ():
        LT6_AddDomOD = pd.read_csv("SUBSET_LT6_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6_AddDomOD.progress')


    my_file = Path("SUBSET_LT7_AddDomOD.progress")
    if my_file.is_file ():
        LT7_AddDomOD = pd.read_csv("SUBSET_LT7_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7_AddDomOD.progress')


    my_file = Path("SUBSET_LT8_AddDomOD.progress")
    if my_file.is_file ():
        LT8_AddDomOD = pd.read_csv("SUBSET_LT8_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8_AddDomOD.progress')


    my_file = Path("SUBSET_LT9_AddDomOD.progress")
    if my_file.is_file ():
        LT9_AddDomOD = pd.read_csv("SUBSET_LT9_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9_AddDomOD.progress')


    my_file = Path("SUBSET_LT10_AddDomOD.progress")
    if my_file.is_file ():
        LT10_AddDomOD = pd.read_csv("SUBSET_LT10_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10_AddDomOD.progress')


    my_file = Path("SUBSET_LT11_AddDomOD.progress")
    if my_file.is_file ():
        LT11_AddDomOD = pd.read_csv("SUBSET_LT11_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11_AddDomOD.progress')



    my_file = Path("SUBSET_LT12_AddDomOD.progress")
    if my_file.is_file ():
        LT12_AddDomOD = pd.read_csv("SUBSET_LT12_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12_AddDomOD.progress')


    my_file = Path("SUBSET_LT13_AddDomOD.progress")
    if my_file.is_file ():
        LT13_AddDomOD = pd.read_csv("SUBSET_LT13_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13_AddDomOD.progress')


    my_file = Path("SUBSET_LT14_AddDomOD.progress")
    if my_file.is_file ():
        LT14_AddDomOD = pd.read_csv("SUBSET_LT14_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14_AddDomOD.progress')


    my_file = Path("SUBSET_LT15_AddDomOD.progress")
    if my_file.is_file ():
        LT15_AddDomOD = pd.read_csv("SUBSET_LT15_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15_AddDomOD.progress')



    my_file = Path("SUBSET_LT16_AddDomOD.progress")
    if my_file.is_file ():
        LT16_AddDomOD = pd.read_csv("SUBSET_LT16_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16_AddDomOD.progress')



    my_file = Path("SUBSET_LT17_AddDomOD.progress")
    if my_file.is_file ():
        LT17_AddDomOD = pd.read_csv("SUBSET_LT17_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17_AddDomOD.progress')



    my_file = Path("SUBSET_LT18_AddDomOD.progress")
    if my_file.is_file ():
        LT18_AddDomOD = pd.read_csv("SUBSET_LT18_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18_AddDomOD.progress')



    my_file = Path("MAIN_LT_AddDomOD.progress")
    if my_file.is_file ():
        LT_MAIN_AddDomOD = pd.read_csv("MAIN_LT_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT_AddDomOD.progress')













if Prog2.exists ():
    my_file = Path("SUBSET_LT1_AddDomODHet.progress")
    if my_file.is_file ():
        LT1_AddDomODHet = pd.read_csv("SUBSET_LT1_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT1_AddDomODHet.progress')


    my_file = Path("SUBSET_LT2_AddDomODHet.progress")
    if my_file.is_file ():
        LT2_AddDomODHet = pd.read_csv("SUBSET_LT2_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT2_AddDomODHet.progress')


    my_file = Path("SUBSET_LT3_AddDomODHet.progress")
    if my_file.is_file ():
        LT3_AddDomODHet = pd.read_csv("SUBSET_LT3_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT3_AddDomODHet.progress')


    my_file = Path("SUBSET_LT4_AddDomODHet.progress")
    if my_file.is_file ():
        LT4_AddDomODHet = pd.read_csv("SUBSET_LT4_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT4_AddDomODHet.progress')


    my_file = Path("SUBSET_LT5_AddDomODHet.progress")
    if my_file.is_file ():
        LT5_AddDomODHet = pd.read_csv("SUBSET_LT5_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT5_AddDomODHet.progress')

    
    my_file = Path("SUBSET_LT6_AddDomODHet.progress")
    if my_file.is_file ():
        LT6_AddDomODHet = pd.read_csv("SUBSET_LT6_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT6_AddDomODHet.progress')


    my_file = Path("SUBSET_LT7_AddDomODHet.progress")
    if my_file.is_file ():
        LT7_AddDomODHet = pd.read_csv("SUBSET_LT7_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT7_AddDomODHet.progress')


    my_file = Path("SUBSET_LT8_AddDomODHet.progress")
    if my_file.is_file ():
        LT8_AddDomODHet = pd.read_csv("SUBSET_LT8_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT8_AddDomODHet.progress')


    my_file = Path("SUBSET_LT9_AddDomODHet.progress")
    if my_file.is_file ():
        LT9_AddDomODHet = pd.read_csv("SUBSET_LT9_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT9_AddDomODHet.progress')


    my_file = Path("SUBSET_LT10_AddDomODHet.progress")
    if my_file.is_file ():
        LT10_AddDomODHet = pd.read_csv("SUBSET_LT10_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT10_AddDomODHet.progress')


    my_file = Path("SUBSET_LT11_AddDomODHet.progress")
    if my_file.is_file ():
        LT11_AddDomODHet = pd.read_csv("SUBSET_LT11_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT11_AddDomODHet.progress')



    my_file = Path("SUBSET_LT12_AddDomODHet.progress")
    if my_file.is_file ():
        LT12_AddDomODHet = pd.read_csv("SUBSET_LT12_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT12_AddDomODHet.progress')


    my_file = Path("SUBSET_LT13_AddDomODHet.progress")
    if my_file.is_file ():
        LT13_AddDomODHet = pd.read_csv("SUBSET_LT13_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT13_AddDomODHet.progress')


    my_file = Path("SUBSET_LT14_AddDomODHet.progress")
    if my_file.is_file ():
        LT14_AddDomODHet = pd.read_csv("SUBSET_LT14_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT14_AddDomODHet.progress')


    my_file = Path("SUBSET_LT15_AddDomODHet.progress")
    if my_file.is_file ():
        LT15_AddDomODHet = pd.read_csv("SUBSET_LT15_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT15_AddDomODHet.progress')



    my_file = Path("SUBSET_LT16_AddDomODHet.progress")
    if my_file.is_file ():
        LT16_AddDomODHet = pd.read_csv("SUBSET_LT16_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT16_AddDomODHet.progress')



    my_file = Path("SUBSET_LT17_AddDomODHet.progress")
    if my_file.is_file ():
        LT17_AddDomODHet = pd.read_csv("SUBSET_LT17_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT17_AddDomODHet.progress')



    my_file = Path("SUBSET_LT18_AddDomODHet.progress")
    if my_file.is_file ():
        LT18_AddDomODHet = pd.read_csv("SUBSET_LT18_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'SUBSET_LT18_AddDomODHet.progress')



    my_file = Path("MAIN_LT_AddDomODHet.progress")
    if my_file.is_file ():
        LT_MAIN_AddDomODHet = pd.read_csv("MAIN_LT_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])

    else:
        shutil.copyfile('SUBSET_LT.prog', 'MAIN_LT_AddDomODHet.progress')




















        
    LT1_Add = pd.read_csv("SUBSET_LT1_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2_Add = pd.read_csv("SUBSET_LT2_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3_Add = pd.read_csv("SUBSET_LT3_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4_Add = pd.read_csv("SUBSET_LT4_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5_Add = pd.read_csv("SUBSET_LT5_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6_Add = pd.read_csv("SUBSET_LT6_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7_Add = pd.read_csv("SUBSET_LT7_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8_Add = pd.read_csv("SUBSET_LT8_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9_Add = pd.read_csv("SUBSET_LT9_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10_Add = pd.read_csv("SUBSET_LT10_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11_Add = pd.read_csv("SUBSET_LT11_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12_Add = pd.read_csv("SUBSET_LT12_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13_Add = pd.read_csv("SUBSET_LT13_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14_Add = pd.read_csv("SUBSET_LT14_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15_Add = pd.read_csv("SUBSET_LT15_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16_Add = pd.read_csv("SUBSET_LT16_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17_Add = pd.read_csv("SUBSET_LT17_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18_Add = pd.read_csv("SUBSET_LT18_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN_Add = pd.read_csv("MAIN_LT_Add.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1_Add = LT1_Add['Her_All']
    SUBSET_reml_LT2_Add = LT2_Add['Her_All']
    SUBSET_reml_LT3_Add = LT3_Add['Her_All']
    SUBSET_reml_LT4_Add = LT4_Add['Her_All']
    SUBSET_reml_LT5_Add = LT5_Add['Her_All']
    SUBSET_reml_LT6_Add = LT6_Add['Her_All']
    SUBSET_reml_LT7_Add = LT7_Add['Her_All']
    SUBSET_reml_LT8_Add = LT8_Add['Her_All']
    SUBSET_reml_LT9_Add = LT9_Add['Her_All']
    SUBSET_reml_LT10_Add = LT10_Add['Her_All']
    SUBSET_reml_LT11_Add = LT11_Add['Her_All']
    SUBSET_reml_LT12_Add = LT12_Add['Her_All']
    SUBSET_reml_LT13_Add = LT13_Add['Her_All']
    SUBSET_reml_LT14_Add = LT14_Add['Her_All']
    SUBSET_reml_LT15_Add = LT15_Add['Her_All']
    SUBSET_reml_LT16_Add = LT16_Add['Her_All']
    SUBSET_reml_LT17_Add = LT17_Add['Her_All']
    SUBSET_reml_LT18_Add = LT18_Add['Her_All']
    MAIN_reml_LT_Add = LT_MAIN_Add['Her_All']

    SUBSET_reml_LT1_Add.to_csv('SUBSET_reml_LT1_Add.csv', header=False, index=False)
    SUBSET_reml_LT2_Add.to_csv('SUBSET_reml_LT2_Add.csv', header=False, index=False)
    SUBSET_reml_LT3_Add.to_csv('SUBSET_reml_LT3_Add.csv', header=False, index=False)
    SUBSET_reml_LT4_Add.to_csv('SUBSET_reml_LT4_Add.csv', header=False, index=False)
    SUBSET_reml_LT5_Add.to_csv('SUBSET_reml_LT5_Add.csv', header=False, index=False)
    SUBSET_reml_LT6_Add.to_csv('SUBSET_reml_LT6_Add.csv', header=False, index=False)
    SUBSET_reml_LT7_Add.to_csv('SUBSET_reml_LT7_Add.csv', header=False, index=False)
    SUBSET_reml_LT8_Add.to_csv('SUBSET_reml_LT8_Add.csv', header=False, index=False)
    SUBSET_reml_LT9_Add.to_csv('SUBSET_reml_LT9_Add.csv', header=False, index=False)
    SUBSET_reml_LT10_Add.to_csv('SUBSET_reml_LT10_Add.csv', header=False, index=False)
    SUBSET_reml_LT11_Add.to_csv('SUBSET_reml_LT11_Add.csv', header=False, index=False)
    SUBSET_reml_LT12_Add.to_csv('SUBSET_reml_LT12_Add.csv', header=False, index=False)
    SUBSET_reml_LT13_Add.to_csv('SUBSET_reml_LT13_Add.csv', header=False, index=False)
    SUBSET_reml_LT14_Add.to_csv('SUBSET_reml_LT14_Add.csv', header=False, index=False)
    SUBSET_reml_LT15_Add.to_csv('SUBSET_reml_LT15_Add.csv', header=False, index=False)
    SUBSET_reml_LT16_Add.to_csv('SUBSET_reml_LT16_Add.csv', header=False, index=False)
    SUBSET_reml_LT17_Add.to_csv('SUBSET_reml_LT17_Add.csv', header=False, index=False)
    SUBSET_reml_LT18_Add.to_csv('SUBSET_reml_LT18_Add.csv', header=False, index=False)
    MAIN_reml_LT_Add.to_csv('MAIN_reml_LT_Add.csv', header=False, index=False)







    LT1_AddDom = pd.read_csv("SUBSET_LT1_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2_AddDom = pd.read_csv("SUBSET_LT2_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3_AddDom = pd.read_csv("SUBSET_LT3_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4_AddDom = pd.read_csv("SUBSET_LT4_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5_AddDom = pd.read_csv("SUBSET_LT5_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6_AddDom = pd.read_csv("SUBSET_LT6_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7_AddDom = pd.read_csv("SUBSET_LT7_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8_AddDom = pd.read_csv("SUBSET_LT8_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9_AddDom = pd.read_csv("SUBSET_LT9_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10_AddDom = pd.read_csv("SUBSET_LT10_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11_AddDom = pd.read_csv("SUBSET_LT11_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12_AddDom = pd.read_csv("SUBSET_LT12_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13_AddDom = pd.read_csv("SUBSET_LT13_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14_AddDom = pd.read_csv("SUBSET_LT14_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15_AddDom = pd.read_csv("SUBSET_LT15_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16_AddDom = pd.read_csv("SUBSET_LT16_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17_AddDom = pd.read_csv("SUBSET_LT17_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18_AddDom = pd.read_csv("SUBSET_LT18_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN_AddDom = pd.read_csv("MAIN_LT_AddDom.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1_AddDom = LT1_AddDom['Her_All']
    SUBSET_reml_LT2_AddDom = LT2_AddDom['Her_All']
    SUBSET_reml_LT3_AddDom = LT3_AddDom['Her_All']
    SUBSET_reml_LT4_AddDom = LT4_AddDom['Her_All']
    SUBSET_reml_LT5_AddDom = LT5_AddDom['Her_All']
    SUBSET_reml_LT6_AddDom = LT6_AddDom['Her_All']
    SUBSET_reml_LT7_AddDom = LT7_AddDom['Her_All']
    SUBSET_reml_LT8_AddDom = LT8_AddDom['Her_All']
    SUBSET_reml_LT9_AddDom = LT9_AddDom['Her_All']
    SUBSET_reml_LT10_AddDom = LT10_AddDom['Her_All']
    SUBSET_reml_LT11_AddDom = LT11_AddDom['Her_All']
    SUBSET_reml_LT12_AddDom = LT12_AddDom['Her_All']
    SUBSET_reml_LT13_AddDom = LT13_AddDom['Her_All']
    SUBSET_reml_LT14_AddDom = LT14_AddDom['Her_All']
    SUBSET_reml_LT15_AddDom = LT15_AddDom['Her_All']
    SUBSET_reml_LT16_AddDom = LT16_AddDom['Her_All']
    SUBSET_reml_LT17_AddDom = LT17_AddDom['Her_All']
    SUBSET_reml_LT18_AddDom = LT18_AddDom['Her_All']
    MAIN_reml_LT_AddDom = LT_MAIN_AddDom['Her_All']

    SUBSET_reml_LT1_AddDom.to_csv('SUBSET_reml_LT1_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT2_AddDom.to_csv('SUBSET_reml_LT2_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT3_AddDom.to_csv('SUBSET_reml_LT3_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT4_AddDom.to_csv('SUBSET_reml_LT4_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT5_AddDom.to_csv('SUBSET_reml_LT5_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT6_AddDom.to_csv('SUBSET_reml_LT6_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT7_AddDom.to_csv('SUBSET_reml_LT7_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT8_AddDom.to_csv('SUBSET_reml_LT8_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT9_AddDom.to_csv('SUBSET_reml_LT9_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT10_AddDom.to_csv('SUBSET_reml_LT10_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT11_AddDom.to_csv('SUBSET_reml_LT11_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT12_AddDom.to_csv('SUBSET_reml_LT12_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT13_AddDom.to_csv('SUBSET_reml_LT13_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT14_AddDom.to_csv('SUBSET_reml_LT14_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT15_AddDom.to_csv('SUBSET_reml_LT15_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT16_AddDom.to_csv('SUBSET_reml_LT16_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT17_AddDom.to_csv('SUBSET_reml_LT17_AddDom.csv', header=False, index=False)
    SUBSET_reml_LT18_AddDom.to_csv('SUBSET_reml_LT18_AddDom.csv', header=False, index=False)
    MAIN_reml_LT_AddDom.to_csv('MAIN_reml_LT_AddDom.csv', header=False, index=False)






    LT1_AddDomOD = pd.read_csv("SUBSET_LT1_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2_AddDomOD = pd.read_csv("SUBSET_LT2_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3_AddDomOD = pd.read_csv("SUBSET_LT3_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4_AddDomOD = pd.read_csv("SUBSET_LT4_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5_AddDomOD = pd.read_csv("SUBSET_LT5_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6_AddDomOD = pd.read_csv("SUBSET_LT6_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7_AddDomOD = pd.read_csv("SUBSET_LT7_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8_AddDomOD = pd.read_csv("SUBSET_LT8_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9_AddDomOD = pd.read_csv("SUBSET_LT9_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10_AddDomOD = pd.read_csv("SUBSET_LT10_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11_AddDomOD = pd.read_csv("SUBSET_LT11_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12_AddDomOD = pd.read_csv("SUBSET_LT12_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13_AddDomOD = pd.read_csv("SUBSET_LT13_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14_AddDomOD = pd.read_csv("SUBSET_LT14_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15_AddDomOD = pd.read_csv("SUBSET_LT15_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16_AddDomOD = pd.read_csv("SUBSET_LT16_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17_AddDomOD = pd.read_csv("SUBSET_LT17_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18_AddDomOD = pd.read_csv("SUBSET_LT18_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN_AddDomOD = pd.read_csv("MAIN_LT_AddDomOD.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1_AddDomOD = LT1_AddDomOD['Her_All']
    SUBSET_reml_LT2_AddDomOD = LT2_AddDomOD['Her_All']
    SUBSET_reml_LT3_AddDomOD = LT3_AddDomOD['Her_All']
    SUBSET_reml_LT4_AddDomOD = LT4_AddDomOD['Her_All']
    SUBSET_reml_LT5_AddDomOD = LT5_AddDomOD['Her_All']
    SUBSET_reml_LT6_AddDomOD = LT6_AddDomOD['Her_All']
    SUBSET_reml_LT7_AddDomOD = LT7_AddDomOD['Her_All']
    SUBSET_reml_LT8_AddDomOD = LT8_AddDomOD['Her_All']
    SUBSET_reml_LT9_AddDomOD = LT9_AddDomOD['Her_All']
    SUBSET_reml_LT10_AddDomOD = LT10_AddDomOD['Her_All']
    SUBSET_reml_LT11_AddDomOD = LT11_AddDomOD['Her_All']
    SUBSET_reml_LT12_AddDomOD = LT12_AddDomOD['Her_All']
    SUBSET_reml_LT13_AddDomOD = LT13_AddDomOD['Her_All']
    SUBSET_reml_LT14_AddDomOD = LT14_AddDomOD['Her_All']
    SUBSET_reml_LT15_AddDomOD = LT15_AddDomOD['Her_All']
    SUBSET_reml_LT16_AddDomOD = LT16_AddDomOD['Her_All']
    SUBSET_reml_LT17_AddDomOD = LT17_AddDomOD['Her_All']
    SUBSET_reml_LT18_AddDomOD = LT18_AddDomOD['Her_All']
    MAIN_reml_LT_AddDomOD = LT_MAIN_AddDomOD['Her_All']

    SUBSET_reml_LT1_AddDomOD.to_csv('SUBSET_reml_LT1_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT2_AddDomOD.to_csv('SUBSET_reml_LT2_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT3_AddDomOD.to_csv('SUBSET_reml_LT3_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT4_AddDomOD.to_csv('SUBSET_reml_LT4_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT5_AddDomOD.to_csv('SUBSET_reml_LT5_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT6_AddDomOD.to_csv('SUBSET_reml_LT6_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT7_AddDomOD.to_csv('SUBSET_reml_LT7_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT8_AddDomOD.to_csv('SUBSET_reml_LT8_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT9_AddDomOD.to_csv('SUBSET_reml_LT9_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT10_AddDomOD.to_csv('SUBSET_reml_LT10_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT11_AddDomOD.to_csv('SUBSET_reml_LT11_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT12_AddDomOD.to_csv('SUBSET_reml_LT12_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT13_AddDomOD.to_csv('SUBSET_reml_LT13_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT14_AddDomOD.to_csv('SUBSET_reml_LT14_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT15_AddDomOD.to_csv('SUBSET_reml_LT15_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT16_AddDomOD.to_csv('SUBSET_reml_LT16_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT17_AddDomOD.to_csv('SUBSET_reml_LT17_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_LT18_AddDomOD.to_csv('SUBSET_reml_LT18_AddDomOD.csv', header=False, index=False)
    MAIN_reml_LT_AddDomOD.to_csv('MAIN_reml_LT_AddDomOD.csv', header=False, index=False)
















    LT1_AddDomODHet = pd.read_csv("SUBSET_LT1_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT2_AddDomODHet = pd.read_csv("SUBSET_LT2_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT3_AddDomODHet = pd.read_csv("SUBSET_LT3_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT4_AddDomODHet = pd.read_csv("SUBSET_LT4_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT5_AddDomODHet = pd.read_csv("SUBSET_LT5_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT6_AddDomODHet = pd.read_csv("SUBSET_LT6_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT7_AddDomODHet = pd.read_csv("SUBSET_LT7_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT8_AddDomODHet = pd.read_csv("SUBSET_LT8_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT9_AddDomODHet = pd.read_csv("SUBSET_LT9_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT10_AddDomODHet = pd.read_csv("SUBSET_LT10_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT11_AddDomODHet = pd.read_csv("SUBSET_LT11_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT12_AddDomODHet = pd.read_csv("SUBSET_LT12_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT13_AddDomODHet = pd.read_csv("SUBSET_LT13_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT14_AddDomODHet = pd.read_csv("SUBSET_LT14_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT15_AddDomODHet = pd.read_csv("SUBSET_LT15_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT16_AddDomODHet = pd.read_csv("SUBSET_LT16_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT17_AddDomODHet = pd.read_csv("SUBSET_LT17_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT18_AddDomODHet = pd.read_csv("SUBSET_LT18_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])
    LT_MAIN_AddDomODHet = pd.read_csv("MAIN_LT_AddDomODHet.progress", sep="\t", usecols=["Iteration", "Her_K1", "Her_All", "Total_Variance", "Likelihood", "Difference", "Target", "Num_Constrained"])


    SUBSET_reml_LT1_AddDomODHet = LT1_AddDomODHet['Her_All']
    SUBSET_reml_LT2_AddDomODHet = LT2_AddDomODHet['Her_All']
    SUBSET_reml_LT3_AddDomODHet = LT3_AddDomODHet['Her_All']
    SUBSET_reml_LT4_AddDomODHet = LT4_AddDomODHet['Her_All']
    SUBSET_reml_LT5_AddDomODHet = LT5_AddDomODHet['Her_All']
    SUBSET_reml_LT6_AddDomODHet = LT6_AddDomODHet['Her_All']
    SUBSET_reml_LT7_AddDomODHet = LT7_AddDomODHet['Her_All']
    SUBSET_reml_LT8_AddDomODHet = LT8_AddDomODHet['Her_All']
    SUBSET_reml_LT9_AddDomODHet = LT9_AddDomODHet['Her_All']
    SUBSET_reml_LT10_AddDomODHet = LT10_AddDomODHet['Her_All']
    SUBSET_reml_LT11_AddDomODHet = LT11_AddDomODHet['Her_All']
    SUBSET_reml_LT12_AddDomODHet = LT12_AddDomODHet['Her_All']
    SUBSET_reml_LT13_AddDomODHet = LT13_AddDomODHet['Her_All']
    SUBSET_reml_LT14_AddDomODHet = LT14_AddDomODHet['Her_All']
    SUBSET_reml_LT15_AddDomODHet = LT15_AddDomODHet['Her_All']
    SUBSET_reml_LT16_AddDomODHet = LT16_AddDomODHet['Her_All']
    SUBSET_reml_LT17_AddDomODHet = LT17_AddDomODHet['Her_All']
    SUBSET_reml_LT18_AddDomODHet = LT18_AddDomODHet['Her_All']
    MAIN_reml_LT_AddDomODHet = LT_MAIN_AddDomODHet['Her_All']

    SUBSET_reml_LT1_AddDomODHet.to_csv('SUBSET_reml_LT1_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT2_AddDomODHet.to_csv('SUBSET_reml_LT2_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT3_AddDomODHet.to_csv('SUBSET_reml_LT3_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT4_AddDomODHet.to_csv('SUBSET_reml_LT4_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT5_AddDomODHet.to_csv('SUBSET_reml_LT5_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT6_AddDomODHet.to_csv('SUBSET_reml_LT6_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT7_AddDomODHet.to_csv('SUBSET_reml_LT7_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT8_AddDomODHet.to_csv('SUBSET_reml_LT8_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT9_AddDomODHet.to_csv('SUBSET_reml_LT9_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT10_AddDomODHet.to_csv('SUBSET_reml_LT10_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT11_AddDomODHet.to_csv('SUBSET_reml_LT11_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT12_AddDomODHet.to_csv('SUBSET_reml_LT12_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT13_AddDomODHet.to_csv('SUBSET_reml_LT13_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT14_AddDomODHet.to_csv('SUBSET_reml_LT14_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT15_AddDomODHet.to_csv('SUBSET_reml_LT15_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT16_AddDomODHet.to_csv('SUBSET_reml_LT16_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT17_AddDomODHet.to_csv('SUBSET_reml_LT17_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_LT18_AddDomODHet.to_csv('SUBSET_reml_LT18_AddDomODHet.csv', header=False, index=False)
    MAIN_reml_LT_AddDomODHet.to_csv('MAIN_reml_LT_AddDomODHet.csv', header=False, index=False)


















file = pathlib.Path("SUBSET_reml_LT1_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT1_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT2_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT3_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT4_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT5_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT6_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT7_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT8_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT9_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT10_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT11_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT12_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT13_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT14_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT15_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT16_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT17_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18_Add.csv")
if file.exists ():
    with open("SUBSET_reml_LT18_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT_Add.csv")
if file.exists ():
    with open("MAIN_reml_LT_Add.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_Add', 'a') as out_fileT:
        out_fileT.write(str(last_line))





file = pathlib.Path("SUBSET_reml_LT1_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT1_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT2_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT3_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT4_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT5_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT6_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT7_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT8_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT9_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT10_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT11_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT12_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT13_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT14_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT15_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT16_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT17_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_LT18_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT_AddDom.csv")
if file.exists ():
    with open("MAIN_reml_LT_AddDom.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDom', 'a') as out_fileT:
        out_fileT.write(str(last_line))







file = pathlib.Path("SUBSET_reml_LT1_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT1_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT2_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT3_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT4_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT5_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT6_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT7_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT8_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT9_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT10_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT11_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT12_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT13_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT14_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT15_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT16_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT17_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_LT18_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT_AddDomOD.csv")
if file.exists ():
    with open("MAIN_reml_LT_AddDomOD.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomOD', 'a') as out_fileT:
        out_fileT.write(str(last_line))
















file = pathlib.Path("SUBSET_reml_LT1_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT1_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT2_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT2_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        

file = pathlib.Path("SUBSET_reml_LT3_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT3_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))

  
file = pathlib.Path("SUBSET_reml_LT4_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT4_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
            

file = pathlib.Path("SUBSET_reml_LT5_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT5_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT6_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT6_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT7_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT7_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT8_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT8_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))


file = pathlib.Path("SUBSET_reml_LT9_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT9_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT10_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT10_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
   
    
file = pathlib.Path("SUBSET_reml_LT11_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT11_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT12_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT12_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
 
        
file = pathlib.Path("SUBSET_reml_LT13_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT13_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT14_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT14_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT15_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT15_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
    
file = pathlib.Path("SUBSET_reml_LT16_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT16_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
    

file = pathlib.Path("SUBSET_reml_LT17_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT17_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("SUBSET_reml_LT18_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_LT18_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))
        
        
file = pathlib.Path("MAIN_reml_LT_AddDomODHet.csv")
if file.exists ():
    with open("MAIN_reml_LT_AddDomODHet.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_LT_AddDomODHet', 'a') as out_fileT:
        out_fileT.write(str(last_line))

















if Prog3.exists ():
    my_file = Path("SUBSET_GREML1_Add.hsq")
    if my_file.is_file():
        G1_Add = pd.read_csv("SUBSET_GREML1_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1_Add.hsq')


    my_file = Path("SUBSET_GREML2_Add.hsq")
    if my_file.is_file():
        G2_Add = pd.read_csv("SUBSET_GREML2_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2_Add.hsq')


    my_file = Path("SUBSET_GREML3_Add.hsq")
    if my_file.is_file():
        G3_Add = pd.read_csv("SUBSET_GREML3_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3_Add.hsq')


    my_file = Path("SUBSET_GREML4_Add.hsq")
    if my_file.is_file():
        G4_Add = pd.read_csv("SUBSET_GREML4_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4_Add.hsq')


    my_file = Path("SUBSET_GREML5_Add.hsq")
    if my_file.is_file():
        G5_Add = pd.read_csv("SUBSET_GREML5_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5_Add.hsq')

    
    my_file = Path("SUBSET_GREML6_Add.hsq")
    if my_file.is_file():
        G6_Add = pd.read_csv("SUBSET_GREML6_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6_Add.hsq')


    my_file = Path("SUBSET_GREML7_Add.hsq")
    if my_file.is_file():
        G7_Add = pd.read_csv("SUBSET_GREML7_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7_Add.hsq')


    my_file = Path("SUBSET_GREML8_Add.hsq")
    if my_file.is_file():
        G8_Add = pd.read_csv("SUBSET_GREML8_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8_Add.hsq')


    my_file = Path("SUBSET_GREML9_Add.hsq")
    if my_file.is_file():
        G9_Add = pd.read_csv("SUBSET_GREML9_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9_Add.hsq')


    my_file = Path("SUBSET_GREML10_Add.hsq")
    if my_file.is_file():
        G10_Add = pd.read_csv("SUBSET_GREML10_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10_Add.hsq')


    my_file = Path("SUBSET_GREML11_Add.hsq")
    if my_file.is_file():
        G11_Add = pd.read_csv("SUBSET_GREML11_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11_Add.hsq')



    my_file = Path("SUBSET_GREML12_Add.hsq")
    if my_file.is_file():
        G12_Add = pd.read_csv("SUBSET_GREML12_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12_Add.hsq')


    my_file = Path("SUBSET_GREML13_Add.hsq")
    if my_file.is_file():
        G13_Add = pd.read_csv("SUBSET_GREML13_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13_Add.hsq')


    my_file = Path("SUBSET_GREML14_Add.hsq")
    if my_file.is_file():
        G14_Add = pd.read_csv("SUBSET_GREML14_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14_Add.hsq')


    my_file = Path("SUBSET_GREML15_Add.hsq")
    if my_file.is_file():
        G15_Add = pd.read_csv("SUBSET_GREML15_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15_Add.hsq')



    my_file = Path("SUBSET_GREML16_Add.hsq")
    if my_file.is_file():
        G16_Add = pd.read_csv("SUBSET_GREML16_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16_Add.hsq')



    my_file = Path("SUBSET_GREML17_Add.hsq")
    if my_file.is_file():
        G17_Add = pd.read_csv("SUBSET_GREML17_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17_Add.hsq')



    my_file = Path("SUBSET_GREML18_Add.hsq")
    if my_file.is_file():
        G18_Add = pd.read_csv("SUBSET_GREML18_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18_Add.hsq')



    my_file = Path("MAIN_GREML_L_Add.hsq")
    if my_file.is_file():
        G_MAIN_Add = pd.read_csv("MAIN_GREML_L_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML_L_Add.hsq')





if Prog3.exists ():
    my_file = Path("SUBSET_GREML1_AddDom.hsq")
    if my_file.is_file():
        G1_AddDom = pd.read_csv("SUBSET_GREML1_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1_AddDom.hsq')


    my_file = Path("SUBSET_GREML2_AddDom.hsq")
    if my_file.is_file():
        G2_AddDom = pd.read_csv("SUBSET_GREML2_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2_AddDom.hsq')


    my_file = Path("SUBSET_GREML3_AddDom.hsq")
    if my_file.is_file():
        G3_AddDom = pd.read_csv("SUBSET_GREML3_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3_AddDom.hsq')


    my_file = Path("SUBSET_GREML4_AddDom.hsq")
    if my_file.is_file():
        G4_AddDom = pd.read_csv("SUBSET_GREML4_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4_AddDom.hsq')


    my_file = Path("SUBSET_GREML5_AddDom.hsq")
    if my_file.is_file():
        G5_AddDom = pd.read_csv("SUBSET_GREML5_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5_AddDom.hsq')

    
    my_file = Path("SUBSET_GREML6_AddDom.hsq")
    if my_file.is_file():
        G6_AddDom = pd.read_csv("SUBSET_GREML6_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6_AddDom.hsq')


    my_file = Path("SUBSET_GREML7_AddDom.hsq")
    if my_file.is_file():
        G7_AddDom = pd.read_csv("SUBSET_GREML7_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7_AddDom.hsq')


    my_file = Path("SUBSET_GREML8_AddDom.hsq")
    if my_file.is_file():
        G8_AddDom = pd.read_csv("SUBSET_GREML8_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8_AddDom.hsq')


    my_file = Path("SUBSET_GREML9_AddDom.hsq")
    if my_file.is_file():
        G9_AddDom = pd.read_csv("SUBSET_GREML9_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9_AddDom.hsq')


    my_file = Path("SUBSET_GREML10_AddDom.hsq")
    if my_file.is_file():
        G10_AddDom = pd.read_csv("SUBSET_GREML10_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10_AddDom.hsq')


    my_file = Path("SUBSET_GREML11_AddDom.hsq")
    if my_file.is_file():
        G11_AddDom = pd.read_csv("SUBSET_GREML11_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11_AddDom.hsq')



    my_file = Path("SUBSET_GREML12_AddDom.hsq")
    if my_file.is_file():
        G12_AddDom = pd.read_csv("SUBSET_GREML12_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12_AddDom.hsq')


    my_file = Path("SUBSET_GREML13_AddDom.hsq")
    if my_file.is_file():
        G13_AddDom = pd.read_csv("SUBSET_GREML13_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13_AddDom.hsq')


    my_file = Path("SUBSET_GREML14_AddDom.hsq")
    if my_file.is_file():
        G14_AddDom = pd.read_csv("SUBSET_GREML14_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14_AddDom.hsq')


    my_file = Path("SUBSET_GREML15_AddDom.hsq")
    if my_file.is_file():
        G15_AddDom = pd.read_csv("SUBSET_GREML15_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15_AddDom.hsq')



    my_file = Path("SUBSET_GREML16_AddDom.hsq")
    if my_file.is_file():
        G16_AddDom = pd.read_csv("SUBSET_GREML16_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16_AddDom.hsq')



    my_file = Path("SUBSET_GREML17_AddDom.hsq")
    if my_file.is_file():
        G17_AddDom = pd.read_csv("SUBSET_GREML17_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17_AddDom.hsq')



    my_file = Path("SUBSET_GREML18_AddDom.hsq")
    if my_file.is_file():
        G18_AddDom = pd.read_csv("SUBSET_GREML18_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18_AddDom.hsq')



    my_file = Path("MAIN_GREML_L_AddDom.hsq")
    if my_file.is_file():
        G_MAIN_AddDom = pd.read_csv("MAIN_GREML_L_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML_L_AddDom.hsq')






if Prog3.exists ():
    my_file = Path("SUBSET_GREML1_AddDomOD.hsq")
    if my_file.is_file():
        G1_AddDomOD = pd.read_csv("SUBSET_GREML1_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML2_AddDomOD.hsq")
    if my_file.is_file():
        G2_AddDomOD = pd.read_csv("SUBSET_GREML2_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML3_AddDomOD.hsq")
    if my_file.is_file():
        G3_AddDomOD = pd.read_csv("SUBSET_GREML3_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML4_AddDomOD.hsq")
    if my_file.is_file():
        G4_AddDomOD = pd.read_csv("SUBSET_GREML4_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML5_AddDomOD.hsq")
    if my_file.is_file():
        G5_AddDomOD = pd.read_csv("SUBSET_GREML5_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5_AddDomOD.hsq')

    
    my_file = Path("SUBSET_GREML6_AddDomOD.hsq")
    if my_file.is_file():
        G6_AddDomOD = pd.read_csv("SUBSET_GREML6_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML7_AddDomOD.hsq")
    if my_file.is_file():
        G7_AddDomOD = pd.read_csv("SUBSET_GREML7_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML8_AddDomOD.hsq")
    if my_file.is_file():
        G8_AddDomOD = pd.read_csv("SUBSET_GREML8_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML9_AddDomOD.hsq")
    if my_file.is_file():
        G9_AddDomOD = pd.read_csv("SUBSET_GREML9_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML10_AddDomOD.hsq")
    if my_file.is_file():
        G10_AddDomOD = pd.read_csv("SUBSET_GREML10_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML11_AddDomOD.hsq")
    if my_file.is_file():
        G11_AddDomOD = pd.read_csv("SUBSET_GREML11_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11_AddDomOD.hsq')



    my_file = Path("SUBSET_GREML12_AddDomOD.hsq")
    if my_file.is_file():
        G12_AddDomOD = pd.read_csv("SUBSET_GREML12_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML13_AddDomOD.hsq")
    if my_file.is_file():
        G13_AddDomOD = pd.read_csv("SUBSET_GREML13_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML14_AddDomOD.hsq")
    if my_file.is_file():
        G14_AddDomOD = pd.read_csv("SUBSET_GREML14_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14_AddDomOD.hsq')


    my_file = Path("SUBSET_GREML15_AddDomOD.hsq")
    if my_file.is_file():
        G15_AddDomOD = pd.read_csv("SUBSET_GREML15_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15_AddDomOD.hsq')



    my_file = Path("SUBSET_GREML16_AddDomOD.hsq")
    if my_file.is_file():
        G16_AddDomOD = pd.read_csv("SUBSET_GREML16_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16_AddDomOD.hsq')



    my_file = Path("SUBSET_GREML17_AddDomOD.hsq")
    if my_file.is_file():
        G17_AddDomOD = pd.read_csv("SUBSET_GREML17_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17_AddDomOD.hsq')



    my_file = Path("SUBSET_GREML18_AddDomOD.hsq")
    if my_file.is_file():
        G18_AddDomOD = pd.read_csv("SUBSET_GREML18_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18_AddDomOD.hsq')



    my_file = Path("MAIN_GREML_L_AddDomOD.hsq")
    if my_file.is_file():
        G_MAIN_AddDomOD = pd.read_csv("MAIN_GREML_L_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML_L_AddDomOD.hsq')












if Prog3.exists ():
    my_file = Path("SUBSET_GREML1_AddDomODHet.hsq")
    if my_file.is_file():
        G1_AddDomODHet = pd.read_csv("SUBSET_GREML1_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML1_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML2_AddDomODHet.hsq")
    if my_file.is_file():
        G2_AddDomODHet = pd.read_csv("SUBSET_GREML2_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML2_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML3_AddDomODHet.hsq")
    if my_file.is_file():
        G3_AddDomODHet = pd.read_csv("SUBSET_GREML3_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML3_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML4_AddDomODHet.hsq")
    if my_file.is_file():
        G4_AddDomODHet = pd.read_csv("SUBSET_GREML4_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML4_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML5_AddDomODHet.hsq")
    if my_file.is_file():
        G5_AddDomODHet = pd.read_csv("SUBSET_GREML5_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML5_AddDomODHet.hsq')

    
    my_file = Path("SUBSET_GREML6_AddDomODHet.hsq")
    if my_file.is_file():
        G6_AddDomODHet = pd.read_csv("SUBSET_GREML6_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML6_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML7_AddDomODHet.hsq")
    if my_file.is_file():
        G7_AddDomODHet = pd.read_csv("SUBSET_GREML7_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML7_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML8_AddDomODHet.hsq")
    if my_file.is_file():
        G8_AddDomODHet = pd.read_csv("SUBSET_GREML8_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML8_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML9_AddDomODHet.hsq")
    if my_file.is_file():
        G9_AddDomODHet = pd.read_csv("SUBSET_GREML9_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML9_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML10_AddDomODHet.hsq")
    if my_file.is_file():
        G10_AddDomODHet = pd.read_csv("SUBSET_GREML10_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML10_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML11_AddDomODHet.hsq")
    if my_file.is_file():
        G11_AddDomODHet = pd.read_csv("SUBSET_GREML11_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML11_AddDomODHet.hsq')



    my_file = Path("SUBSET_GREML12_AddDomODHet.hsq")
    if my_file.is_file():
        G12_AddDomODHet = pd.read_csv("SUBSET_GREML12_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML12_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML13_AddDomODHet.hsq")
    if my_file.is_file():
        G13_AddDomODHet = pd.read_csv("SUBSET_GREML13_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML13_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML14_AddDomODHet.hsq")
    if my_file.is_file():
        G14_AddDomODHet = pd.read_csv("SUBSET_GREML14_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML14_AddDomODHet.hsq')


    my_file = Path("SUBSET_GREML15_AddDomODHet.hsq")
    if my_file.is_file():
        G15_AddDomODHet = pd.read_csv("SUBSET_GREML15_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    
    else:
        
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML15_AddDomODHet.hsq')



    my_file = Path("SUBSET_GREML16_AddDomODHet.hsq")
    if my_file.is_file():
        G16_AddDomODHet = pd.read_csv("SUBSET_GREML16_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML16_AddDomODHet.hsq')



    my_file = Path("SUBSET_GREML17_AddDomODHet.hsq")
    if my_file.is_file():
        G17_AddDomODHet = pd.read_csv("SUBSET_GREML17_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML17_AddDomODHet.hsq')



    my_file = Path("SUBSET_GREML18_AddDomODHet.hsq")
    if my_file.is_file():
        G18_AddDomODHet = pd.read_csv("SUBSET_GREML18_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'SUBSET_GREML18_AddDomODHet.hsq')



    my_file = Path("MAIN_GREML_L_AddDomODHet.hsq")
    if my_file.is_file():
        G_MAIN_AddDomODHet = pd.read_csv("MAIN_GREML_L_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])

    else:
        shutil.copyfile('SUBSET_G.hsq', 'MAIN_GREML_L_AddDomODHet.hsq')















    G1_Add = pd.read_csv("SUBSET_GREML1_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2_Add = pd.read_csv("SUBSET_GREML2_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3_Add = pd.read_csv("SUBSET_GREML3_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4_Add = pd.read_csv("SUBSET_GREML4_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5_Add = pd.read_csv("SUBSET_GREML5_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6_Add = pd.read_csv("SUBSET_GREML6_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7_Add = pd.read_csv("SUBSET_GREML7_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8_Add = pd.read_csv("SUBSET_GREML8_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9_Add = pd.read_csv("SUBSET_GREML9_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10_Add = pd.read_csv("SUBSET_GREML10_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11_Add = pd.read_csv("SUBSET_GREML11_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12_Add = pd.read_csv("SUBSET_GREML12_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13_Add = pd.read_csv("SUBSET_GREML13_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14_Add = pd.read_csv("SUBSET_GREML14_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15_Add = pd.read_csv("SUBSET_GREML15_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16_Add = pd.read_csv("SUBSET_GREML16_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17_Add = pd.read_csv("SUBSET_GREML17_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18_Add = pd.read_csv("SUBSET_GREML18_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN_Add = pd.read_csv("MAIN_GREML_L_Add.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1_Add = G1_Add['Variance']
    SUBSET_reml_G2_Add = G2_Add['Variance']
    SUBSET_reml_G3_Add = G3_Add['Variance']
    SUBSET_reml_G4_Add = G4_Add['Variance']
    SUBSET_reml_G5_Add = G5_Add['Variance']
    SUBSET_reml_G6_Add = G6_Add['Variance']
    SUBSET_reml_G7_Add = G7_Add['Variance']
    SUBSET_reml_G8_Add = G8_Add['Variance']
    SUBSET_reml_G9_Add = G9_Add['Variance']
    SUBSET_reml_G10_Add = G10_Add['Variance']
    SUBSET_reml_G11_Add = G11_Add['Variance']
    SUBSET_reml_G12_Add = G12_Add['Variance']
    SUBSET_reml_G13_Add = G13_Add['Variance']
    SUBSET_reml_G14_Add = G14_Add['Variance']
    SUBSET_reml_G15_Add = G15_Add['Variance']
    SUBSET_reml_G16_Add = G16_Add['Variance']
    SUBSET_reml_G17_Add = G17_Add['Variance']
    SUBSET_reml_G18_Add = G18_Add['Variance']
    MAIN_reml_G_Add = G_MAIN_Add['Variance']



    SUBSET_reml_G1_Add.to_csv('SUBSET_reml_G1_Add.csv', header=False, index=False)
    SUBSET_reml_G2_Add.to_csv('SUBSET_reml_G2_Add.csv', header=False, index=False)
    SUBSET_reml_G3_Add.to_csv('SUBSET_reml_G3_Add.csv', header=False, index=False)
    SUBSET_reml_G4_Add.to_csv('SUBSET_reml_G4_Add.csv', header=False, index=False)
    SUBSET_reml_G5_Add.to_csv('SUBSET_reml_G5_Add.csv', header=False, index=False)
    SUBSET_reml_G6_Add.to_csv('SUBSET_reml_G6_Add.csv', header=False, index=False)
    SUBSET_reml_G7_Add.to_csv('SUBSET_reml_G7_Add.csv', header=False, index=False)
    SUBSET_reml_G8_Add.to_csv('SUBSET_reml_G8_Add.csv', header=False, index=False)
    SUBSET_reml_G9_Add.to_csv('SUBSET_reml_G9_Add.csv', header=False, index=False)
    SUBSET_reml_G10_Add.to_csv('SUBSET_reml_G10_Add.csv', header=False, index=False)
    SUBSET_reml_G11_Add.to_csv('SUBSET_reml_G11_Add.csv', header=False, index=False)
    SUBSET_reml_G12_Add.to_csv('SUBSET_reml_G12_Add.csv', header=False, index=False)
    SUBSET_reml_G13_Add.to_csv('SUBSET_reml_G13_Add.csv', header=False, index=False)
    SUBSET_reml_G14_Add.to_csv('SUBSET_reml_G14_Add.csv', header=False, index=False)
    SUBSET_reml_G15_Add.to_csv('SUBSET_reml_G15_Add.csv', header=False, index=False)
    SUBSET_reml_G16_Add.to_csv('SUBSET_reml_G16_Add.csv', header=False, index=False)
    SUBSET_reml_G17_Add.to_csv('SUBSET_reml_G17_Add.csv', header=False, index=False)
    SUBSET_reml_G18_Add.to_csv('SUBSET_reml_G18_Add.csv', header=False, index=False)
    MAIN_reml_G_Add.to_csv('MAIN_reml_G_Add.csv', header=False, index=False)








    G1_AddDom = pd.read_csv("SUBSET_GREML1_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2_AddDom = pd.read_csv("SUBSET_GREML2_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3_AddDom = pd.read_csv("SUBSET_GREML3_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4_AddDom = pd.read_csv("SUBSET_GREML4_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5_AddDom = pd.read_csv("SUBSET_GREML5_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6_AddDom = pd.read_csv("SUBSET_GREML6_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7_AddDom = pd.read_csv("SUBSET_GREML7_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8_AddDom = pd.read_csv("SUBSET_GREML8_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9_AddDom = pd.read_csv("SUBSET_GREML9_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10_AddDom = pd.read_csv("SUBSET_GREML10_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11_AddDom = pd.read_csv("SUBSET_GREML11_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12_AddDom = pd.read_csv("SUBSET_GREML12_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13_AddDom = pd.read_csv("SUBSET_GREML13_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14_AddDom = pd.read_csv("SUBSET_GREML14_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15_AddDom = pd.read_csv("SUBSET_GREML15_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16_AddDom = pd.read_csv("SUBSET_GREML16_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17_AddDom = pd.read_csv("SUBSET_GREML17_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18_AddDom = pd.read_csv("SUBSET_GREML18_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN_AddDom = pd.read_csv("MAIN_GREML_L_AddDom.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1_AddDom = G1_AddDom['Variance']
    SUBSET_reml_G2_AddDom = G2_AddDom['Variance']
    SUBSET_reml_G3_AddDom = G3_AddDom['Variance']
    SUBSET_reml_G4_AddDom = G4_AddDom['Variance']
    SUBSET_reml_G5_AddDom = G5_AddDom['Variance']
    SUBSET_reml_G6_AddDom = G6_AddDom['Variance']
    SUBSET_reml_G7_AddDom = G7_AddDom['Variance']
    SUBSET_reml_G8_AddDom = G8_AddDom['Variance']
    SUBSET_reml_G9_AddDom = G9_AddDom['Variance']
    SUBSET_reml_G10_AddDom = G10_AddDom['Variance']
    SUBSET_reml_G11_AddDom = G11_AddDom['Variance']
    SUBSET_reml_G12_AddDom = G12_AddDom['Variance']
    SUBSET_reml_G13_AddDom = G13_AddDom['Variance']
    SUBSET_reml_G14_AddDom = G14_AddDom['Variance']
    SUBSET_reml_G15_AddDom = G15_AddDom['Variance']
    SUBSET_reml_G16_AddDom = G16_AddDom['Variance']
    SUBSET_reml_G17_AddDom = G17_AddDom['Variance']
    SUBSET_reml_G18_AddDom = G18_AddDom['Variance']
    MAIN_reml_G_AddDom = G_MAIN_AddDom['Variance']



    SUBSET_reml_G1_AddDom.to_csv('SUBSET_reml_G1_AddDom.csv', header=False, index=False)
    SUBSET_reml_G2_AddDom.to_csv('SUBSET_reml_G2_AddDom.csv', header=False, index=False)
    SUBSET_reml_G3_AddDom.to_csv('SUBSET_reml_G3_AddDom.csv', header=False, index=False)
    SUBSET_reml_G4_AddDom.to_csv('SUBSET_reml_G4_AddDom.csv', header=False, index=False)
    SUBSET_reml_G5_AddDom.to_csv('SUBSET_reml_G5_AddDom.csv', header=False, index=False)
    SUBSET_reml_G6_AddDom.to_csv('SUBSET_reml_G6_AddDom.csv', header=False, index=False)
    SUBSET_reml_G7_AddDom.to_csv('SUBSET_reml_G7_AddDom.csv', header=False, index=False)
    SUBSET_reml_G8_AddDom.to_csv('SUBSET_reml_G8_AddDom.csv', header=False, index=False)
    SUBSET_reml_G9_AddDom.to_csv('SUBSET_reml_G9_AddDom.csv', header=False, index=False)
    SUBSET_reml_G10_AddDom.to_csv('SUBSET_reml_G10_AddDom.csv', header=False, index=False)
    SUBSET_reml_G11_AddDom.to_csv('SUBSET_reml_G11_AddDom.csv', header=False, index=False)
    SUBSET_reml_G12_AddDom.to_csv('SUBSET_reml_G12_AddDom.csv', header=False, index=False)
    SUBSET_reml_G13_AddDom.to_csv('SUBSET_reml_G13_AddDom.csv', header=False, index=False)
    SUBSET_reml_G14_AddDom.to_csv('SUBSET_reml_G14_AddDom.csv', header=False, index=False)
    SUBSET_reml_G15_AddDom.to_csv('SUBSET_reml_G15_AddDom.csv', header=False, index=False)
    SUBSET_reml_G16_AddDom.to_csv('SUBSET_reml_G16_AddDom.csv', header=False, index=False)
    SUBSET_reml_G17_AddDom.to_csv('SUBSET_reml_G17_AddDom.csv', header=False, index=False)
    SUBSET_reml_G18_AddDom.to_csv('SUBSET_reml_G18_AddDom.csv', header=False, index=False)
    MAIN_reml_G_AddDom.to_csv('MAIN_reml_G_AddDom.csv', header=False, index=False)











    G1_AddDomOD = pd.read_csv("SUBSET_GREML1_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2_AddDomOD = pd.read_csv("SUBSET_GREML2_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3_AddDomOD = pd.read_csv("SUBSET_GREML3_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4_AddDomOD = pd.read_csv("SUBSET_GREML4_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5_AddDomOD = pd.read_csv("SUBSET_GREML5_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6_AddDomOD = pd.read_csv("SUBSET_GREML6_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7_AddDomOD = pd.read_csv("SUBSET_GREML7_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8_AddDomOD = pd.read_csv("SUBSET_GREML8_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9_AddDomOD = pd.read_csv("SUBSET_GREML9_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10_AddDomOD = pd.read_csv("SUBSET_GREML10_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11_AddDomOD = pd.read_csv("SUBSET_GREML11_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12_AddDomOD = pd.read_csv("SUBSET_GREML12_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13_AddDomOD = pd.read_csv("SUBSET_GREML13_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14_AddDomOD = pd.read_csv("SUBSET_GREML14_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15_AddDomOD = pd.read_csv("SUBSET_GREML15_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16_AddDomOD = pd.read_csv("SUBSET_GREML16_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17_AddDomOD = pd.read_csv("SUBSET_GREML17_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18_AddDomOD = pd.read_csv("SUBSET_GREML18_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN_AddDomOD = pd.read_csv("MAIN_GREML_L_AddDomOD.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1_AddDomOD = G1_AddDomOD['Variance']
    SUBSET_reml_G2_AddDomOD = G2_AddDomOD['Variance']
    SUBSET_reml_G3_AddDomOD = G3_AddDomOD['Variance']
    SUBSET_reml_G4_AddDomOD = G4_AddDomOD['Variance']
    SUBSET_reml_G5_AddDomOD = G5_AddDomOD['Variance']
    SUBSET_reml_G6_AddDomOD = G6_AddDomOD['Variance']
    SUBSET_reml_G7_AddDomOD = G7_AddDomOD['Variance']
    SUBSET_reml_G8_AddDomOD = G8_AddDomOD['Variance']
    SUBSET_reml_G9_AddDomOD = G9_AddDomOD['Variance']
    SUBSET_reml_G10_AddDomOD = G10_AddDomOD['Variance']
    SUBSET_reml_G11_AddDomOD = G11_AddDomOD['Variance']
    SUBSET_reml_G12_AddDomOD = G12_AddDomOD['Variance']
    SUBSET_reml_G13_AddDomOD = G13_AddDomOD['Variance']
    SUBSET_reml_G14_AddDomOD = G14_AddDomOD['Variance']
    SUBSET_reml_G15_AddDomOD = G15_AddDomOD['Variance']
    SUBSET_reml_G16_AddDomOD = G16_AddDomOD['Variance']
    SUBSET_reml_G17_AddDomOD = G17_AddDomOD['Variance']
    SUBSET_reml_G18_AddDomOD = G18_AddDomOD['Variance']
    MAIN_reml_G_AddDomOD = G_MAIN_AddDomOD['Variance']



    SUBSET_reml_G1_AddDomOD.to_csv('SUBSET_reml_G1_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G2_AddDomOD.to_csv('SUBSET_reml_G2_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G3_AddDomOD.to_csv('SUBSET_reml_G3_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G4_AddDomOD.to_csv('SUBSET_reml_G4_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G5_AddDomOD.to_csv('SUBSET_reml_G5_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G6_AddDomOD.to_csv('SUBSET_reml_G6_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G7_AddDomOD.to_csv('SUBSET_reml_G7_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G8_AddDomOD.to_csv('SUBSET_reml_G8_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G9_AddDomOD.to_csv('SUBSET_reml_G9_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G10_AddDomOD.to_csv('SUBSET_reml_G10_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G11_AddDomOD.to_csv('SUBSET_reml_G11_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G12_AddDomOD.to_csv('SUBSET_reml_G12_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G13_AddDomOD.to_csv('SUBSET_reml_G13_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G14_AddDomOD.to_csv('SUBSET_reml_G14_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G15_AddDomOD.to_csv('SUBSET_reml_G15_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G16_AddDomOD.to_csv('SUBSET_reml_G16_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G17_AddDomOD.to_csv('SUBSET_reml_G17_AddDomOD.csv', header=False, index=False)
    SUBSET_reml_G18_AddDomOD.to_csv('SUBSET_reml_G18_AddDomOD.csv', header=False, index=False)
    MAIN_reml_G_AddDomOD.to_csv('MAIN_reml_G_AddDomOD.csv', header=False, index=False)











    G1_AddDomODHet = pd.read_csv("SUBSET_GREML1_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G2_AddDomODHet = pd.read_csv("SUBSET_GREML2_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G3_AddDomODHet = pd.read_csv("SUBSET_GREML3_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G4_AddDomODHet = pd.read_csv("SUBSET_GREML4_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G5_AddDomODHet = pd.read_csv("SUBSET_GREML5_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G6_AddDomODHet = pd.read_csv("SUBSET_GREML6_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G7_AddDomODHet = pd.read_csv("SUBSET_GREML7_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G8_AddDomODHet = pd.read_csv("SUBSET_GREML8_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G9_AddDomODHet = pd.read_csv("SUBSET_GREML9_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G10_AddDomODHet = pd.read_csv("SUBSET_GREML10_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G11_AddDomODHet = pd.read_csv("SUBSET_GREML11_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G12_AddDomODHet = pd.read_csv("SUBSET_GREML12_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G13_AddDomODHet = pd.read_csv("SUBSET_GREML13_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G14_AddDomODHet = pd.read_csv("SUBSET_GREML14_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G15_AddDomODHet = pd.read_csv("SUBSET_GREML15_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G16_AddDomODHet = pd.read_csv("SUBSET_GREML16_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G17_AddDomODHet = pd.read_csv("SUBSET_GREML17_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G18_AddDomODHet = pd.read_csv("SUBSET_GREML18_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])
    G_MAIN_AddDomODHet = pd.read_csv("MAIN_GREML_L_AddDomODHet.hsq", sep="\t", usecols=["Source", "Variance", "SE"])



    SUBSET_reml_G1_AddDomODHet = G1_AddDomODHet['Variance']
    SUBSET_reml_G2_AddDomODHet = G2_AddDomODHet['Variance']
    SUBSET_reml_G3_AddDomODHet = G3_AddDomODHet['Variance']
    SUBSET_reml_G4_AddDomODHet = G4_AddDomODHet['Variance']
    SUBSET_reml_G5_AddDomODHet = G5_AddDomODHet['Variance']
    SUBSET_reml_G6_AddDomODHet = G6_AddDomODHet['Variance']
    SUBSET_reml_G7_AddDomODHet = G7_AddDomODHet['Variance']
    SUBSET_reml_G8_AddDomODHet = G8_AddDomODHet['Variance']
    SUBSET_reml_G9_AddDomODHet = G9_AddDomODHet['Variance']
    SUBSET_reml_G10_AddDomODHet = G10_AddDomODHet['Variance']
    SUBSET_reml_G11_AddDomODHet = G11_AddDomODHet['Variance']
    SUBSET_reml_G12_AddDomODHet = G12_AddDomODHet['Variance']
    SUBSET_reml_G13_AddDomODHet = G13_AddDomODHet['Variance']
    SUBSET_reml_G14_AddDomODHet = G14_AddDomODHet['Variance']
    SUBSET_reml_G15_AddDomODHet = G15_AddDomODHet['Variance']
    SUBSET_reml_G16_AddDomODHet = G16_AddDomODHet['Variance']
    SUBSET_reml_G17_AddDomODHet = G17_AddDomODHet['Variance']
    SUBSET_reml_G18_AddDomODHet = G18_AddDomODHet['Variance']
    MAIN_reml_G_AddDomODHet = G_MAIN_AddDomODHet['Variance']



    SUBSET_reml_G1_AddDomODHet.to_csv('SUBSET_reml_G1_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G2_AddDomODHet.to_csv('SUBSET_reml_G2_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G3_AddDomODHet.to_csv('SUBSET_reml_G3_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G4_AddDomODHet.to_csv('SUBSET_reml_G4_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G5_AddDomODHet.to_csv('SUBSET_reml_G5_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G6_AddDomODHet.to_csv('SUBSET_reml_G6_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G7_AddDomODHet.to_csv('SUBSET_reml_G7_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G8_AddDomODHet.to_csv('SUBSET_reml_G8_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G9_AddDomODHet.to_csv('SUBSET_reml_G9_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G10_AddDomODHet.to_csv('SUBSET_reml_G10_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G11_AddDomODHet.to_csv('SUBSET_reml_G11_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G12_AddDomODHet.to_csv('SUBSET_reml_G12_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G13_AddDomODHet.to_csv('SUBSET_reml_G13_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G14_AddDomODHet.to_csv('SUBSET_reml_G14_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G15_AddDomODHet.to_csv('SUBSET_reml_G15_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G16_AddDomODHet.to_csv('SUBSET_reml_G16_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G17_AddDomODHet.to_csv('SUBSET_reml_G17_AddDomODHet.csv', header=False, index=False)
    SUBSET_reml_G18_AddDomODHet.to_csv('SUBSET_reml_G18_AddDomODHet.csv', header=False, index=False)
    MAIN_reml_G_AddDomODHet.to_csv('MAIN_reml_G_AddDomODHet.csv', header=False, index=False)
















file = pathlib.Path("SUBSET_reml_G1_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G1_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G2_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G3_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G4_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G5_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G6_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G7_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G8_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G9_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G10_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G11_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G12_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G13_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G14_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G15_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G16_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G17_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18_Add.csv")
if file.exists ():
    with open("SUBSET_reml_G18_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G_Add.csv")
if file.exists ():
    with open("MAIN_reml_G_Add.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_Add', 'a') as out_fileG:
        out_fileG.write(str(line4))









file = pathlib.Path("SUBSET_reml_G1_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G1_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G2_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G3_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G4_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G5_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G6_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G7_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G8_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G9_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G10_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G11_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G12_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G13_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G14_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G15_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G16_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G17_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18_AddDom.csv")
if file.exists ():
    with open("SUBSET_reml_G18_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G_AddDom.csv")
if file.exists ():
    with open("MAIN_reml_G_AddDom.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDom', 'a') as out_fileG:
        out_fileG.write(str(line4))








file = pathlib.Path("SUBSET_reml_G1_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G1_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G2_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G3_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G4_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G5_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G6_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G7_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G8_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G9_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G10_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G11_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G12_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G13_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G14_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G15_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G16_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G17_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18_AddDomOD.csv")
if file.exists ():
    with open("SUBSET_reml_G18_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G_AddDomOD.csv")
if file.exists ():
    with open("MAIN_reml_G_AddDomOD.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomOD', 'a') as out_fileG:
        out_fileG.write(str(line4))









file = pathlib.Path("SUBSET_reml_G1_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G1_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G2_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G2_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
        

file = pathlib.Path("SUBSET_reml_G3_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G3_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))

  
file = pathlib.Path("SUBSET_reml_G4_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G4_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
            

file = pathlib.Path("SUBSET_reml_G5_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G5_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G6_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G6_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G7_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G7_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G8_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G8_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))


file = pathlib.Path("SUBSET_reml_G9_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G9_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G10_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G10_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
   
    
file = pathlib.Path("SUBSET_reml_G11_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G11_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G12_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G12_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
 
        
file = pathlib.Path("SUBSET_reml_G13_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G13_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G14_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G14_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G15_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G15_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
    
file = pathlib.Path("SUBSET_reml_G16_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G16_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
    

file = pathlib.Path("SUBSET_reml_G17_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G17_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("SUBSET_reml_G18_AddDomODHet.csv")
if file.exists ():
    with open("SUBSET_reml_G18_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
        
        
file = pathlib.Path("MAIN_reml_G_AddDomODHet.csv")
if file.exists ():
    with open("MAIN_reml_G_AddDomODHet.csv", "r") as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        line4 = file.readlines()[3]
    with open('outfile_G_AddDomODHet', 'a') as out_fileG:
        out_fileG.write(str(line4))
















file = pathlib.Path("subset_gemma_Add1.log.csv")
if file.exists ():
    with open("subset_gemma_Add1.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("subset_gemma_Add2.log.csv")
if file.exists ():
    with open("subset_gemma_Add2.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("subset_gemma_Add3.log.csv")
if file.exists ():
    with open("subset_gemma_Add3.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("subset_gemma_Add4.log.csv")
if file.exists ():
    with open("subset_gemma_Add4.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("subset_gemma_Add5.log.csv")
if file.exists ():
    with open("subset_gemma_Add5.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_Add6.log.csv")
if file.exists ():
    with open("subset_gemma_Add6.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_Add7.log.csv")
if file.exists ():
    with open("subset_gemma_Add7.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_Add8.log.csv")
if file.exists ():
    with open("subset_gemma_Add8.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("subset_gemma_Add9.log.csv")
if file.exists ():
    with open("subset_gemma_Add9.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_Add10.log.csv")
if file.exists ():
    with open("subset_gemma_Add10.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("subset_gemma_Add11.log.csv")
if file.exists ():
    with open("subset_gemma_Add11.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_Add12.log.csv")
if file.exists ():
    with open("subset_gemma_Add12.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("subset_gemma_Add13.log.csv")
if file.exists ():
    with open("subset_gemma_Add13.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_Add14.log.csv")
if file.exists ():
    with open("subset_gemma_Add14.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_Add15.log.csv")
if file.exists ():
    with open("subset_gemma_Add15.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("subset_gemma_Add16.log.csv")
if file.exists ():
    with open("subset_gemma_Add16.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_Add17.log.csv")
if file.exists ():
    with open("subset_gemma_Add17.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_Add18.log.csv")
if file.exists ():
    with open("subset_gemma_Add18.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_Add.log.csv")
if file.exists ():
    with open("subset_gemma_Add.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_Add', 'a') as out_file:
        out_file.write(str(last_line))















file = pathlib.Path("subset_gemma_AddDom1.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom1.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("subset_gemma_AddDom2.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom2.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("subset_gemma_AddDom3.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom3.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("subset_gemma_AddDom4.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom4.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("subset_gemma_AddDom5.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom5.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDom6.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom6.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDom7.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom7.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDom8.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom8.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("subset_gemma_AddDom9.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom9.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDom10.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom10.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("subset_gemma_AddDom11.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom11.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDom12.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom12.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("subset_gemma_AddDom13.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom13.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDom14.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom14.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDom15.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom15.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("subset_gemma_AddDom16.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom16.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDom17.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom17.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDom18.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom18.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDom.log.csv")
if file.exists ():
    with open("subset_gemma_AddDom.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDom', 'a') as out_file:
        out_file.write(str(last_line))











file = pathlib.Path("subset_gemma_AddDomOD1.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD1.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("subset_gemma_AddDomOD2.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD2.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("subset_gemma_AddDomOD3.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD3.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("subset_gemma_AddDomOD4.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD4.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("subset_gemma_AddDomOD5.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD5.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomOD6.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD6.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDomOD7.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD7.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomOD8.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD8.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("subset_gemma_AddDomOD9.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD9.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDomOD10.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD10.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("subset_gemma_AddDomOD11.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD11.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomOD12.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD12.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("subset_gemma_AddDomOD13.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD13.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomOD14.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD14.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDomOD15.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD15.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("subset_gemma_AddDomOD16.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD16.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDomOD17.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD17.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomOD18.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD18.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomOD.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomOD.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomOD', 'a') as out_file:
        out_file.write(str(last_line))













file = pathlib.Path("subset_gemma_AddDomODHet1.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet1.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("subset_gemma_AddDomODHet2.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet2.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        

file = pathlib.Path("subset_gemma_AddDomODHet3.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet3.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))

  
file = pathlib.Path("subset_gemma_AddDomODHet4.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet4.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
            

file = pathlib.Path("subset_gemma_AddDomODHet5.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet5.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomODHet6.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet6.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDomODHet7.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet7.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomODHet8.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet8.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))


file = pathlib.Path("subset_gemma_AddDomODHet9.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet9.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDomODHet10.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet10.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
   
    
file = pathlib.Path("subset_gemma_AddDomODHet11.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet11.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomODHet12.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet12.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
 
        
file = pathlib.Path("subset_gemma_AddDomODHet13.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet13.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomODHet14.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet14.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDomODHet15.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet15.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
    
file = pathlib.Path("subset_gemma_AddDomODHet16.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet16.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
    

file = pathlib.Path("subset_gemma_AddDomODHet17.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet17.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomODHet18.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet18.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))
        
        
file = pathlib.Path("subset_gemma_AddDomODHet.log.csv")
if file.exists ():
    with open("subset_gemma_AddDomODHet.log.csv", "r") as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))                                 
else:
    with open('SUBSET_E.rml', 'r') as file:
        last_line = file.readlines()[-1]
    with open('outfile_Ge_AddDomODHet', 'a') as out_file:
        out_file.write(str(last_line))








        

time.sleep(10)





print(' "Printing Heritability Bar_Graphs"...')



with open("Prog1_select_act.txt", "a+") as ActA:
    ActA.seek(0) # set position to start of file
    lineA = ActA.read().splitlines()
    if valueA in lineA:
        if Prog1.exists ():
            data1 = []
            with open("outfile_E_Add", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data1.append(currentPlace)
            with open(r'outfileY_E_Add', 'w') as add:
                for i in data1:
                    add.write("%s\n" % (float(i) * 100))
                print('Done')
            with open('outfileX','r') as add1:
                x_e_add=np.genfromtxt(add1)
            with open('outfileY_E_Add','r') as add2:
                y_e_add=np.genfromtxt(add2)

            MAX_E_add = max(y_e_add)
            print(MAX_E_add)
            maxE_add =round(MAX_E_add,2)
            aa=['colors']*len(y_e_add)
            for n,val in enumerate(y_e_add):
                if val==MAX_E_add:
                    aa[n]='green'
                elif val<MAX_E_add:
                    aa[n]='mediumseagreen'

            ZZ1=['edgecolor']*len(y_e_add)
            for n,val in enumerate(y_e_add):
                if val==MAX_E_add:
                    ZZ1[n]='red'
                elif val<MAX_E_add:
                    ZZ1[n]='blue'




            data2 = []
            with open("outfile_E_AddDom", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data2.append(currentPlace)
            with open(r'outfileY_E_AddDom', 'w') as dom:
                for i in data2:
                    dom.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as dom1:
                x_e_dom=np.genfromtxt(dom1)
            with open('outfileY_E_AddDom','r') as dom2:
                y_e_dom=np.genfromtxt(dom2)

            MAX_E_dom = max(y_e_dom)
            print(MAX_E_dom)
            maxE_dom =round(MAX_E_dom,2)

            plt.rc('axes', axisbelow=True)


            bb=['colors']*len(y_e_dom)
            for n,val in enumerate(y_e_dom):
                if val==MAX_E_dom:
                    bb[n]='royalblue'
                elif val<MAX_E_dom:
                    bb[n]='lightskyblue'

            ZZ2=['edgecolor']*len(y_e_dom)
            for n,val in enumerate(y_e_dom):
                if val==MAX_E_dom:
                    ZZ2[n]='red'
                elif val<MAX_E_dom:
                    ZZ2[n]='blue'




            data3 = []
            with open("outfile_E_AddDomOD", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data3.append(currentPlace)

            with open(r'outfileY_E_AddDomOD', 'w') as od:
                for i in data3:
                    od.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as od1:
                x_e_od=np.genfromtxt(od1)
            with open('outfileY_E_AddDomOD','r') as od2:
                y_e_od=np.genfromtxt(od2)

            MAX_E_od = max(y_e_od)
            print(MAX_E_od)
            maxE_od =round(MAX_E_od,2)

            cc=['colors']*len(y_e_od)
            for n,val in enumerate(y_e_od):
                if val==MAX_E_od:
                    cc[n]='darkkhaki'
                elif val<MAX_E_od:
                    cc[n]='palegoldenrod'


            ZZ3=['edgecolor']*len(y_e_od)
            for n,val in enumerate(y_e_od):
                if val==MAX_E_od:
                    ZZ3[n]='red'
                elif val<MAX_E_od:
                    ZZ3[n]='blue'





            data4 = []
            with open("outfile_E_AddDomODHet", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data4.append(currentPlace)

            with open(r'outfileY_E_AddDomODHet', 'w') as aodh:
                for i in data4:
                    aodh.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as aodh1:
                x_e_aodh=np.genfromtxt(aodh1)
            with open('outfileY_E_AddDomODHet','r') as aodh2:
                y_e_aodh=np.genfromtxt(aodh2)

            MAX_E_aodh = max(y_e_aodh)
            print(MAX_E_aodh)
            maxE_aodh =round(MAX_E_aodh,2)

            dd=['colors']*len(y_e_od)
            for n,val in enumerate(y_e_aodh):
                if val==MAX_E_aodh:
                    dd[n]='orangered'
                elif val<MAX_E_aodh:
                    dd[n]='coral'


            ZZ4=['edgecolor']*len(y_e_aodh)
            for n,val in enumerate(y_e_aodh):
                if val==MAX_E_aodh:
                    ZZ4[n]='red'
                elif val<MAX_E_aodh:
                    ZZ4[n]='blue'



            MAX_E2_add = MAX_E_add + 10
            MAX_E2_dom_ = MAX_E_dom + 10
            MAX_E2_od_ = MAX_E_od + 10
            MAX_E2_aodh_ = MAX_E_aodh + 10

            MAX = MAX_E_add + MAX_E_dom + MAX_E_od + MAX_E_aodh


            Add_patchL = mpatches.Patch(color='green', label=MAX_E_add)
            Dom_patchL = mpatches.Patch(color='royalblue', label=MAX_E_dom)
            OD_patchL = mpatches.Patch(color='darkkhaki', label=MAX_E_od)
            AODH_patchL = mpatches.Patch(color='orangered', label=MAX_E_od)

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 
                               
            plt.rc('axes', axisbelow=True)

            X_axis = np.arange(len(tick_label))

            AAA = plt.bar(X_axis - 0.30, y_e_add, tick_label = tick_label, width = 0.20, color = aa, label = 'Add')
            BBB = plt.bar(X_axis - 0.10, y_e_dom, tick_label = tick_label, width = 0.20, color = bb, label = 'Dom')
            CCC = plt.bar(X_axis + 0.10, y_e_od, tick_label = tick_label, width = 0.20, color = cc, label = 'OD')
            DDD = plt.bar(X_axis + 0.30, y_e_aodh, tick_label = tick_label, width = 0.20, color = dd, label = 'AODH')


            plt.xticks(X_axis, tick_label, rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18)
            plt.tick_params(axis='x', direction='out', length=4, width=14.5)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[Add_patchL], loc='upper center', bbox_to_anchor=(0.5, 0.8), fontsize=14)
            plt.legend((AAA, BBB, CCC, DDD, Add_patchL, Dom_patchL, OD_patchL, AODH_patchL), ('Add', 'AddDom', 'AddDomOD', 'AddDomODHet', maxE_add, maxE_dom, maxE_od, maxE_aodh), fontsize=14, bbox_to_anchor=(1.00, 1.018))


            plt.savefig('Heritability_Bar_Graph_E.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

        




with open("Prog2_select_act.txt", "a+") as ActB:
    ActB.seek(0) # set position to start of file
    lineB = ActB.read().splitlines()
    if valueB in lineB:
        if Prog2.exists ():
            data1 = []
            with open("outfile_L_Add", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data1.append(currentPlace)
            with open(r'outfileY_L_Add', 'w') as add:
                for i in data1:
                    add.write("%s\n" % (float(i) * 100))
                print('Done')
            with open('outfileX','r') as add1:
                x_L_add=np.genfromtxt(add1)
            with open('outfileY_L_Add','r') as add2:
                y_L_add=np.genfromtxt(add2)

            MAX_L_add = max(y_L_add)
            print(MAX_L_add)
            maxE_add =round(MAX_L_add,2)
            aa=['colors']*len(y_L_add)
            for n,val in enumerate(y_L_add):
                if val==MAX_L_add:
                    aa[n]='green'
                elif val<MAX_L_add:
                    aa[n]='mediumseagreen'

            ZZ1=['edgecolor']*len(y_L_add)
            for n,val in enumerate(y_L_add):
                if val==MAX_L_add:
                    ZZ1[n]='red'
                elif val<MAX_L_add:
                    ZZ1[n]='blue'




            data2 = []
            with open("outfile_L_AddDom", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data2.append(currentPlace)
            with open(r'outfileY_L_AddDom', 'w') as dom:
                for i in data2:
                    dom.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as dom1:
                x_L_dom=np.genfromtxt(dom1)
            with open('outfileY_L_AddDom','r') as dom2:
                y_L_dom=np.genfromtxt(dom2)

            MAX_L_dom = max(y_L_dom)
            print(MAX_L_dom)
            maxE_dom =round(MAX_L_dom,2)

            plt.rc('axes', axisbelow=True)


            bb=['colors']*len(y_L_dom)
            for n,val in enumerate(y_L_dom):
                if val==MAX_L_dom:
                    bb[n]='royalblue'
                elif val<MAX_L_dom:
                    bb[n]='lightskyblue'

            ZZ2=['edgecolor']*len(y_L_dom)
            for n,val in enumerate(y_L_dom):
                if val==MAX_L_dom:
                    ZZ2[n]='red'
                elif val<MAX_L_dom:
                    ZZ2[n]='blue'




            data3 = []
            with open("outfile_L_AddDomOD", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data3.append(currentPlace)

            with open(r'outfileY_L_AddDomOD', 'w') as od:
                for i in data3:
                    od.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as od1:
                x_L_od=np.genfromtxt(od1)
            with open('outfileY_L_AddDomOD','r') as od2:
                y_L_od=np.genfromtxt(od2)

            MAX_L_od = max(y_L_od)
            print(MAX_L_od)
            maxE_od =round(MAX_L_od,2)

            cc=['colors']*len(y_L_od)
            for n,val in enumerate(y_L_od):
                if val==MAX_L_od:
                    cc[n]='darkkhaki'
                elif val<MAX_L_od:
                    cc[n]='palegoldenrod'


            ZZ3=['edgecolor']*len(y_L_od)
            for n,val in enumerate(y_L_od):
                if val==MAX_L_od:
                    ZZ3[n]='red'
                elif val<MAX_L_od:
                    ZZ3[n]='blue'





            data4 = []
            with open("outfile_L_AddDomODHet", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data4.append(currentPlace)

            with open(r'outfileY_L_AddDomODHet', 'w') as aodh:
                for i in data4:
                    aodh.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as aodh1:
                x_L_aodh=np.genfromtxt(aodh1)
            with open('outfileY_L_AddDomODHet','r') as aodh2:
                y_L_aodh=np.genfromtxt(aodh2)

            MAX_L_aodh = max(y_L_aodh)
            print(MAX_L_aodh)
            maxE_aodh =round(MAX_L_aodh,2)

            dd=['colors']*len(y_L_aodh)
            for n,val in enumerate(y_L_aodh):
                if val==MAX_L_aodh:
                    dd[n]='orangered'
                elif val<MAX_L_aodh:
                    dd[n]='coral'


            ZZ4=['edgecolor']*len(y_L_aodh)
            for n,val in enumerate(y_L_aodh):
                if val==MAX_L_aodh:
                    ZZ4[n]='red'
                elif val<MAX_L_aodh:
                    ZZ4[n]='blue'






            MAX_E2_add = MAX_L_add + 10
            MAX_E2_dom_ = MAX_L_dom + 10
            MAX_E2_od_ = MAX_L_od + 10
            MAX_E2_aodh_ = MAX_L_aodh + 10

            MAX = MAX_L_add + MAX_L_dom + MAX_L_od + MAX_L_aodh


            Add_patchL = mpatches.Patch(color='green', label=MAX_L_add)
            Dom_patchL = mpatches.Patch(color='royalblue', label=MAX_L_dom)
            OD_patchL = mpatches.Patch(color='darkkhaki', label=MAX_L_od)
            AODH_patchL = mpatches.Patch(color='orangered', label=MAX_L_aodh)

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 
                               
            plt.rc('axes', axisbelow=True)

            X_axis = np.arange(len(tick_label))

            AAA = plt.bar(X_axis - 0.30, y_L_add, tick_label = tick_label, width = 0.20, color = aa, label = 'Add')
            BBB = plt.bar(X_axis - 0.10, y_L_dom, tick_label = tick_label, width = 0.20, color = bb, label = 'Dom')
            CCC = plt.bar(X_axis + 0.10, y_L_od, tick_label = tick_label, width = 0.20, color = cc, label = 'OD')
            DDD = plt.bar(X_axis + 0.30, y_L_aodh, tick_label = tick_label, width = 0.20, color = dd, label = 'AODH')


            plt.xticks(X_axis, tick_label, rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18)
            plt.tick_params(axis='x', direction='out', length=4, width=14.5)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[Add_patchL], loc='upper center', bbox_to_anchor=(0.5, 0.8), fontsize=14)
            plt.legend((AAA, BBB, CCC, DDD, Add_patchL, Dom_patchL, OD_patchL, AODH_patchL), ('Add', 'AddDom', 'AddDomOD', 'AddDomODHet', maxE_add, maxE_dom, maxE_od, maxE_aodh), fontsize=14, bbox_to_anchor=(1.00, 1.018))


            plt.savefig('Heritability_Bar_Graph_L.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)








with open("Prog3_select_act.txt", "a+") as ActC:
    ActC.seek(0) # set position to start of file
    lineC = ActC.read().splitlines()
    if valueC in lineC:
        if Prog2.exists ():
            data1 = []
            with open("outfile_LT_Add", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data1.append(currentPlace)
            with open(r'outfileY_LT_Add', 'w') as add:
                for i in data1:
                    add.write("%s\n" % (float(i) * 100))
                print('Done')
            with open('outfileX','r') as add1:
                x_LT_add=np.genfromtxt(add1)
            with open('outfileY_LT_Add','r') as add2:
                y_LT_add=np.genfromtxt(add2)

            MAX_LT_add = max(y_LT_add)
            print(MAX_LT_add)
            maxE_add =round(MAX_LT_add,2)
            aa=['colors']*len(y_LT_add)
            for n,val in enumerate(y_LT_add):
                if val==MAX_LT_add:
                    aa[n]='green'
                elif val<MAX_LT_add:
                    aa[n]='mediumseagreen'

            ZZ1=['edgecolor']*len(y_LT_add)
            for n,val in enumerate(y_LT_add):
                if val==MAX_LT_add:
                    ZZ1[n]='red'
                elif val<MAX_LT_add:
                    ZZ1[n]='blue'




            data2 = []
            with open("outfile_LT_AddDom", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data2.append(currentPlace)
            with open(r'outfileY_LT_AddDom', 'w') as dom:
                for i in data2:
                    dom.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as dom1:
                x_LT_dom=np.genfromtxt(dom1)
            with open('outfileY_LT_AddDom','r') as dom2:
                y_LT_dom=np.genfromtxt(dom2)

            MAX_LT_dom = max(y_LT_dom)
            print(MAX_LT_dom)
            maxE_dom =round(MAX_LT_dom,2)

            plt.rc('axes', axisbelow=True)


            bb=['colors']*len(y_LT_dom)
            for n,val in enumerate(y_LT_dom):
                if val==MAX_LT_dom:
                    bb[n]='royalblue'
                elif val<MAX_LT_dom:
                    bb[n]='lightskyblue'

            ZZ2=['edgecolor']*len(y_LT_dom)
            for n,val in enumerate(y_LT_dom):
                if val==MAX_LT_dom:
                    ZZ2[n]='red'
                elif val<MAX_LT_dom:
                    ZZ2[n]='blue'




            data3 = []
            with open("outfile_LT_AddDomOD", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data3.append(currentPlace)

            with open(r'outfileY_LT_AddDomOD', 'w') as od:
                for i in data3:
                    od.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as od1:
                x_LT_od=np.genfromtxt(od1)
            with open('outfileY_LT_AddDomOD','r') as od2:
                y_LT_od=np.genfromtxt(od2)

            MAX_LT_od = max(y_LT_od)
            print(MAX_LT_od)
            maxE_od =round(MAX_LT_od,2)

            cc=['colors']*len(y_LT_od)
            for n,val in enumerate(y_LT_od):
                if val==MAX_LT_od:
                    cc[n]='darkkhaki'
                elif val<MAX_LT_od:
                    cc[n]='palegoldenrod'


            ZZ3=['edgecolor']*len(y_LT_od)
            for n,val in enumerate(y_LT_od):
                if val==MAX_LT_od:
                    ZZ3[n]='red'
                elif val<MAX_LT_od:
                    ZZ3[n]='blue'




            data4 = []
            with open("outfile_LT_AddDomODHet", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data4.append(currentPlace)

            with open(r'outfileY_LT_AddDomODHet', 'w') as aodh:
                for i in data4:
                    aodh.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as aodh1:
                x_LT_aodh=np.genfromtxt(aodh1)
            with open('outfileY_LT_AddDomODHet','r') as aodh2:
                y_LT_aodh=np.genfromtxt(aodh2)

            MAX_LT_aodh = max(y_LT_aodh)
            print(MAX_LT_aodh)
            maxE_aodh =round(MAX_LT_aodh,2)

            dd=['colors']*len(y_LT_aodh)
            for n,val in enumerate(y_LT_aodh):
                if val==MAX_LT_aodh:
                    dd[n]='orangered'
                elif val<MAX_LT_aodh:
                    dd[n]='coral'


            ZZ4=['edgecolor']*len(y_LT_aodh)
            for n,val in enumerate(y_LT_aodh):
                if val==MAX_LT_aodh:
                    ZZ4[n]='red'
                elif val<MAX_LT_aodh:
                    ZZ4[n]='blue'


            MAX_E2_add = MAX_LT_add + 10
            MAX_E2_dom_ = MAX_LT_dom + 10
            MAX_E2_od_ = MAX_LT_od + 10
            MAX_E2_aodh_ = MAX_LT_aodh + 10

            MAX = MAX_LT_add + MAX_LT_dom + MAX_LT_od + MAX_LT_aodh


            Add_patchL = mpatches.Patch(color='green', label=MAX_LT_add)
            Dom_patchL = mpatches.Patch(color='royalblue', label=MAX_LT_dom)
            OD_patchL = mpatches.Patch(color='darkkhaki', label=MAX_LT_od)
            AODH_patchL = mpatches.Patch(color='orangered', label=MAX_LT_aodh)

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 
                               
            plt.rc('axes', axisbelow=True)

            X_axis = np.arange(len(tick_label))

            AAA = plt.bar(X_axis - 0.30, y_LT_add, tick_label = tick_label, width = 0.20, color = aa, label = 'Add')
            BBB = plt.bar(X_axis - 0.10, y_LT_dom, tick_label = tick_label, width = 0.20, color = bb, label = 'Dom')
            CCC = plt.bar(X_axis + 0.10, y_LT_od, tick_label = tick_label, width = 0.20, color = cc, label = 'OD')
            DDD = plt.bar(X_axis + 0.30, y_LT_aodh, tick_label = tick_label, width = 0.20, color = dd, label = 'AODH')


            plt.xticks(X_axis, tick_label, rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18)
            plt.tick_params(axis='x', direction='out', length=4, width=14.5)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[Add_patchL], loc='upper center', bbox_to_anchor=(0.5, 0.8), fontsize=14)
            plt.legend((AAA, BBB, CCC, DDD, Add_patchL, Dom_patchL, OD_patchL, AODH_patchL), ('Add', 'AddDom', 'AddDomOD', 'AddDomODHet', maxE_add, maxE_dom, maxE_od, maxE_aodh), fontsize=14, bbox_to_anchor=(1.00, 1.018))


            plt.savefig('Heritability_Bar_Graph_LT.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)

    
    


        




with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            data1 = []
            with open("outfile_G_Add", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data1.append(currentPlace)
            with open(r'outfileY_G_Add', 'w') as add:
                for i in data1:
                    add.write("%s\n" % (float(i) * 100))
                print('Done')
            with open('outfileX','r') as add1:
                x_G_add=np.genfromtxt(add1)
            with open('outfileY_G_Add','r') as add2:
                y_G_add=np.genfromtxt(add2)

            MAX_G_add = max(y_G_add)
            print(MAX_G_add)
            maxE_add =round(MAX_G_add,2)
            aa=['colors']*len(y_G_add)
            for n,val in enumerate(y_G_add):
                if val==MAX_G_add:
                    aa[n]='green'
                elif val<MAX_G_add:
                    aa[n]='mediumseagreen'

            ZZ1=['edgecolor']*len(y_G_add)
            for n,val in enumerate(y_G_add):
                if val==MAX_G_add:
                    ZZ1[n]='red'
                elif val<MAX_G_add:
                    ZZ1[n]='blue'




            data2 = []
            with open("outfile_G_AddDom", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data2.append(currentPlace)
            with open(r'outfileY_G_AddDom', 'w') as dom:
                for i in data2:
                    dom.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as dom1:
                x_G_dom=np.genfromtxt(dom1)
            with open('outfileY_G_AddDom','r') as dom2:
                y_G_dom=np.genfromtxt(dom2)

            MAX_G_dom = max(y_G_dom)
            print(MAX_G_dom)
            maxE_dom =round(MAX_G_dom,2)

            plt.rc('axes', axisbelow=True)


            bb=['colors']*len(y_G_dom)
            for n,val in enumerate(y_G_dom):
                if val==MAX_G_dom:
                    bb[n]='royalblue'
                elif val<MAX_G_dom:
                    bb[n]='lightskyblue'

            ZZ2=['edgecolor']*len(y_G_dom)
            for n,val in enumerate(y_G_dom):
                if val==MAX_G_dom:
                    ZZ2[n]='red'
                elif val<MAX_G_dom:
                    ZZ2[n]='blue'




            data3 = []
            with open("outfile_G_AddDomOD", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data3.append(currentPlace)

            with open(r'outfileY_G_AddDomOD', 'w') as od:
                for i in data3:
                    od.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as od1:
                x_G_od=np.genfromtxt(od1)
            with open('outfileY_G_AddDomOD','r') as od2:
                y_G_od=np.genfromtxt(od2)

            MAX_G_od = max(y_G_od)
            print(MAX_G_od)
            maxE_od =round(MAX_G_od,2)

            cc=['colors']*len(y_G_od)
            for n,val in enumerate(y_G_od):
                if val==MAX_G_od:
                    cc[n]='darkkhaki'
                elif val<MAX_G_od:
                    cc[n]='palegoldenrod'


            ZZ3=['edgecolor']*len(y_G_od)
            for n,val in enumerate(y_G_od):
                if val==MAX_G_od:
                    ZZ3[n]='red'
                elif val<MAX_G_od:
                    ZZ3[n]='blue'




            data4 = []
            with open("outfile_G_AddDomODHet", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data4.append(currentPlace)

            with open(r'outfileY_G_AddDomODHet', 'w') as aodh:
                for i in data4:
                    aodh.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as aodh1:
                x_G_aodh=np.genfromtxt(aodh1)
            with open('outfileY_G_AddDomODHet','r') as aodh2:
                y_G_aodh=np.genfromtxt(aodh2)

            MAX_G_aodh = max(y_G_aodh)
            print(MAX_G_aodh)
            maxE_aodh =round(MAX_G_aodh,2)

            dd=['colors']*len(y_G_aodh)
            for n,val in enumerate(y_G_aodh):
                if val==MAX_G_aodh:
                    dd[n]='orangered'
                elif val<MAX_G_aodh:
                    dd[n]='coral'


            ZZ4=['edgecolor']*len(y_G_aodh)
            for n,val in enumerate(y_G_aodh):
                if val==MAX_G_aodh:
                    ZZ4[n]='red'
                elif val<MAX_G_aodh:
                    ZZ4[n]='blue'


                    
            MAX_E2_add = MAX_G_add + 10
            MAX_E2_dom_ = MAX_G_dom + 10
            MAX_E2_od_ = MAX_G_od + 10
            MAX_E2_aodh_ = MAX_G_aodh + 10


            MAX = MAX_G_add + MAX_G_dom + MAX_G_od + MAX_G_aodh


            Add_patchL = mpatches.Patch(color='green', label=MAX_G_add)
            Dom_patchL = mpatches.Patch(color='royalblue', label=MAX_G_dom)
            OD_patchL = mpatches.Patch(color='darkkhaki', label=MAX_G_od)
            AODH_patchL = mpatches.Patch(color='orangered', label=MAX_G_aodh)

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 
                               
            plt.rc('axes', axisbelow=True)

            X_axis = np.arange(len(tick_label))

            AAA = plt.bar(X_axis - 0.30, y_G_add, tick_label = tick_label, width = 0.20, color = aa, label = 'Add')
            BBB = plt.bar(X_axis - 0.10, y_G_dom, tick_label = tick_label, width = 0.20, color = bb, label = 'Dom')
            CCC = plt.bar(X_axis + 0.10, y_G_od, tick_label = tick_label, width = 0.20, color = cc, label = 'OD')
            DDD = plt.bar(X_axis + 0.30, y_G_aodh, tick_label = tick_label, width = 0.20, color = dd, label = 'AODH')


            plt.xticks(X_axis, tick_label, rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18)
            plt.tick_params(axis='x', direction='out', length=4, width=14.5)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[Add_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
            plt.legend((AAA, BBB, CCC, DDD, Add_patchL, Dom_patchL, OD_patchL, AODH_patchL), ('Add', 'AddDom', 'AddDomOD', 'AddDomODHet', maxE_add, maxE_dom, maxE_od, maxE_aodh), fontsize=14, bbox_to_anchor=(1.00, 1.018))


            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)
            

with open("Prog4_select_act.txt", "a+") as ActD:
    ActD.seek(0) # set position to start of file
    lineD = ActD.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            data1 = []
            with open("outfile_G_Add", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data1.append(currentPlace)
            with open(r'outfileY_G_Add', 'w') as add:
                for i in data1:
                    add.write("%s\n" % (float(i) * 100))
                print('Done')
            with open('outfileX','r') as add1:
                x_G_add=np.genfromtxt(add1)
            with open('outfileY_G_Add','r') as add2:
                y_G_add=np.genfromtxt(add2)

            MAX_G_add = max(y_G_add)
            print(MAX_G_add)
            maxE_add =round(MAX_G_add,2)
            aa=['colors']*len(y_G_add)
            for n,val in enumerate(y_G_add):
                if val==MAX_G_add:
                    aa[n]='green'
                elif val<MAX_G_add:
                    aa[n]='mediumseagreen'

            ZZ1=['edgecolor']*len(y_G_add)
            for n,val in enumerate(y_G_add):
                if val==MAX_G_add:
                    ZZ1[n]='red'
                elif val<MAX_G_add:
                    ZZ1[n]='blue'




            data2 = []
            with open("outfile_G_AddDom", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data2.append(currentPlace)
            with open(r'outfileY_G_AddDom', 'w') as dom:
                for i in data2:
                    dom.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as dom1:
                x_G_dom=np.genfromtxt(dom1)
            with open('outfileY_G_AddDom','r') as dom2:
                y_G_dom=np.genfromtxt(dom2)

            MAX_G_dom = max(y_G_dom)
            print(MAX_G_dom)
            maxE_dom =round(MAX_G_dom,2)

            plt.rc('axes', axisbelow=True)


            bb=['colors']*len(y_G_dom)
            for n,val in enumerate(y_G_dom):
                if val==MAX_G_dom:
                    bb[n]='royalblue'
                elif val<MAX_G_dom:
                    bb[n]='lightskyblue'

            ZZ2=['edgecolor']*len(y_G_dom)
            for n,val in enumerate(y_G_dom):
                if val==MAX_G_dom:
                    ZZ2[n]='red'
                elif val<MAX_G_dom:
                    ZZ2[n]='blue'




            data3 = []
            with open("outfile_G_AddDomOD", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data3.append(currentPlace)

            with open(r'outfileY_G_AddDomOD', 'w') as od:
                for i in data3:
                    od.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as od1:
                x_G_od=np.genfromtxt(od1)
            with open('outfileY_G_AddDomOD','r') as od2:
                y_G_od=np.genfromtxt(od2)

            MAX_G_od = max(y_G_od)
            print(MAX_G_od)
            maxE_od =round(MAX_G_od,2)

            cc=['colors']*len(y_G_od)
            for n,val in enumerate(y_G_od):
                if val==MAX_G_od:
                    cc[n]='darkkhaki'
                elif val<MAX_G_od:
                    cc[n]='palegoldenrod'


            ZZ3=['edgecolor']*len(y_G_od)
            for n,val in enumerate(y_G_od):
                if val==MAX_G_od:
                    ZZ3[n]='red'
                elif val<MAX_G_od:
                    ZZ3[n]='blue'




            data4 = []
            with open("outfile_G_AddDomODHet", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data4.append(currentPlace)

            with open(r'outfileY_G_AddDomODHet', 'w') as aodh:
                for i in data4:
                    aodh.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as aodh1:
                x_G_aodh=np.genfromtxt(aodh1)
            with open('outfileY_G_AddDomODHet','r') as aodh2:
                y_G_aodh=np.genfromtxt(aodh2)

            MAX_G_aodh = max(y_G_aodh)
            print(MAX_G_aodh)
            maxE_aodh =round(MAX_G_aodh,2)

            dd=['colors']*len(y_G_aodh)
            for n,val in enumerate(y_G_aodh):
                if val==MAX_G_aodh:
                    dd[n]='orangered'
                elif val<MAX_G_aodh:
                    dd[n]='coral'


            ZZ4=['edgecolor']*len(y_G_aodh)
            for n,val in enumerate(y_G_aodh):
                if val==MAX_G_aodh:
                    ZZ4[n]='red'
                elif val<MAX_G_aodh:
                    ZZ4[n]='blue'


                    
            MAX_E2_add = MAX_G_add + 10
            MAX_E2_dom_ = MAX_G_dom + 10
            MAX_E2_od_ = MAX_G_od + 10
            MAX_E2_aodh_ = MAX_G_aodh + 10


            MAX = MAX_G_add + MAX_G_dom + MAX_G_od + MAX_G_aodh


            Add_patchL = mpatches.Patch(color='green', label=MAX_G_add)
            Dom_patchL = mpatches.Patch(color='royalblue', label=MAX_G_dom)
            OD_patchL = mpatches.Patch(color='darkkhaki', label=MAX_G_od)
            AODH_patchL = mpatches.Patch(color='orangered', label=MAX_G_aodh)

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 
                               
            plt.rc('axes', axisbelow=True)

            X_axis = np.arange(len(tick_label))

            AAA = plt.bar(X_axis - 0.30, y_G_add, tick_label = tick_label, width = 0.20, color = aa, label = 'Add')
            BBB = plt.bar(X_axis - 0.10, y_G_dom, tick_label = tick_label, width = 0.20, color = bb, label = 'Dom')
            CCC = plt.bar(X_axis + 0.10, y_G_od, tick_label = tick_label, width = 0.20, color = cc, label = 'OD')
            DDD = plt.bar(X_axis + 0.30, y_G_aodh, tick_label = tick_label, width = 0.20, color = dd, label = 'AODH')


            plt.xticks(X_axis, tick_label, rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18)
            plt.tick_params(axis='x', direction='out', length=4, width=14.5)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[Add_patchL], loc='upper center', bbox_to_anchor=(0.5, 1.15), fontsize=14)
            plt.legend((AAA, BBB, CCC, DDD, Add_patchL, Dom_patchL, OD_patchL, AODH_patchL), ('Add', 'AddDom', 'AddDomOD', 'AddDomODHet', maxE_add, maxE_dom, maxE_od, maxE_aodh), fontsize=14, bbox_to_anchor=(1.00, 1.018))


            plt.savefig('Heritability_Bar_Graph_G.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)









with open("Prog7_select_act.txt", "a+") as ActGGG:
    ActGGG.seek(0) # set position to start of file
    lineGG = ActGGG.read().splitlines()
    if valueG in lineGG:
        if Prog4.exists ():
            data1 = []
            with open("outfile_Ge_Add", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data1.append(currentPlace)
            with open(r'outfile_Ge_Add', 'w') as add:
                for i in data1:
                    add.write("%s\n" % (float(i) * 100))
                print('Done')
            with open('outfileX','r') as add1:
                x_e_add=np.genfromtxt(add1)
            with open('outfile_Ge_Add','r') as add2:
                y_e_add=np.genfromtxt(add2)

            MAX_E_add = max(y_e_add)
            print(MAX_E_add)
            maxE_add =round(MAX_E_add,2)
            aa=['colors']*len(y_e_add)
            for n,val in enumerate(y_e_add):
                if val==MAX_E_add:
                    aa[n]='green'
                elif val<MAX_E_add:
                    aa[n]='mediumseagreen'

            ZZ1=['edgecolor']*len(y_e_add)
            for n,val in enumerate(y_e_add):
                if val==MAX_E_add:
                    ZZ1[n]='red'
                elif val<MAX_E_add:
                    ZZ1[n]='blue'




            data2 = []
            with open("outfile_Ge_AddDom", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data2.append(currentPlace)
            with open(r'outfile_Ge_AddDom', 'w') as dom:
                for i in data2:
                    dom.write("%s\n" % (float(i) * 100))
                print('Done')

            with open('outfileX','r') as dom1:
                x_e_dom=np.genfromtxt(dom1)
            with open('outfile_Ge_AddDom','r') as dom2:
                y_e_dom=np.genfromtxt(dom2)

            MAX_E_dom = max(y_e_dom)
            print(MAX_E_dom)
            maxE_dom =round(MAX_E_dom,2)

            plt.rc('axes', axisbelow=True)


            bb=['colors']*len(y_e_dom)
            for n,val in enumerate(y_e_dom):
                if val==MAX_E_dom:
                    bb[n]='royalblue'
                elif val<MAX_E_dom:
                    bb[n]='lightskyblue'

            ZZ2=['edgecolor']*len(y_e_dom)
            for n,val in enumerate(y_e_dom):
                if val==MAX_E_dom:
                    ZZ2[n]='red'
                elif val<MAX_E_dom:
                    ZZ2[n]='blue'




            data3 = []
            with open("outfile_Ge_AddDomOD", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data3.append(currentPlace)

            with open(r'outfile_Ge_AddDomOD', 'w') as od:
                for i in data3:
                    od.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as od1:
                x_e_od=np.genfromtxt(od1)
            with open('outfile_Ge_AddDomOD','r') as od2:
                y_e_od=np.genfromtxt(od2)

            MAX_E_od = max(y_e_od)
            print(MAX_E_od)
            maxE_od =round(MAX_E_od,2)

            cc=['colors']*len(y_e_od)
            for n,val in enumerate(y_e_od):
                if val==MAX_E_od:
                    cc[n]='darkkhaki'
                elif val<MAX_E_od:
                    cc[n]='palegoldenrod'


            ZZ3=['edgecolor']*len(y_e_od)
            for n,val in enumerate(y_e_od):
                if val==MAX_E_od:
                    ZZ3[n]='red'
                elif val<MAX_E_od:
                    ZZ3[n]='blue'





            data4 = []
            with open("outfile_Ge_AddDomODHet", "r+") as filehandle:
                for line in filehandle:
                    currentPlace = line[:-1]
                    data4.append(currentPlace)

            with open(r'outfile_Ge_AddDomODHet', 'w') as aodh:
                for i in data4:
                    aodh.write("%s\n" % (float(i) * 100))
                print('Done')

            
            with open('outfileX','r') as aodh1:
                x_e_aodh=np.genfromtxt(aodh1)
            with open('outfile_Ge_AddDomODHet','r') as aodh2:
                y_e_aodh=np.genfromtxt(aodh2)

            MAX_E_aodh = max(y_e_aodh)
            print(MAX_E_aodh)
            maxE_aodh =round(MAX_E_aodh,2)

            dd=['colors']*len(y_e_od)
            for n,val in enumerate(y_e_aodh):
                if val==MAX_E_aodh:
                    dd[n]='orangered'
                elif val<MAX_E_aodh:
                    dd[n]='coral'


            ZZ4=['edgecolor']*len(y_e_aodh)
            for n,val in enumerate(y_e_aodh):
                if val==MAX_E_aodh:
                    ZZ4[n]='red'
                elif val<MAX_E_aodh:
                    ZZ4[n]='blue'



            MAX_E2_add = MAX_E_add + 10
            MAX_E2_dom_ = MAX_E_dom + 10
            MAX_E2_od_ = MAX_E_od + 10
            MAX_E2_aodh_ = MAX_E_aodh + 10

            MAX = MAX_E_add + MAX_E_dom + MAX_E_od + MAX_E_aodh


            Add_patchL = mpatches.Patch(color='green', label=MAX_E_add)
            Dom_patchL = mpatches.Patch(color='royalblue', label=MAX_E_dom)
            OD_patchL = mpatches.Patch(color='darkkhaki', label=MAX_E_od)
            AODH_patchL = mpatches.Patch(color='orangered', label=MAX_E_od)

            # labels for bars 

            tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 
                               
            plt.rc('axes', axisbelow=True)

            X_axis = np.arange(len(tick_label))

            AAA = plt.bar(X_axis - 0.30, y_e_add, tick_label = tick_label, width = 0.20, color = aa, label = 'Add')
            BBB = plt.bar(X_axis - 0.10, y_e_dom, tick_label = tick_label, width = 0.20, color = bb, label = 'Dom')
            CCC = plt.bar(X_axis + 0.10, y_e_od, tick_label = tick_label, width = 0.20, color = cc, label = 'OD')
            DDD = plt.bar(X_axis + 0.30, y_e_aodh, tick_label = tick_label, width = 0.20, color = dd, label = 'AODH')


            plt.xticks(X_axis, tick_label, rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
            plt.yticks(fontsize=18)
            plt.xlabel('p-value of the allocated SNPs', fontsize=18)
            plt.ylabel('SNP heritability (%)', fontsize=18)
            plt.tick_params(axis='x', direction='out', length=4, width=14.5)
            plt.title('')
            plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
            plt.legend(handles=[Add_patchL], loc='upper center', bbox_to_anchor=(0.5, 0.8), fontsize=14)
            plt.legend((AAA, BBB, CCC, DDD, Add_patchL, Dom_patchL, OD_patchL, AODH_patchL), ('Add', 'AddDom', 'AddDomOD', 'AddDomODHet', maxE_add, maxE_dom, maxE_od, maxE_aodh), fontsize=14, bbox_to_anchor=(1.00, 1.018))


            plt.savefig('Heritability_Bar_Graph_Ge.pdf',bbox_inches='tight')
            plt.close()
            time.sleep(4)


            



            


 
print(' "Printing SNP-hits Bar_Graphs"...')


file_Number_of_pvalues_Add = pathlib.Path("Number_of_pvalues_Add")
file_Number_of_pvalues_AddDom = pathlib.Path("Number_of_pvalues_AddDom")
file_Number_of_pvalues_AddDomOD = pathlib.Path("Number_of_pvalues_AddDomOD")
file_Number_of_pvalues_AddDomODHet = pathlib.Path("Number_of_pvalues_AddDomODHet")

if No_sss1 == No_pvalues_Add:
    if No_sss2 == No_pvalues_AddDom:
        if No_sss3 == No_pvalues_AddDomOD:
            if file_Number_of_pvalues_Add.exists ():
                if file_Number_of_pvalues_AddDom.exists ():
                    if file_Number_of_pvalues_AddDomOD.exists ():
                        data1 = []
                        with open('outfileX','r') as fg1000_add:
                            x_l000g_Add=np.genfromtxt(fg1000_add)
                        with open('Number_of_pvalues_Add','r') as fg3000_add:
                            y_l000g_Add=np.genfromtxt(fg3000_add)


                        data2 = []
                        with open('outfileX','r') as fg1000_dom:
                            x_l000g_Dom=np.genfromtxt(fg1000_dom)
                        with open('Number_of_pvalues_AddDom','r') as fg3000_dom:
                            y_l000g_Dom=np.genfromtxt(fg3000_dom)


                        data3 = []
                        with open('outfileX','r') as fg1000_od:
                            x_l000g_OD=np.genfromtxt(fg1000_od)
                        with open('Number_of_pvalues_AddDomOD','r') as fg3000_od:
                            y_l000g_OD=np.genfromtxt(fg3000_od)


                        data4 = []
                        with open('outfileX','r') as fg1000_aodh:
                            x_l000g_AODH=np.genfromtxt(fg1000_aodh)
                        with open('Number_of_pvalues_AddDomODHet','r') as fg3000_aodh:
                            y_l000g_AODH=np.genfromtxt(fg3000_aodh)
                            

                        # labels for bars 

                        tick_label = ['<1E-7', '<1E-6', '<1E-5', '<1E-4', '<1E-3', '<1E-2', '<1E-1', '<.20', '<.25', '<.30', '<.40', '<.50', '<.60', '<.70', '<.75', '<.80', '<.90', '<.95', '<1.00'] 

    
    
                        plt.rc('axes', axisbelow=True)

                        X_axis = np.arange(len(tick_label))






                        AAA = plt.bar(X_axis - 0.30, y_l000g_Add, tick_label = tick_label, width = 0.20, color = 'mediumseagreen', label = 'Add')
                        BBB = plt.bar(X_axis - 0.10, y_l000g_Dom, tick_label = tick_label, width = 0.20, color = 'lightskyblue', label = 'Dom')
                        CCC = plt.bar(X_axis + 0.10, y_l000g_OD, tick_label = tick_label, width = 0.20, color = 'palegoldenrod', label = 'OD')
                        DDD = plt.bar(X_axis + 0.30, y_l000g_AODH, tick_label = tick_label, width = 0.20, color = 'coral', label = 'AODH')

                        

                        plt.xticks(X_axis, tick_label, rotation=45, ha='right', rotation_mode='anchor', fontsize=14)
                        plt.yticks(fontsize=18)
                        plt.xlabel('Association p-value', fontsize=18)
                        plt.ylabel('Number of SNP hits', fontsize=18)
                        plt.tick_params(axis='x', direction='out', length=4, width=14.5)
                        plt.title('')
                        plt.grid(axis = 'y', color = 'grey', linestyle = '--', linewidth = 0.5, alpha=0.60)
                        plt.yscale('log',base=10)
                        plt.legend((AAA, BBB, CCC, DDD), ('Add', 'AddDom', 'AddDomOD', 'AddDomODHet'), fontsize=14, bbox_to_anchor=(1.00, 1.018))

                        plt.savefig('Clustered_SNP_Hits_Bar_Graph.pdf',bbox_inches='tight')
                        plt.close()
                        time.sleep(3)


      
print(' "Printing Bar_Graphs done." ')


file_outfileY_E_Add = pathlib.Path("outfileY_E_Add")
file_outfileY_E_AddDom = pathlib.Path("outfileY_E_AddDom")
file_outfileY_E_AddDomOD = pathlib.Path("outfileY_E_AddDomOD")
file_outfileY_E_AddDomODHet = pathlib.Path("outfileY_E_AddDomODHet")


file_outfileY_L_Add = pathlib.Path("outfileY_L_Add")
file_outfileY_L_AddDom = pathlib.Path("outfileY_L_AddDom")
file_outfileY_L_AddDomOD = pathlib.Path("outfileY_L_AddDomOD")
file_outfileY_L_AddDomODHet = pathlib.Path("outfileY_L_AddDomODHet")

file_outfileY_LT_Add = pathlib.Path("outfileY_LT_Add")
file_outfileY_LT_AddDom = pathlib.Path("outfileY_LT_AddDom")
file_outfileY_LT_AddDomOD = pathlib.Path("outfileY_LT_AddDomOD")
file_outfileY_LT_AddDomODHet = pathlib.Path("outfileY_LT_AddDomODHet")


file_outfileY_G_Add = pathlib.Path("outfileY_G_Add")
file_outfileY_G_AddDom = pathlib.Path("outfileY_G_AddDom")
file_outfileY_G_AddDomOD = pathlib.Path("outfileY_G_AddDomOD")
file_outfileY_G_AddDomODHet = pathlib.Path("outfileY_G_AddDomODHet")


file_outfileY_Ge_Add = pathlib.Path("outfileY_Ge_Add")
file_outfileY_Ge_AddDom = pathlib.Path("outfileY_Ge_AddDom")
file_outfileY_Ge_AddDomOD = pathlib.Path("outfileY_Ge_AddDomOD")
file_outfileY_Ge_AddDomODHet = pathlib.Path("outfileY_Ge_AddDomODHet")




file_Number_of_pvalues_Add = pathlib.Path("Number_of_pvalues_Add")
file_Number_of_pvalues_AddDom = pathlib.Path("Number_of_pvalues_AddDom")
file_Number_of_pvalues_AddDomOD = pathlib.Path("Number_of_pvalues_AddDomOD")
file_Number_of_pvalues_AddDomODHet = pathlib.Path("Number_of_pvalues_AddDomODHet")


if file_outfileY_E_Add.exists () or file_outfileY_L_Add.exists () or file_outfileY_G_Add.exists () or file_outfileY_Ge_Add.exists ():
    print('h2 profiling is finalized')
    
if Prog1.exists ():
    if file_outfileY_E_Add.exists ():
        if file_outfileY_E_AddDom.exists ():
            if file_outfileY_E_AddDomOD.exists ():
                if file_outfileY_E_AddDomODHet.exists ():
                    print('The heritability profiling using Emmax model is saved as outfileE_¤, outfileY_E_¤, & Heritability_Bar_Graph_E')
    
if Prog2.exists ():
    if file_outfileY_L_Add.exists ():
        if file_outfileY_L_AddDom.exists ():
            if file_outfileY_L_AddDomOD.exists ():
                if file_outfileY_L_AddDomODHet.exists ():
                    print('The heritability profiling using LDAK GCTA_model is saved as outfileL_¤, outfileY_L_¤, & Heritability_Bar_Graph_L')


if Prog2.exists ():
    if file_outfileY_LT_Add.exists ():
        if file_outfileY_LT_AddDom.exists ():
            if file_outfileY_LT_AddDomOD.exists ():
                if file_outfileY_LT_AddDomODHet.exists ():
                    print('The heritability profiling using LDAK Thin_model is saved as outfileLT_¤, outfileY_LT_¤, & Heritability_Bar_Graph_LT')


if Prog4.exists ():
    if file_outfileY_Ge_Add.exists ():
        if file_outfileY_Ge_AddDom.exists ():
            if file_outfileY_Ge_AddDomOD.exists ():
                if file_outfileY_Ge_AddDomODHet.exists ():
                    print('The heritability profiling using Gemma model is saved as outfileGe_¤, outfileY_Ge_¤, & Heritability_Bar_Graph_Ge')




with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        if Prog3.exists ():
            if file_outfileY_G_Add.exists ():
                if file_outfileY_G_AddDom.exists ():
                    if file_outfileY_G_AddDomOD.exists ():
                        print('The heritability profiling using GCTA-GREML model is saved as outfile_G_¤, outfileY_G_¤, & Heritability_Bar_Graph_G')
        



with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueDdd in lineD:
        if Prog3.exists ():
            if file_outfileY_G_Add.exists ():
                if file_outfileY_G_AddDom.exists ():
                    if file_outfileY_G_AddDomOD.exists ():
                        print('The heritability profiling using GCTA-GREML-inbred model is saved as outfile_G_¤, outfileY_G_¤, & Heritability_Bar_Graph_G')



    

if No_sss1 == No_pvalues_Add:
    if No_sss2 == No_pvalues_AddDom:
        if No_sss3 == No_pvalues_AddDomOD:
            if file_Number_of_pvalues_Add.exists ():
                if file_Number_of_pvalues_AddDom.exists ():
                    if file_Number_of_pvalues_AddDomOD.exists ():
                        if file_Number_of_pvalues_AddDomODHet.exists ():
                            print('Clustered SNP hits are saved as Number_of_pvalues_¤ & Clustered_SNP_Hits_Bar_Graph')



print('Cleaning!')



command = "rm list*p"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())



command = "rm *.sXX.txt; rm subset_gemma*.log.csv; rm subset_gemma*; rm SUBSET_E*.tped; rm SUBSET_E*.tfam; rm SUBSET_E*.nosex; rm SUBSET_E*.map; rm SUBSET_E*.log; rm SUBSET_E*.BN.kinf; rm SUBSET_E*.reml; rm SUBSET_E*.ps; rm MAIN_E.tped; rm MAIN_E.tfam; rm MAIN_E.log; rm MAIN_E.map; rm MAIN_E.nosex; rm MAIN_E.BN.kinf; rm MAIN_E.reml; rm MAIN_E.ps"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm SUBSET_reml_LT*.csv; rm SUBSET_reml_L*.csv; rm SUBSET_L*.reml; rm MAIN_reml_L.csv; rm MAIN_reml_LT.csv; rm MAIN_L.reml; rm MAIN_LT.reml; rm *.progress; rm *.details; rm *.adjust; rm *.id; rm *.bin; rm *.vars; rm *.res; rm *.share; rm *.cross; rm *.blp; rm *.coeff; rm *.trivial; rm *.out; rm *.in; rm *.thin"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm SUBSET_L*.fam; rm SUBSET_L*.bim; rm SUBSET_L*.nosex; rm SUBSET_L*.bed; rm SUBSET_L*.log; rm MAIN_L.nosex; rm MAIN_L*.fam; rm MAIN_L*.bim; rm MAIN_L*.bed; rm MAIN_L*.log; rm *.grm.bin; rm *.grm.id; rm *.grm.N.bin; rm SUBSET_GREML*.LOG; rm SUBSET_reml_G*.csv; rm MAIN_GREML*.LOG; rm MAIN_reml_G.csv; rm SUBSET_GREML*.log; rm MAIN_GREML.log; rm SUBSET_GREML*.hsq; rm MAIN_GREML.hsq"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm Number_of_pvalues1; rm Number_of_pvalues2; rm Number_of_pvalues3; rm Number_of_pvalues4; rm Number_of_pvalues5; rm Number_of_pvalues6; rm Number_of_pvalues7; rm Number_of_pvalues8; rm Number_of_pvalues9; rm Number_of_pvalues10; rm Number_of_pvalues11; rm Number_of_pvalues12; rm Number_of_pvalues13; rm Number_of_pvalues14; rm Number_of_pvalues15; rm Number_of_pvalues16; rm Number_of_pvalues17; rm Number_of_pvalues18; rm Number_of_pvalues19"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "rm MAIN_reml_LT_*.csv; rm MAIN_reml_L_*.csv; rm MAIN_reml_L_*.csv; rm MAIN_GREML_*.hsq; rm *.ps; rm *.reml; rm *.BN.kinf; rm *.tped; rm *.tfam; rm *.map; rm *.nosex; rm *.log; rm Number_of_pvalues19_*; rm Number_of_pvalues18_*; rm Number_of_pvalues17_*; rm Number_of_pvalues16_*; rm Number_of_pvalues15_*; rm Number_of_pvalues14_*; rm Number_of_pvalues13_*; rm Number_of_pvalues12_*; rm Number_of_pvalues11_*; rm Number_of_pvalues10_*; rm Number_of_pvalues9_*; rm Number_of_pvalues8_*; rm Number_of_pvalues7_*; rm Number_of_pvalues6_*; rm Number_of_pvalues5_*; rm Number_of_pvalues4_*; rm Number_of_pvalues3_*; rm Number_of_pvalues2_*; rm Number_of_pvalues1_*; rm list*p_Add; rm list*p_AddDom; rm list*p_AddDomOD; rm list*p_AddDomODHet; rm Add_OD_Dom.txt"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())





with open("Prog1_select_act.txt", "a+") as ActA_AddDomOD:
    ActA_AddDomOD.seek(0) # set position to start of file
    lineA = ActA_AddDomOD.read().splitlines()
    if valueA in lineA:
        print('Cleaning!')
    else:
        command = "rm outfileY_E_*; rm outfile_E_*"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())
        
    

with open("Prog2_select_act.txt", "a+") as ActB_Add:
    ActB_Add.seek(0) # set position to start of file
    lineB = ActB_Add.read().splitlines()
    if valueB in lineB:
        print('Cleaning!')
    else:
        command = "rm outfileY_L_*; rm outfile_L_*"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())

with open("Prog3_select_act.txt", "a+") as ActC_Add:
    ActC_Add.seek(0) # set position to start of file
    lineC = ActC_Add.read().splitlines()
    if valueC in lineC:
        print('Cleaning!')
    else:
        command = "rm outfileY_LT_*; rm outfile_LT_*"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())


with open("Prog4_select_act.txt", "a+") as ActD_Add:
    ActD_Add.seek(0) # set position to start of file
    lineD = ActD_Add.read().splitlines()
    if valueD in lineD:
        print('Cleaning!')
    elif valueDdd in lineD:
        print('Cleaning!')
    else:
        command = "rm outfileY_G_*; rm outfile_G_*"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())


with open("Prog7_select_act.txt", "a+") as ActGGG_AddDomOD:
    ActGGG_AddDomOD.seek(0) # set position to start of file
    lineGG = ActGGG_AddDomOD.read().splitlines()
    if valueG in lineGG:
        print('Cleaning!')
    else:
        command = "rm outfileY_Ge_*; rm outfile_Ge_*"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())

with open("Prog7_select_act.txt", "a+") as ActGGG_AddDomOD:
    ActGGG_AddDomOD.seek(0) # set position to start of file
    lineGG = ActGGG_AddDomOD.read().splitlines()
    if valueG in lineGG:
        command = "cp outfile_Ge_Add outfileY_Ge_Add; cp outfile_Ge_AddDom outfileY_Ge_AddDom; cp outfile_Ge_AddDomOD outfileY_Ge_AddDomOD; cp outfile_Ge_AddDomODHet outfileY_Ge_AddDomODHet"
        ret = subprocess.run(command, capture_output=True, shell=True)
        # before Python 3.7:
        # ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
        print(ret.stdout.decode())

        

command = "rm *select_act.txt; rm MAIN_reml_G_*.csv"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())

command = "rm listp*; rm Add_OD_Dom.txt"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())
        
command = "rm Phenotype; rm Prog*_select_act.txt"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())


command = "mkdir SAFE-h2_input_files; mkdir SAFE-h2_output_files; mkdir SAFE-h2_output_figures; mv list* SAFE-h2_output_files; mv *Covar* SAFE-h2_input_files; mv MAIN.* SAFE-h2_input_files; mv Main* SAFE-h2_output_files; mv outfile_* SAFE-h2_output_files; mv outfileY* SAFE-h2_output_files; mv *Merge* SAFE-h2_output_files; mv Number_of* SAFE-h2_output_files; mv MAIN_AD* SAFE-h2_output_files; mv MAIN_ADO* SAFE-h2_output_files; mv MAIN_ADOH* SAFE-h2_output_files; mv *.pdf SAFE-h2_output_figures"
ret = subprocess.run(command, capture_output=True, shell=True)
# before Python 3.7:
# ret = subprocess.run(command, stdout=subprocess.PIPE, shell=True)
print(ret.stdout.decode())




final = pyfiglet.figlet_format('SAFE-h2', font='doom', width=100)
print(f'[white]{final}[/white]')

print('"has completed the analyses. The SAFE-h2 version is 2023a."')

print('SAFE-h2 Citation: Behrooz Darbani, Mogens Nicolaisen. SNP Allocation For Estimating Heritability (SAFE-h2): A tool to explore genomic origins of phenotypes for estimation of SNP heritability using additive-only allelic effects or additive and non-additive allelic effects. doi: https://doi.org/10.1101/2023.08.28.555092')

print('PLINK Citation: GigaScience 2015Dec;4(1):s13742-015-0047-8 (doi:https://doi.org/10.1186/s13742-015-0047-8)')

print('Also cite Nat Genet.2010Apr;42(4):348-54.doi:10.1038/ng.548 ... if using EMMAX model')
print('Also cite Am J Hum Genet.2012Dec7;91(6):1011-21.doi:10.1016/j.ajhg.2012.10.010 ... if using LDAK models')
print('Also cite Nat Genet.2010Jul;42(7):565-9.doi:10.1038/ng.608 ... if using GCTA-GREML model')
print('Also cite Nat Genet.2012;44:821–824.doi.org/10.1038/ng.2310 ... if using GEMMA model')
exit()
exit()
